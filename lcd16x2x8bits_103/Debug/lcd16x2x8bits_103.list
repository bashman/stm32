
lcd16x2x8bits_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003614  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003720  08003720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080037b0  080037b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b0  080037b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08003828  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003828  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009968  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000198c  00000000  00000000  00029a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  0002b390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002bd10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000142f0  00000000  00000000  0002c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fd2  00000000  00000000  000408b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d467  00000000  00000000  0004888a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5cf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  000b5d6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003708 	.word	0x08003708

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003708 	.word	0x08003708

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fd1e 	bl	8002ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db0a      	blt.n	80002e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <__NVIC_SetPriority+0x4c>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	0112      	lsls	r2, r2, #4
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	440b      	add	r3, r1
 80002dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e0:	e00a      	b.n	80002f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <__NVIC_SetPriority+0x50>)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	3b04      	subs	r3, #4
 80002f0:	0112      	lsls	r2, r2, #4
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	440b      	add	r3, r1
 80002f6:	761a      	strb	r2, [r3, #24]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e100 	.word	0xe000e100
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000394:	f7ff ff90 	bl	80002b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <__NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <__NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000426:	2300      	movs	r3, #0
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800042e:	e127      	b.n	8000680 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000430:	2201      	movs	r2, #1
 8000432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	69fa      	ldr	r2, [r7, #28]
 8000440:	4013      	ands	r3, r2
 8000442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000444:	69ba      	ldr	r2, [r7, #24]
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	429a      	cmp	r2, r3
 800044a:	f040 8116 	bne.w	800067a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	2b12      	cmp	r3, #18
 8000454:	d034      	beq.n	80004c0 <HAL_GPIO_Init+0xa4>
 8000456:	2b12      	cmp	r3, #18
 8000458:	d80d      	bhi.n	8000476 <HAL_GPIO_Init+0x5a>
 800045a:	2b02      	cmp	r3, #2
 800045c:	d02b      	beq.n	80004b6 <HAL_GPIO_Init+0x9a>
 800045e:	2b02      	cmp	r3, #2
 8000460:	d804      	bhi.n	800046c <HAL_GPIO_Init+0x50>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d031      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d01c      	beq.n	80004a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800046a:	e048      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800046c:	2b03      	cmp	r3, #3
 800046e:	d043      	beq.n	80004f8 <HAL_GPIO_Init+0xdc>
 8000470:	2b11      	cmp	r3, #17
 8000472:	d01b      	beq.n	80004ac <HAL_GPIO_Init+0x90>
          break;
 8000474:	e043      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000476:	4a89      	ldr	r2, [pc, #548]	; (800069c <HAL_GPIO_Init+0x280>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d026      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800047c:	4a87      	ldr	r2, [pc, #540]	; (800069c <HAL_GPIO_Init+0x280>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d806      	bhi.n	8000490 <HAL_GPIO_Init+0x74>
 8000482:	4a87      	ldr	r2, [pc, #540]	; (80006a0 <HAL_GPIO_Init+0x284>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d020      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000488:	4a86      	ldr	r2, [pc, #536]	; (80006a4 <HAL_GPIO_Init+0x288>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d01d      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 800048e:	e036      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000490:	4a85      	ldr	r2, [pc, #532]	; (80006a8 <HAL_GPIO_Init+0x28c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d019      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000496:	4a85      	ldr	r2, [pc, #532]	; (80006ac <HAL_GPIO_Init+0x290>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d016      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800049c:	4a84      	ldr	r2, [pc, #528]	; (80006b0 <HAL_GPIO_Init+0x294>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d013      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 80004a2:	e02c      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	623b      	str	r3, [r7, #32]
          break;
 80004aa:	e028      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	3304      	adds	r3, #4
 80004b2:	623b      	str	r3, [r7, #32]
          break;
 80004b4:	e023      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	3308      	adds	r3, #8
 80004bc:	623b      	str	r3, [r7, #32]
          break;
 80004be:	e01e      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	330c      	adds	r3, #12
 80004c6:	623b      	str	r3, [r7, #32]
          break;
 80004c8:	e019      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004d2:	2304      	movs	r3, #4
 80004d4:	623b      	str	r3, [r7, #32]
          break;
 80004d6:	e012      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d105      	bne.n	80004ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004e0:	2308      	movs	r3, #8
 80004e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	69fa      	ldr	r2, [r7, #28]
 80004e8:	611a      	str	r2, [r3, #16]
          break;
 80004ea:	e008      	b.n	80004fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ec:	2308      	movs	r3, #8
 80004ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	615a      	str	r2, [r3, #20]
          break;
 80004f6:	e002      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
          break;
 80004fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d801      	bhi.n	8000508 <HAL_GPIO_Init+0xec>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	e001      	b.n	800050c <HAL_GPIO_Init+0xf0>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3304      	adds	r3, #4
 800050c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d802      	bhi.n	800051a <HAL_GPIO_Init+0xfe>
 8000514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	e002      	b.n	8000520 <HAL_GPIO_Init+0x104>
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	3b08      	subs	r3, #8
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	210f      	movs	r1, #15
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	401a      	ands	r2, r3
 8000532:	6a39      	ldr	r1, [r7, #32]
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	431a      	orrs	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	2b00      	cmp	r3, #0
 800054a:	f000 8096 	beq.w	800067a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800054e:	4b59      	ldr	r3, [pc, #356]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a58      	ldr	r2, [pc, #352]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <HAL_GPIO_Init+0x298>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000566:	4a54      	ldr	r2, [pc, #336]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	3302      	adds	r3, #2
 800056e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000572:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	f003 0303 	and.w	r3, r3, #3
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	220f      	movs	r2, #15
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0x19e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_Init+0x19a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x2a8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x196>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x2ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_GPIO_Init+0x192>
 80005aa:	2303      	movs	r3, #3
 80005ac:	e006      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ae:	2304      	movs	r3, #4
 80005b0:	e004      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b2:	2302      	movs	r3, #2
 80005b4:	e002      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ba:	2300      	movs	r3, #0
 80005bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005be:	f002 0203 	and.w	r2, r2, #3
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	4093      	lsls	r3, r2
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005cc:	493a      	ldr	r1, [pc, #232]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	089b      	lsrs	r3, r3, #2
 80005d2:	3302      	adds	r3, #2
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4938      	ldr	r1, [pc, #224]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	600b      	str	r3, [r1, #0]
 80005f2:	e006      	b.n	8000602 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	43db      	mvns	r3, r3
 80005fc:	4933      	ldr	r1, [pc, #204]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005fe:	4013      	ands	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	492e      	ldr	r1, [pc, #184]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4313      	orrs	r3, r2
 8000618:	604b      	str	r3, [r1, #4]
 800061a:	e006      	b.n	800062a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	43db      	mvns	r3, r3
 8000624:	4929      	ldr	r1, [pc, #164]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000626:	4013      	ands	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	4924      	ldr	r1, [pc, #144]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	4313      	orrs	r3, r2
 8000640:	608b      	str	r3, [r1, #8]
 8000642:	e006      	b.n	8000652 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	43db      	mvns	r3, r3
 800064c:	491f      	ldr	r1, [pc, #124]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800064e:	4013      	ands	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	491a      	ldr	r1, [pc, #104]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	4313      	orrs	r3, r2
 8000668:	60cb      	str	r3, [r1, #12]
 800066a:	e006      	b.n	800067a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	43db      	mvns	r3, r3
 8000674:	4915      	ldr	r1, [pc, #84]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000676:	4013      	ands	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	3301      	adds	r3, #1
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	fa22 f303 	lsr.w	r3, r2, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	f47f aed0 	bne.w	8000430 <HAL_GPIO_Init+0x14>
  }
}
 8000690:	bf00      	nop
 8000692:	372c      	adds	r7, #44	; 0x2c
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	10210000 	.word	0x10210000
 80006a0:	10110000 	.word	0x10110000
 80006a4:	10120000 	.word	0x10120000
 80006a8:	10310000 	.word	0x10310000
 80006ac:	10320000 	.word	0x10320000
 80006b0:	10220000 	.word	0x10220000
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010000 	.word	0x40010000
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40011000 	.word	0x40011000
 80006c8:	40011400 	.word	0x40011400
 80006cc:	40010400 	.word	0x40010400

080006d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
 80006dc:	4613      	mov	r3, r2
 80006de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006e0:	787b      	ldrb	r3, [r7, #1]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006e6:	887a      	ldrh	r2, [r7, #2]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80006ec:	e003      	b.n	80006f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	041a      	lsls	r2, r3, #16
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	611a      	str	r2, [r3, #16]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68da      	ldr	r2, [r3, #12]
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	4013      	ands	r3, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000718:	887a      	ldrh	r2, [r7, #2]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800071e:	e002      	b.n	8000726 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	611a      	str	r2, [r3, #16]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e10f      	b.n	8000962 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d106      	bne.n	800075c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f002 fa58 	bl	8002c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2224      	movs	r2, #36	; 0x24
 8000760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0201 	bic.w	r2, r2, #1
 8000772:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000774:	f001 fcb4 	bl	80020e0 <HAL_RCC_GetPCLK1Freq>
 8000778:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4a7b      	ldr	r2, [pc, #492]	; (800096c <HAL_I2C_Init+0x23c>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d807      	bhi.n	8000794 <HAL_I2C_Init+0x64>
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4a7a      	ldr	r2, [pc, #488]	; (8000970 <HAL_I2C_Init+0x240>)
 8000788:	4293      	cmp	r3, r2
 800078a:	bf94      	ite	ls
 800078c:	2301      	movls	r3, #1
 800078e:	2300      	movhi	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	e006      	b.n	80007a2 <HAL_I2C_Init+0x72>
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4a77      	ldr	r2, [pc, #476]	; (8000974 <HAL_I2C_Init+0x244>)
 8000798:	4293      	cmp	r3, r2
 800079a:	bf94      	ite	ls
 800079c:	2301      	movls	r3, #1
 800079e:	2300      	movhi	r3, #0
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e0db      	b.n	8000962 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4a72      	ldr	r2, [pc, #456]	; (8000978 <HAL_I2C_Init+0x248>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	0c9b      	lsrs	r3, r3, #18
 80007b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6a1b      	ldr	r3, [r3, #32]
 80007d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4a64      	ldr	r2, [pc, #400]	; (800096c <HAL_I2C_Init+0x23c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d802      	bhi.n	80007e4 <HAL_I2C_Init+0xb4>
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3301      	adds	r3, #1
 80007e2:	e009      	b.n	80007f8 <HAL_I2C_Init+0xc8>
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007ea:	fb02 f303 	mul.w	r3, r2, r3
 80007ee:	4a63      	ldr	r2, [pc, #396]	; (800097c <HAL_I2C_Init+0x24c>)
 80007f0:	fba2 2303 	umull	r2, r3, r2, r3
 80007f4:	099b      	lsrs	r3, r3, #6
 80007f6:	3301      	adds	r3, #1
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	430b      	orrs	r3, r1
 80007fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800080a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	4956      	ldr	r1, [pc, #344]	; (800096c <HAL_I2C_Init+0x23c>)
 8000814:	428b      	cmp	r3, r1
 8000816:	d80d      	bhi.n	8000834 <HAL_I2C_Init+0x104>
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	1e59      	subs	r1, r3, #1
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	fbb1 f3f3 	udiv	r3, r1, r3
 8000826:	3301      	adds	r3, #1
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	2b04      	cmp	r3, #4
 800082e:	bf38      	it	cc
 8000830:	2304      	movcc	r3, #4
 8000832:	e04f      	b.n	80008d4 <HAL_I2C_Init+0x1a4>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d111      	bne.n	8000860 <HAL_I2C_Init+0x130>
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	1e58      	subs	r0, r3, #1
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6859      	ldr	r1, [r3, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	440b      	add	r3, r1
 800084a:	fbb0 f3f3 	udiv	r3, r0, r3
 800084e:	3301      	adds	r3, #1
 8000850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	e012      	b.n	8000886 <HAL_I2C_Init+0x156>
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	1e58      	subs	r0, r3, #1
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6859      	ldr	r1, [r3, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	440b      	add	r3, r1
 800086e:	0099      	lsls	r1, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	fbb0 f3f3 	udiv	r3, r0, r3
 8000876:	3301      	adds	r3, #1
 8000878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf0c      	ite	eq
 8000880:	2301      	moveq	r3, #1
 8000882:	2300      	movne	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_I2C_Init+0x15e>
 800088a:	2301      	movs	r3, #1
 800088c:	e022      	b.n	80008d4 <HAL_I2C_Init+0x1a4>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10e      	bne.n	80008b4 <HAL_I2C_Init+0x184>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	1e58      	subs	r0, r3, #1
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6859      	ldr	r1, [r3, #4]
 800089e:	460b      	mov	r3, r1
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	440b      	add	r3, r1
 80008a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80008a8:	3301      	adds	r3, #1
 80008aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b2:	e00f      	b.n	80008d4 <HAL_I2C_Init+0x1a4>
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	1e58      	subs	r0, r3, #1
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6859      	ldr	r1, [r3, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	440b      	add	r3, r1
 80008c2:	0099      	lsls	r1, r3, #2
 80008c4:	440b      	add	r3, r1
 80008c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80008ca:	3301      	adds	r3, #1
 80008cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	6809      	ldr	r1, [r1, #0]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69da      	ldr	r2, [r3, #28]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6a1b      	ldr	r3, [r3, #32]
 80008ee:	431a      	orrs	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	6911      	ldr	r1, [r2, #16]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	68d2      	ldr	r2, [r2, #12]
 800090e:	4311      	orrs	r1, r2
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	430b      	orrs	r3, r1
 8000916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695a      	ldr	r2, [r3, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	431a      	orrs	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	430a      	orrs	r2, r1
 8000932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f042 0201 	orr.w	r2, r2, #1
 8000942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2220      	movs	r2, #32
 800094e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	000186a0 	.word	0x000186a0
 8000970:	001e847f 	.word	0x001e847f
 8000974:	003d08ff 	.word	0x003d08ff
 8000978:	431bde83 	.word	0x431bde83
 800097c:	10624dd3 	.word	0x10624dd3

08000980 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af02      	add	r7, sp, #8
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	461a      	mov	r2, r3
 800098c:	460b      	mov	r3, r1
 800098e:	817b      	strh	r3, [r7, #10]
 8000990:	4613      	mov	r3, r2
 8000992:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff fc32 	bl	80001fc <HAL_GetTick>
 8000998:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b20      	cmp	r3, #32
 80009a4:	f040 80e0 	bne.w	8000b68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2319      	movs	r3, #25
 80009ae:	2201      	movs	r2, #1
 80009b0:	4970      	ldr	r1, [pc, #448]	; (8000b74 <HAL_I2C_Master_Transmit+0x1f4>)
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f000 fde2 	bl	800157c <I2C_WaitOnFlagUntilTimeout>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80009be:	2302      	movs	r3, #2
 80009c0:	e0d3      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d101      	bne.n	80009d0 <HAL_I2C_Master_Transmit+0x50>
 80009cc:	2302      	movs	r3, #2
 80009ce:	e0cc      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2201      	movs	r2, #1
 80009d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d007      	beq.n	80009f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f042 0201 	orr.w	r2, r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2221      	movs	r2, #33	; 0x21
 8000a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2210      	movs	r2, #16
 8000a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	893a      	ldrh	r2, [r7, #8]
 8000a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4a50      	ldr	r2, [pc, #320]	; (8000b78 <HAL_I2C_Master_Transmit+0x1f8>)
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000a38:	8979      	ldrh	r1, [r7, #10]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	6a3a      	ldr	r2, [r7, #32]
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f000 fbcc 	bl	80011dc <I2C_MasterRequestWrite>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e08d      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000a64:	e066      	b.n	8000b34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	6a39      	ldr	r1, [r7, #32]
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f000 fe5c 	bl	8001728 <I2C_WaitOnTXEFlagUntilTimeout>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00d      	beq.n	8000a92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	d107      	bne.n	8000a8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e06b      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aba:	3b01      	subs	r3, #1
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d11b      	bne.n	8000b08 <HAL_I2C_Master_Transmit+0x188>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d017      	beq.n	8000b08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000adc:	781a      	ldrb	r2, [r3, #0]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	3b01      	subs	r3, #1
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b00:	3b01      	subs	r3, #1
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	6a39      	ldr	r1, [r7, #32]
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f000 fe4c 	bl	80017aa <I2C_WaitOnBTFFlagUntilTimeout>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00d      	beq.n	8000b34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d107      	bne.n	8000b30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e01a      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d194      	bne.n	8000a66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2220      	movs	r2, #32
 8000b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	e000      	b.n	8000b6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000b68:	2302      	movs	r3, #2
  }
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	00100002 	.word	0x00100002
 8000b78:	ffff0000 	.word	0xffff0000

08000b7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af02      	add	r7, sp, #8
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	4608      	mov	r0, r1
 8000b86:	4611      	mov	r1, r2
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	817b      	strh	r3, [r7, #10]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	813b      	strh	r3, [r7, #8]
 8000b92:	4613      	mov	r3, r2
 8000b94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000b96:	f7ff fb31 	bl	80001fc <HAL_GetTick>
 8000b9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	f040 80d9 	bne.w	8000d5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2319      	movs	r3, #25
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	496d      	ldr	r1, [pc, #436]	; (8000d68 <HAL_I2C_Mem_Write+0x1ec>)
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f000 fce1 	bl	800157c <I2C_WaitOnFlagUntilTimeout>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e0cc      	b.n	8000d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d101      	bne.n	8000bd2 <HAL_I2C_Mem_Write+0x56>
 8000bce:	2302      	movs	r3, #2
 8000bd0:	e0c5      	b.n	8000d5e <HAL_I2C_Mem_Write+0x1e2>
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d007      	beq.n	8000bf8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 0201 	orr.w	r2, r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2221      	movs	r2, #33	; 0x21
 8000c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2240      	movs	r2, #64	; 0x40
 8000c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	6a3a      	ldr	r2, [r7, #32]
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4a4d      	ldr	r2, [pc, #308]	; (8000d6c <HAL_I2C_Mem_Write+0x1f0>)
 8000c38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000c3a:	88f8      	ldrh	r0, [r7, #6]
 8000c3c:	893a      	ldrh	r2, [r7, #8]
 8000c3e:	8979      	ldrh	r1, [r7, #10]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	4603      	mov	r3, r0
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f000 fb3c 	bl	80012c8 <I2C_RequestMemoryWrite>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d052      	beq.n	8000cfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e081      	b.n	8000d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 fd62 	bl	8001728 <I2C_WaitOnTXEFlagUntilTimeout>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00d      	beq.n	8000c86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d107      	bne.n	8000c82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e06b      	b.n	8000d5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d11b      	bne.n	8000cfc <HAL_I2C_Mem_Write+0x180>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d017      	beq.n	8000cfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1aa      	bne.n	8000c5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f000 fd4e 	bl	80017aa <I2C_WaitOnBTFFlagUntilTimeout>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00d      	beq.n	8000d30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d107      	bne.n	8000d2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e016      	b.n	8000d5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2220      	movs	r2, #32
 8000d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e000      	b.n	8000d5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8000d5c:	2302      	movs	r3, #2
  }
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	00100002 	.word	0x00100002
 8000d6c:	ffff0000 	.word	0xffff0000

08000d70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4603      	mov	r3, r0
 8000d80:	817b      	strh	r3, [r7, #10]
 8000d82:	460b      	mov	r3, r1
 8000d84:	813b      	strh	r3, [r7, #8]
 8000d86:	4613      	mov	r3, r2
 8000d88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000d8a:	f7ff fa37 	bl	80001fc <HAL_GetTick>
 8000d8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b20      	cmp	r3, #32
 8000d9a:	f040 8218 	bne.w	80011ce <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2319      	movs	r3, #25
 8000da4:	2201      	movs	r2, #1
 8000da6:	4981      	ldr	r1, [pc, #516]	; (8000fac <HAL_I2C_Mem_Read+0x23c>)
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f000 fbe7 	bl	800157c <I2C_WaitOnFlagUntilTimeout>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8000db4:	2302      	movs	r3, #2
 8000db6:	e20b      	b.n	80011d0 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d101      	bne.n	8000dc6 <HAL_I2C_Mem_Read+0x56>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e204      	b.n	80011d0 <HAL_I2C_Mem_Read+0x460>
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d007      	beq.n	8000dec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 0201 	orr.w	r2, r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2222      	movs	r2, #34	; 0x22
 8000e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2240      	movs	r2, #64	; 0x40
 8000e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4a61      	ldr	r2, [pc, #388]	; (8000fb0 <HAL_I2C_Mem_Read+0x240>)
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e2e:	88f8      	ldrh	r0, [r7, #6]
 8000e30:	893a      	ldrh	r2, [r7, #8]
 8000e32:	8979      	ldrh	r1, [r7, #10]
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f000 facc 	bl	80013dc <I2C_RequestMemoryRead>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e1c0      	b.n	80011d0 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d113      	bne.n	8000e7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	623b      	str	r3, [r7, #32]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	623b      	str	r3, [r7, #32]
 8000e6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e194      	b.n	80011a8 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d11d      	bne.n	8000ec2 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e94:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e96:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	61fb      	str	r3, [r7, #28]
 8000eac:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ebc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ebe:	b662      	cpsie	i
 8000ec0:	e172      	b.n	80011a8 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d11d      	bne.n	8000f06 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ed8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000eda:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f02:	b662      	cpsie	i
 8000f04:	e150      	b.n	80011a8 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f14:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8000f2c:	e13c      	b.n	80011a8 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	f200 80f5 	bhi.w	8001122 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d123      	bne.n	8000f88 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 fc71 	bl	800182c <I2C_WaitOnRXNEFlagUntilTimeout>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e13d      	b.n	80011d0 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	691a      	ldr	r2, [r3, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f70:	3b01      	subs	r3, #1
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000f86:	e10f      	b.n	80011a8 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d150      	bne.n	8001032 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f96:	2200      	movs	r2, #0
 8000f98:	4906      	ldr	r1, [pc, #24]	; (8000fb4 <HAL_I2C_Mem_Read+0x244>)
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 faee 	bl	800157c <I2C_WaitOnFlagUntilTimeout>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d008      	beq.n	8000fb8 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e112      	b.n	80011d0 <HAL_I2C_Mem_Read+0x460>
 8000faa:	bf00      	nop
 8000fac:	00100002 	.word	0x00100002
 8000fb0:	ffff0000 	.word	0xffff0000
 8000fb4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000ffc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800101a:	3b01      	subs	r3, #1
 800101c:	b29a      	uxth	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001026:	b29b      	uxth	r3, r3
 8001028:	3b01      	subs	r3, #1
 800102a:	b29a      	uxth	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001030:	e0ba      	b.n	80011a8 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001038:	2200      	movs	r2, #0
 800103a:	4967      	ldr	r1, [pc, #412]	; (80011d8 <HAL_I2C_Mem_Read+0x468>)
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 fa9d 	bl	800157c <I2C_WaitOnFlagUntilTimeout>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0c1      	b.n	80011d0 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800105a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800107a:	3b01      	subs	r3, #1
 800107c:	b29a      	uxth	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001086:	b29b      	uxth	r3, r3
 8001088:	3b01      	subs	r3, #1
 800108a:	b29a      	uxth	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001096:	2200      	movs	r2, #0
 8001098:	494f      	ldr	r1, [pc, #316]	; (80011d8 <HAL_I2C_Mem_Read+0x468>)
 800109a:	68f8      	ldr	r0, [r7, #12]
 800109c:	f000 fa6e 	bl	800157c <I2C_WaitOnFlagUntilTimeout>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e092      	b.n	80011d0 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010b8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b29a      	uxth	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	3b01      	subs	r3, #1
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80010ec:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110a:	3b01      	subs	r3, #1
 800110c:	b29a      	uxth	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001116:	b29b      	uxth	r3, r3
 8001118:	3b01      	subs	r3, #1
 800111a:	b29a      	uxth	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001120:	e042      	b.n	80011a8 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001124:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 fb80 	bl	800182c <I2C_WaitOnRXNEFlagUntilTimeout>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e04c      	b.n	80011d0 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001152:	3b01      	subs	r3, #1
 8001154:	b29a      	uxth	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800115e:	b29b      	uxth	r3, r3
 8001160:	3b01      	subs	r3, #1
 8001162:	b29a      	uxth	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	2b04      	cmp	r3, #4
 8001174:	d118      	bne.n	80011a8 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001192:	3b01      	subs	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119e:	b29b      	uxth	r3, r3
 80011a0:	3b01      	subs	r3, #1
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f47f aebe 	bne.w	8000f2e <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2220      	movs	r2, #32
 80011b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80011ce:	2302      	movs	r3, #2
  }
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	00010004 	.word	0x00010004

080011dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	460b      	mov	r3, r1
 80011ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d006      	beq.n	8001206 <I2C_MasterRequestWrite+0x2a>
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d003      	beq.n	8001206 <I2C_MasterRequestWrite+0x2a>
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001204:	d108      	bne.n	8001218 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e00b      	b.n	8001230 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	2b12      	cmp	r3, #18
 800121e:	d107      	bne.n	8001230 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800122e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f000 f99d 	bl	800157c <I2C_WaitOnFlagUntilTimeout>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e035      	b.n	80012b8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001254:	d108      	bne.n	8001268 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001256:	897b      	ldrh	r3, [r7, #10]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	e01b      	b.n	80012a0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001268:	897b      	ldrh	r3, [r7, #10]
 800126a:	11db      	asrs	r3, r3, #7
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f003 0306 	and.w	r3, r3, #6
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f063 030f 	orn	r3, r3, #15
 8001278:	b2da      	uxtb	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	490e      	ldr	r1, [pc, #56]	; (80012c0 <I2C_MasterRequestWrite+0xe4>)
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 f9cf 	bl	800162a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e010      	b.n	80012b8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001296:	897b      	ldrh	r3, [r7, #10]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	4907      	ldr	r1, [pc, #28]	; (80012c4 <I2C_MasterRequestWrite+0xe8>)
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 f9bf 	bl	800162a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	00010008 	.word	0x00010008
 80012c4:	00010002 	.word	0x00010002

080012c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	817b      	strh	r3, [r7, #10]
 80012da:	460b      	mov	r3, r1
 80012dc:	813b      	strh	r3, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 f93c 	bl	800157c <I2C_WaitOnFlagUntilTimeout>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e05f      	b.n	80013ce <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800130e:	897b      	ldrh	r3, [r7, #10]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800131c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	6a3a      	ldr	r2, [r7, #32]
 8001322:	492d      	ldr	r1, [pc, #180]	; (80013d8 <I2C_RequestMemoryWrite+0x110>)
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 f980 	bl	800162a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e04c      	b.n	80013ce <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134c:	6a39      	ldr	r1, [r7, #32]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 f9ea 	bl	8001728 <I2C_WaitOnTXEFlagUntilTimeout>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00d      	beq.n	8001376 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	2b04      	cmp	r3, #4
 8001360:	d107      	bne.n	8001372 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001370:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e02b      	b.n	80013ce <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d105      	bne.n	8001388 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800137c:	893b      	ldrh	r3, [r7, #8]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	611a      	str	r2, [r3, #16]
 8001386:	e021      	b.n	80013cc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001388:	893b      	ldrh	r3, [r7, #8]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	b29b      	uxth	r3, r3
 800138e:	b2da      	uxtb	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001398:	6a39      	ldr	r1, [r7, #32]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 f9c4 	bl	8001728 <I2C_WaitOnTXEFlagUntilTimeout>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00d      	beq.n	80013c2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d107      	bne.n	80013be <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e005      	b.n	80013ce <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013c2:	893b      	ldrh	r3, [r7, #8]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	00010002 	.word	0x00010002

080013dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	4608      	mov	r0, r1
 80013e6:	4611      	mov	r1, r2
 80013e8:	461a      	mov	r2, r3
 80013ea:	4603      	mov	r3, r0
 80013ec:	817b      	strh	r3, [r7, #10]
 80013ee:	460b      	mov	r3, r1
 80013f0:	813b      	strh	r3, [r7, #8]
 80013f2:	4613      	mov	r3, r2
 80013f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001404:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001414:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2200      	movs	r2, #0
 800141e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 f8aa 	bl	800157c <I2C_WaitOnFlagUntilTimeout>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e09e      	b.n	8001570 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001432:	897b      	ldrh	r3, [r7, #10]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001440:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	6a3a      	ldr	r2, [r7, #32]
 8001446:	494c      	ldr	r1, [pc, #304]	; (8001578 <I2C_RequestMemoryRead+0x19c>)
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f000 f8ee 	bl	800162a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e08b      	b.n	8001570 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800146e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001470:	6a39      	ldr	r1, [r7, #32]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 f958 	bl	8001728 <I2C_WaitOnTXEFlagUntilTimeout>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	2b04      	cmp	r3, #4
 8001484:	d107      	bne.n	8001496 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001494:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e06a      	b.n	8001570 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014a0:	893b      	ldrh	r3, [r7, #8]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	611a      	str	r2, [r3, #16]
 80014aa:	e021      	b.n	80014f0 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80014ac:	893b      	ldrh	r3, [r7, #8]
 80014ae:	0a1b      	lsrs	r3, r3, #8
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014bc:	6a39      	ldr	r1, [r7, #32]
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 f932 	bl	8001728 <I2C_WaitOnTXEFlagUntilTimeout>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00d      	beq.n	80014e6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d107      	bne.n	80014e2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e044      	b.n	8001570 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014e6:	893b      	ldrh	r3, [r7, #8]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f2:	6a39      	ldr	r1, [r7, #32]
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 f917 	bl	8001728 <I2C_WaitOnTXEFlagUntilTimeout>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00d      	beq.n	800151c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	2b04      	cmp	r3, #4
 8001506:	d107      	bne.n	8001518 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001516:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e029      	b.n	8001570 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800152a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	2200      	movs	r2, #0
 8001534:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 f81f 	bl	800157c <I2C_WaitOnFlagUntilTimeout>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e013      	b.n	8001570 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001548:	897b      	ldrh	r3, [r7, #10]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	6a3a      	ldr	r2, [r7, #32]
 800155c:	4906      	ldr	r1, [pc, #24]	; (8001578 <I2C_RequestMemoryRead+0x19c>)
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f863 	bl	800162a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	00010002 	.word	0x00010002

0800157c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	4613      	mov	r3, r2
 800158a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800158c:	e025      	b.n	80015da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001594:	d021      	beq.n	80015da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001596:	f7fe fe31 	bl	80001fc <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d302      	bcc.n	80015ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d116      	bne.n	80015da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2220      	movs	r2, #32
 80015b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f043 0220 	orr.w	r2, r3, #32
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e023      	b.n	8001622 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	0c1b      	lsrs	r3, r3, #16
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d10d      	bne.n	8001600 <I2C_WaitOnFlagUntilTimeout+0x84>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4013      	ands	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	e00c      	b.n	800161a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4013      	ands	r3, r2
 800160c:	b29b      	uxth	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf0c      	ite	eq
 8001612:	2301      	moveq	r3, #1
 8001614:	2300      	movne	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	429a      	cmp	r2, r3
 800161e:	d0b6      	beq.n	800158e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001638:	e051      	b.n	80016de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001648:	d123      	bne.n	8001692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001658:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001662:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2220      	movs	r2, #32
 800166e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f043 0204 	orr.w	r2, r3, #4
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e046      	b.n	8001720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001698:	d021      	beq.n	80016de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800169a:	f7fe fdaf 	bl	80001fc <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d302      	bcc.n	80016b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d116      	bne.n	80016de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2220      	movs	r2, #32
 80016ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f043 0220 	orr.w	r2, r3, #32
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e020      	b.n	8001720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	0c1b      	lsrs	r3, r3, #16
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10c      	bne.n	8001702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4013      	ands	r3, r2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	e00b      	b.n	800171a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	43da      	mvns	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	4013      	ands	r3, r2
 800170e:	b29b      	uxth	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf14      	ite	ne
 8001714:	2301      	movne	r3, #1
 8001716:	2300      	moveq	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d18d      	bne.n	800163a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001734:	e02d      	b.n	8001792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 f8ce 	bl	80018d8 <I2C_IsAcknowledgeFailed>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e02d      	b.n	80017a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800174c:	d021      	beq.n	8001792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174e:	f7fe fd55 	bl	80001fc <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	429a      	cmp	r2, r3
 800175c:	d302      	bcc.n	8001764 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d116      	bne.n	8001792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2220      	movs	r2, #32
 800176e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f043 0220 	orr.w	r2, r3, #32
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e007      	b.n	80017a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179c:	2b80      	cmp	r3, #128	; 0x80
 800179e:	d1ca      	bne.n	8001736 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017b6:	e02d      	b.n	8001814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f88d 	bl	80018d8 <I2C_IsAcknowledgeFailed>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e02d      	b.n	8001824 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017ce:	d021      	beq.n	8001814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d0:	f7fe fd14 	bl	80001fc <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d302      	bcc.n	80017e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d116      	bne.n	8001814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f043 0220 	orr.w	r2, r3, #32
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e007      	b.n	8001824 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	2b04      	cmp	r3, #4
 8001820:	d1ca      	bne.n	80017b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001838:	e042      	b.n	80018c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2b10      	cmp	r3, #16
 8001846:	d119      	bne.n	800187c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f06f 0210 	mvn.w	r2, #16
 8001850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2220      	movs	r2, #32
 800185c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e029      	b.n	80018d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187c:	f7fe fcbe 	bl	80001fc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	429a      	cmp	r2, r3
 800188a:	d302      	bcc.n	8001892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f043 0220 	orr.w	r2, r3, #32
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e007      	b.n	80018d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ca:	2b40      	cmp	r3, #64	; 0x40
 80018cc:	d1b5      	bne.n	800183a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ee:	d11b      	bne.n	8001928 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f043 0204 	orr.w	r2, r3, #4
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e26c      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8087 	beq.w	8001a62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001954:	4b92      	ldr	r3, [pc, #584]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b04      	cmp	r3, #4
 800195e:	d00c      	beq.n	800197a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001960:	4b8f      	ldr	r3, [pc, #572]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	d112      	bne.n	8001992 <HAL_RCC_OscConfig+0x5e>
 800196c:	4b8c      	ldr	r3, [pc, #560]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001978:	d10b      	bne.n	8001992 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197a:	4b89      	ldr	r3, [pc, #548]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d06c      	beq.n	8001a60 <HAL_RCC_OscConfig+0x12c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d168      	bne.n	8001a60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e246      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x76>
 800199c:	4b80      	ldr	r3, [pc, #512]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a7f      	ldr	r2, [pc, #508]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	e02e      	b.n	8001a08 <HAL_RCC_OscConfig+0xd4>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x98>
 80019b2:	4b7b      	ldr	r3, [pc, #492]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7a      	ldr	r2, [pc, #488]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b78      	ldr	r3, [pc, #480]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a77      	ldr	r2, [pc, #476]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e01d      	b.n	8001a08 <HAL_RCC_OscConfig+0xd4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0xbc>
 80019d6:	4b72      	ldr	r3, [pc, #456]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a71      	ldr	r2, [pc, #452]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b6f      	ldr	r3, [pc, #444]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a6e      	ldr	r2, [pc, #440]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e00b      	b.n	8001a08 <HAL_RCC_OscConfig+0xd4>
 80019f0:	4b6b      	ldr	r3, [pc, #428]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6a      	ldr	r2, [pc, #424]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a67      	ldr	r2, [pc, #412]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d013      	beq.n	8001a38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe fbf4 	bl	80001fc <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7fe fbf0 	bl	80001fc <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e1fa      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0xe4>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7fe fbe0 	bl	80001fc <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7fe fbdc 	bl	80001fc <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1e6      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x10c>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d063      	beq.n	8001b36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00b      	beq.n	8001a92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a7a:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d11c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x18c>
 8001a86:	4b46      	ldr	r3, [pc, #280]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d116      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <HAL_RCC_OscConfig+0x176>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e1ba      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aaa:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4939      	ldr	r1, [pc, #228]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abe:	e03a      	b.n	8001b36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac8:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <HAL_RCC_OscConfig+0x270>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7fe fb95 	bl	80001fc <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7fe fb91 	bl	80001fc <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e19b      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4927      	ldr	r1, [pc, #156]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7fe fb74 	bl	80001fc <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b18:	f7fe fb70 	bl	80001fc <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e17a      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d03a      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d019      	beq.n	8001b7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7fe fb54 	bl	80001fc <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b58:	f7fe fb50 	bl	80001fc <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e15a      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f000 fada 	bl	8002130 <RCC_Delay>
 8001b7c:	e01c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b84:	f7fe fb3a 	bl	80001fc <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8a:	e00f      	b.n	8001bac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7fe fb36 	bl	80001fc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d908      	bls.n	8001bac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e140      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	42420000 	.word	0x42420000
 8001ba8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4b9e      	ldr	r3, [pc, #632]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e9      	bne.n	8001b8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80a6 	beq.w	8001d12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b97      	ldr	r3, [pc, #604]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10d      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b94      	ldr	r3, [pc, #592]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a93      	ldr	r2, [pc, #588]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b91      	ldr	r3, [pc, #580]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	4b8e      	ldr	r3, [pc, #568]	; (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d118      	bne.n	8001c30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfe:	4b8b      	ldr	r3, [pc, #556]	; (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a8a      	ldr	r2, [pc, #552]	; (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0a:	f7fe faf7 	bl	80001fc <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c12:	f7fe faf3 	bl	80001fc <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b64      	cmp	r3, #100	; 0x64
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e0fd      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	4b81      	ldr	r3, [pc, #516]	; (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x312>
 8001c38:	4b7b      	ldr	r3, [pc, #492]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4a7a      	ldr	r2, [pc, #488]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6213      	str	r3, [r2, #32]
 8001c44:	e02d      	b.n	8001ca2 <HAL_RCC_OscConfig+0x36e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x334>
 8001c4e:	4b76      	ldr	r3, [pc, #472]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a75      	ldr	r2, [pc, #468]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a72      	ldr	r2, [pc, #456]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	6213      	str	r3, [r2, #32]
 8001c66:	e01c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x36e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d10c      	bne.n	8001c8a <HAL_RCC_OscConfig+0x356>
 8001c70:	4b6d      	ldr	r3, [pc, #436]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a6c      	ldr	r2, [pc, #432]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6213      	str	r3, [r2, #32]
 8001c7c:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4a69      	ldr	r2, [pc, #420]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6213      	str	r3, [r2, #32]
 8001c88:	e00b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x36e>
 8001c8a:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a66      	ldr	r2, [pc, #408]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	6213      	str	r3, [r2, #32]
 8001c96:	4b64      	ldr	r3, [pc, #400]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a63      	ldr	r2, [pc, #396]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	f023 0304 	bic.w	r3, r3, #4
 8001ca0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d015      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7fe faa7 	bl	80001fc <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7fe faa3 	bl	80001fc <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e0ab      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc8:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0ee      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x37e>
 8001cd4:	e014      	b.n	8001d00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd6:	f7fe fa91 	bl	80001fc <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7fe fa8d 	bl	80001fc <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e095      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ee      	bne.n	8001cde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d105      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d06:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a47      	ldr	r2, [pc, #284]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 8081 	beq.w	8001e1e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d1c:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d061      	beq.n	8001dec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d146      	bne.n	8001dbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d30:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <HAL_RCC_OscConfig+0x4fc>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7fe fa61 	bl	80001fc <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7fe fa5d 	bl	80001fc <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e067      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d50:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d66:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	492d      	ldr	r1, [pc, #180]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d78:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a19      	ldr	r1, [r3, #32]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	4927      	ldr	r1, [pc, #156]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_RCC_OscConfig+0x4fc>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7fe fa31 	bl	80001fc <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe fa2d 	bl	80001fc <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e037      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x46a>
 8001dbc:	e02f      	b.n	8001e1e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_RCC_OscConfig+0x4fc>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fa1a 	bl	80001fc <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7fe fa16 	bl	80001fc <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e020      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x498>
 8001dea:	e018      	b.n	8001e1e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e013      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	42420060 	.word	0x42420060

08001e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0d0      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b6a      	ldr	r3, [pc, #424]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d910      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b67      	ldr	r3, [pc, #412]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 0207 	bic.w	r2, r3, #7
 8001e5e:	4965      	ldr	r1, [pc, #404]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b63      	ldr	r3, [pc, #396]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0b8      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d020      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e90:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4a58      	ldr	r2, [pc, #352]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a52      	ldr	r2, [pc, #328]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb4:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	494d      	ldr	r1, [pc, #308]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d040      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d115      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e07f      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef2:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e073      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e06b      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f12:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f023 0203 	bic.w	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4936      	ldr	r1, [pc, #216]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f24:	f7fe f96a 	bl	80001fc <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7fe f966 	bl	80001fc <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e053      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 020c 	and.w	r2, r3, #12
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d1eb      	bne.n	8001f2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d210      	bcs.n	8001f84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 0207 	bic.w	r2, r3, #7
 8001f6a:	4922      	ldr	r1, [pc, #136]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e032      	b.n	8001fea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4916      	ldr	r1, [pc, #88]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d009      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	490e      	ldr	r1, [pc, #56]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fc2:	f000 f821 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fc6:	4601      	mov	r1, r0
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_RCC_ClockConfig+0x1c8>)
 8001fd4:	5cd3      	ldrb	r3, [r2, r3]
 8001fd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x1cc>)
 8001fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_RCC_ClockConfig+0x1d0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe f8c8 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08003764 	.word	0x08003764
 8002000:	20000008 	.word	0x20000008
 8002004:	20000000 	.word	0x20000000

08002008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	b490      	push	{r4, r7}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800200e:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002010:	1d3c      	adds	r4, r7, #4
 8002012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002014:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002018:	4b28      	ldr	r3, [pc, #160]	; (80020bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b04      	cmp	r3, #4
 8002040:	d002      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x40>
 8002042:	2b08      	cmp	r3, #8
 8002044:	d003      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x46>
 8002046:	e02d      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800204a:	623b      	str	r3, [r7, #32]
      break;
 800204c:	e02d      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	0c9b      	lsrs	r3, r3, #18
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800205a:	4413      	add	r3, r2
 800205c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002060:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d013      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	0c5b      	lsrs	r3, r3, #17
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800207a:	4413      	add	r3, r2
 800207c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002080:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002086:	fb02 f203 	mul.w	r2, r2, r3
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
 8002092:	e004      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	623b      	str	r3, [r7, #32]
      break;
 80020a2:	e002      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020a6:	623b      	str	r3, [r7, #32]
      break;
 80020a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020aa:	6a3b      	ldr	r3, [r7, #32]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3728      	adds	r7, #40	; 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc90      	pop	{r4, r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	08003720 	.word	0x08003720
 80020bc:	08003730 	.word	0x08003730
 80020c0:	40021000 	.word	0x40021000
 80020c4:	007a1200 	.word	0x007a1200
 80020c8:	003d0900 	.word	0x003d0900

080020cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b02      	ldr	r3, [pc, #8]	; (80020dc <HAL_RCC_GetHCLKFreq+0x10>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	20000008 	.word	0x20000008

080020e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020e4:	f7ff fff2 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020e8:	4601      	mov	r1, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	08003774 	.word	0x08003774

08002108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800210c:	f7ff ffde 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 8002110:	4601      	mov	r1, r0
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	0adb      	lsrs	r3, r3, #11
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4a03      	ldr	r2, [pc, #12]	; (800212c <HAL_RCC_GetPCLK2Freq+0x24>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	08003774 	.word	0x08003774

08002130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <RCC_Delay+0x34>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <RCC_Delay+0x38>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0a5b      	lsrs	r3, r3, #9
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800214c:	bf00      	nop
  }
  while (Delay --);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1e5a      	subs	r2, r3, #1
 8002152:	60fa      	str	r2, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f9      	bne.n	800214c <RCC_Delay+0x1c>
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008
 8002168:	10624dd3 	.word	0x10624dd3

0800216c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e03f      	b.n	80021fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 fd78 	bl	8002c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f829 	bl	8002208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002242:	f023 030c 	bic.w	r3, r3, #12
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	430b      	orrs	r3, r1
 800224e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <UART_SetConfig+0x1ac>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d14e      	bne.n	800230e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002270:	f7ff ff4a 	bl	8002108 <HAL_RCC_GetPCLK2Freq>
 8002274:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	009a      	lsls	r2, r3, #2
 8002280:	441a      	add	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fbb2 f3f3 	udiv	r3, r2, r3
 800228c:	4a4a      	ldr	r2, [pc, #296]	; (80023b8 <UART_SetConfig+0x1b0>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	0119      	lsls	r1, r3, #4
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	009a      	lsls	r2, r3, #2
 80022a0:	441a      	add	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ac:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <UART_SetConfig+0x1b0>)
 80022ae:	fba3 0302 	umull	r0, r3, r3, r2
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	2064      	movs	r0, #100	; 0x64
 80022b6:	fb00 f303 	mul.w	r3, r0, r3
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	3332      	adds	r3, #50	; 0x32
 80022c0:	4a3d      	ldr	r2, [pc, #244]	; (80023b8 <UART_SetConfig+0x1b0>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022cc:	4419      	add	r1, r3
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	009a      	lsls	r2, r3, #2
 80022d8:	441a      	add	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e4:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <UART_SetConfig+0x1b0>)
 80022e6:	fba3 0302 	umull	r0, r3, r3, r2
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2064      	movs	r0, #100	; 0x64
 80022ee:	fb00 f303 	mul.w	r3, r0, r3
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	3332      	adds	r3, #50	; 0x32
 80022f8:	4a2f      	ldr	r2, [pc, #188]	; (80023b8 <UART_SetConfig+0x1b0>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	f003 020f 	and.w	r2, r3, #15
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	440a      	add	r2, r1
 800230a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800230c:	e04d      	b.n	80023aa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800230e:	f7ff fee7 	bl	80020e0 <HAL_RCC_GetPCLK1Freq>
 8002312:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	009a      	lsls	r2, r3, #2
 800231e:	441a      	add	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <UART_SetConfig+0x1b0>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	0119      	lsls	r1, r3, #4
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	009a      	lsls	r2, r3, #2
 800233e:	441a      	add	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	fbb2 f2f3 	udiv	r2, r2, r3
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <UART_SetConfig+0x1b0>)
 800234c:	fba3 0302 	umull	r0, r3, r3, r2
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	2064      	movs	r0, #100	; 0x64
 8002354:	fb00 f303 	mul.w	r3, r0, r3
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	3332      	adds	r3, #50	; 0x32
 800235e:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <UART_SetConfig+0x1b0>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	4419      	add	r1, r3
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	009a      	lsls	r2, r3, #2
 8002376:	441a      	add	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <UART_SetConfig+0x1b0>)
 8002384:	fba3 0302 	umull	r0, r3, r3, r2
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	2064      	movs	r0, #100	; 0x64
 800238c:	fb00 f303 	mul.w	r3, r0, r3
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	3332      	adds	r3, #50	; 0x32
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <UART_SetConfig+0x1b0>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	f003 020f 	and.w	r2, r3, #15
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	440a      	add	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40013800 	.word	0x40013800
 80023b8:	51eb851f 	.word	0x51eb851f

080023bc <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;


uint8_t bcd2bin(uint8_t data){
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	4413      	add	r3, r2
 80023e0:	b2db      	uxtb	r3, r3
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <rtc_write>:
	
	return data;
}

void rtc_write(uint8_t address,uint8_t data)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af04      	add	r7, sp, #16
 80023f2:	4603      	mov	r3, r0
 80023f4:	460a      	mov	r2, r1
 80023f6:	71fb      	strb	r3, [r7, #7]
 80023f8:	4613      	mov	r3, r2
 80023fa:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,address,I2C_MEMADD_SIZE_8BIT,&data,1,100)!=HAL_OK){
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	2364      	movs	r3, #100	; 0x64
 8002402:	9302      	str	r3, [sp, #8]
 8002404:	2301      	movs	r3, #1
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	1dbb      	adds	r3, r7, #6
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2301      	movs	r3, #1
 800240e:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 8002412:	4806      	ldr	r0, [pc, #24]	; (800242c <rtc_write+0x40>)
 8002414:	f7fe fbb2 	bl	8000b7c <HAL_I2C_Mem_Write>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <rtc_write+0x36>
		Error_Handler();
 800241e:	f000 fbb3 	bl	8002b88 <Error_Handler>
	}
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200000ac 	.word	0x200000ac

08002430 <rtc_init>:

void rtc_init(uint8_t rs,uint8_t sqwe,uint8_t out)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	460b      	mov	r3, r1
 800243c:	71bb      	strb	r3, [r7, #6]
 800243e:	4613      	mov	r3, r2
 8002440:	717b      	strb	r3, [r7, #5]
	rs&=3;
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	71fb      	strb	r3, [r7, #7]
	if (sqwe) rs|=0x10;
 800244a:	79bb      	ldrb	r3, [r7, #6]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <rtc_init+0x28>
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f043 0310 	orr.w	r3, r3, #16
 8002456:	71fb      	strb	r3, [r7, #7]
	if (out) rs|=0x80;
 8002458:	797b      	ldrb	r3, [r7, #5]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <rtc_init+0x36>
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002464:	71fb      	strb	r3, [r7, #7]
	
	rtc_write(0x07,rs);
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	4619      	mov	r1, r3
 800246a:	2007      	movs	r0, #7
 800246c:	f7ff ffbe 	bl	80023ec <rtc_write>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <rtc_get_time>:

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af04      	add	r7, sp, #16
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1, addr_ds1307, 0x00, I2C_MEMADD_SIZE_8BIT, data, 3, 1000) != HAL_OK)
 8002484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	2303      	movs	r3, #3
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2301      	movs	r3, #1
 8002496:	2200      	movs	r2, #0
 8002498:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 800249c:	4811      	ldr	r0, [pc, #68]	; (80024e4 <rtc_get_time+0x6c>)
 800249e:	f7fe fc67 	bl	8000d70 <HAL_I2C_Mem_Read>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <rtc_get_time+0x34>
	{
		Error_Handler();
 80024a8:	f000 fb6e 	bl	8002b88 <Error_Handler>
	}	

	*sec=bcd2bin(data[0]);
 80024ac:	7d3b      	ldrb	r3, [r7, #20]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff84 	bl	80023bc <bcd2bin>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 80024bc:	7d7b      	ldrb	r3, [r7, #21]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff7c 	bl	80023bc <bcd2bin>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 80024cc:	7dbb      	ldrb	r3, [r7, #22]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff74 	bl	80023bc <bcd2bin>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	701a      	strb	r2, [r3, #0]
}
 80024dc:	bf00      	nop
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200000ac 	.word	0x200000ac

080024e8 <lcd_i2c_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_i2c_send_cmd (char cmd)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	f023 030f 	bic.w	r3, r3, #15
 80024f8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	f043 030c 	orr.w	r3, r3, #12
 8002506:	b2db      	uxtb	r3, r3
 8002508:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	f043 0308 	orr.w	r3, r3, #8
 8002510:	b2db      	uxtb	r3, r3
 8002512:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002514:	7bbb      	ldrb	r3, [r7, #14]
 8002516:	f043 030c 	orr.w	r3, r3, #12
 800251a:	b2db      	uxtb	r3, r3
 800251c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800251e:	7bbb      	ldrb	r3, [r7, #14]
 8002520:	f043 0308 	orr.w	r3, r3, #8
 8002524:	b2db      	uxtb	r3, r3
 8002526:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002528:	f107 0208 	add.w	r2, r7, #8
 800252c:	2364      	movs	r3, #100	; 0x64
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2304      	movs	r3, #4
 8002532:	214e      	movs	r1, #78	; 0x4e
 8002534:	4803      	ldr	r0, [pc, #12]	; (8002544 <lcd_i2c_send_cmd+0x5c>)
 8002536:	f7fe fa23 	bl	8000980 <HAL_I2C_Master_Transmit>
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200000ac 	.word	0x200000ac

08002548 <lcd_i2c_send_data>:

void lcd_i2c_send_data (char data)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af02      	add	r7, sp, #8
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f023 030f 	bic.w	r3, r3, #15
 8002558:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	f043 030d 	orr.w	r3, r3, #13
 8002566:	b2db      	uxtb	r3, r3
 8002568:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	f043 0309 	orr.w	r3, r3, #9
 8002570:	b2db      	uxtb	r3, r3
 8002572:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002574:	7bbb      	ldrb	r3, [r7, #14]
 8002576:	f043 030d 	orr.w	r3, r3, #13
 800257a:	b2db      	uxtb	r3, r3
 800257c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800257e:	7bbb      	ldrb	r3, [r7, #14]
 8002580:	f043 0309 	orr.w	r3, r3, #9
 8002584:	b2db      	uxtb	r3, r3
 8002586:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002588:	f107 0208 	add.w	r2, r7, #8
 800258c:	2364      	movs	r3, #100	; 0x64
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2304      	movs	r3, #4
 8002592:	214e      	movs	r1, #78	; 0x4e
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <lcd_i2c_send_data+0x5c>)
 8002596:	f7fe f9f3 	bl	8000980 <HAL_I2C_Master_Transmit>
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200000ac 	.word	0x200000ac

080025a8 <lcd_i2c_init>:
//	lcd_send_cmd (0x0c);
//	lcd_send_cmd (0x80);
//}

void lcd_i2c_init (void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
/*	lcd_i2c_send_cmd (0x02);
	lcd_i2c_send_cmd (0x28);
	lcd_i2c_send_cmd (0x0c);
	lcd_i2c_send_cmd (0x80);*/

	lcd_i2c_send_cmd(0x01);
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7ff ff9b 	bl	80024e8 <lcd_i2c_send_cmd>
	lcd_i2c_send_cmd(0x02);
 80025b2:	2002      	movs	r0, #2
 80025b4:	f7ff ff98 	bl	80024e8 <lcd_i2c_send_cmd>
	lcd_i2c_send_cmd(0x28);
 80025b8:	2028      	movs	r0, #40	; 0x28
 80025ba:	f7ff ff95 	bl	80024e8 <lcd_i2c_send_cmd>
	lcd_i2c_send_cmd(0x0C);
 80025be:	200c      	movs	r0, #12
 80025c0:	f7ff ff92 	bl	80024e8 <lcd_i2c_send_cmd>
	lcd_i2c_send_cmd(0x33);
 80025c4:	2033      	movs	r0, #51	; 0x33
 80025c6:	f7ff ff8f 	bl	80024e8 <lcd_i2c_send_cmd>
	lcd_i2c_send_cmd(0x32);
 80025ca:	2032      	movs	r0, #50	; 0x32
 80025cc:	f7ff ff8c 	bl	80024e8 <lcd_i2c_send_cmd>
	lcd_i2c_send_cmd(0x06);
 80025d0:	2006      	movs	r0, #6
 80025d2:	f7ff ff89 	bl	80024e8 <lcd_i2c_send_cmd>
	//lcd_i2c_send_cmd(0x01);
	HAL_Delay(10);
 80025d6:	200a      	movs	r0, #10
 80025d8:	f7fd fe1a 	bl	8000210 <HAL_Delay>
	HAL_Delay(1);
	HAL_Delay(1);
	lcd_i2c_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
	lcd_i2c_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)*/
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}

080025e0 <lcd_i2c_send_string>:

void lcd_i2c_send_string (char *str)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_i2c_send_data (*str++);
 80025e8:	e006      	b.n	80025f8 <lcd_i2c_send_string+0x18>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ffa8 	bl	8002548 <lcd_i2c_send_data>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f4      	bne.n	80025ea <lcd_i2c_send_string+0xa>
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <delay_us>:
#include "lcd_1602.h"

static void delay_us(uint32_t delay){
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	delay*=32;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	015b      	lsls	r3, r3, #5
 8002614:	607b      	str	r3, [r7, #4]
	while(delay--);
 8002616:	bf00      	nop
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1e5a      	subs	r2, r3, #1
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1fa      	bne.n	8002618 <delay_us+0x10>
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <lcd_send_8bit>:

 void lcd_send_8bit(uint8_t data){
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
	
	if(data & 0x01) D0(1); else D0(0);
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <lcd_send_8bit+0x20>
 8002640:	2201      	movs	r2, #1
 8002642:	2101      	movs	r1, #1
 8002644:	483d      	ldr	r0, [pc, #244]	; (800273c <lcd_send_8bit+0x110>)
 8002646:	f7fe f843 	bl	80006d0 <HAL_GPIO_WritePin>
 800264a:	e004      	b.n	8002656 <lcd_send_8bit+0x2a>
 800264c:	2200      	movs	r2, #0
 800264e:	2101      	movs	r1, #1
 8002650:	483a      	ldr	r0, [pc, #232]	; (800273c <lcd_send_8bit+0x110>)
 8002652:	f7fe f83d 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x02) D1(1); else D1(0);
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <lcd_send_8bit+0x40>
 8002660:	2201      	movs	r2, #1
 8002662:	2102      	movs	r1, #2
 8002664:	4835      	ldr	r0, [pc, #212]	; (800273c <lcd_send_8bit+0x110>)
 8002666:	f7fe f833 	bl	80006d0 <HAL_GPIO_WritePin>
 800266a:	e004      	b.n	8002676 <lcd_send_8bit+0x4a>
 800266c:	2200      	movs	r2, #0
 800266e:	2102      	movs	r1, #2
 8002670:	4832      	ldr	r0, [pc, #200]	; (800273c <lcd_send_8bit+0x110>)
 8002672:	f7fe f82d 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x04) D2(1); else D2(0);
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <lcd_send_8bit+0x60>
 8002680:	2201      	movs	r2, #1
 8002682:	2104      	movs	r1, #4
 8002684:	482d      	ldr	r0, [pc, #180]	; (800273c <lcd_send_8bit+0x110>)
 8002686:	f7fe f823 	bl	80006d0 <HAL_GPIO_WritePin>
 800268a:	e004      	b.n	8002696 <lcd_send_8bit+0x6a>
 800268c:	2200      	movs	r2, #0
 800268e:	2104      	movs	r1, #4
 8002690:	482a      	ldr	r0, [pc, #168]	; (800273c <lcd_send_8bit+0x110>)
 8002692:	f7fe f81d 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x08) D3(1); else D3(0);
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <lcd_send_8bit+0x80>
 80026a0:	2201      	movs	r2, #1
 80026a2:	2108      	movs	r1, #8
 80026a4:	4825      	ldr	r0, [pc, #148]	; (800273c <lcd_send_8bit+0x110>)
 80026a6:	f7fe f813 	bl	80006d0 <HAL_GPIO_WritePin>
 80026aa:	e004      	b.n	80026b6 <lcd_send_8bit+0x8a>
 80026ac:	2200      	movs	r2, #0
 80026ae:	2108      	movs	r1, #8
 80026b0:	4822      	ldr	r0, [pc, #136]	; (800273c <lcd_send_8bit+0x110>)
 80026b2:	f7fe f80d 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x10) D4(1); else D4(0);
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <lcd_send_8bit+0xa0>
 80026c0:	2201      	movs	r2, #1
 80026c2:	2110      	movs	r1, #16
 80026c4:	481d      	ldr	r0, [pc, #116]	; (800273c <lcd_send_8bit+0x110>)
 80026c6:	f7fe f803 	bl	80006d0 <HAL_GPIO_WritePin>
 80026ca:	e004      	b.n	80026d6 <lcd_send_8bit+0xaa>
 80026cc:	2200      	movs	r2, #0
 80026ce:	2110      	movs	r1, #16
 80026d0:	481a      	ldr	r0, [pc, #104]	; (800273c <lcd_send_8bit+0x110>)
 80026d2:	f7fd fffd 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x20) D5(1); else D5(0);
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <lcd_send_8bit+0xc0>
 80026e0:	2201      	movs	r2, #1
 80026e2:	2120      	movs	r1, #32
 80026e4:	4815      	ldr	r0, [pc, #84]	; (800273c <lcd_send_8bit+0x110>)
 80026e6:	f7fd fff3 	bl	80006d0 <HAL_GPIO_WritePin>
 80026ea:	e004      	b.n	80026f6 <lcd_send_8bit+0xca>
 80026ec:	2200      	movs	r2, #0
 80026ee:	2120      	movs	r1, #32
 80026f0:	4812      	ldr	r0, [pc, #72]	; (800273c <lcd_send_8bit+0x110>)
 80026f2:	f7fd ffed 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x40) D6(1); else D6(0);
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <lcd_send_8bit+0xe0>
 8002700:	2201      	movs	r2, #1
 8002702:	2140      	movs	r1, #64	; 0x40
 8002704:	480d      	ldr	r0, [pc, #52]	; (800273c <lcd_send_8bit+0x110>)
 8002706:	f7fd ffe3 	bl	80006d0 <HAL_GPIO_WritePin>
 800270a:	e004      	b.n	8002716 <lcd_send_8bit+0xea>
 800270c:	2200      	movs	r2, #0
 800270e:	2140      	movs	r1, #64	; 0x40
 8002710:	480a      	ldr	r0, [pc, #40]	; (800273c <lcd_send_8bit+0x110>)
 8002712:	f7fd ffdd 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x80) D7(1); else D7(0);
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	da05      	bge.n	800272a <lcd_send_8bit+0xfe>
 800271e:	2201      	movs	r2, #1
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	4806      	ldr	r0, [pc, #24]	; (800273c <lcd_send_8bit+0x110>)
 8002724:	f7fd ffd4 	bl	80006d0 <HAL_GPIO_WritePin>
}
 8002728:	e004      	b.n	8002734 <lcd_send_8bit+0x108>
	if(data & 0x80) D7(1); else D7(0);
 800272a:	2200      	movs	r2, #0
 800272c:	2180      	movs	r1, #128	; 0x80
 800272e:	4803      	ldr	r0, [pc, #12]	; (800273c <lcd_send_8bit+0x110>)
 8002730:	f7fd ffce 	bl	80006d0 <HAL_GPIO_WritePin>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40010800 	.word	0x40010800

08002740 <lcd_send>:

 void lcd_send(int8_t rs,uint8_t data){
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	460a      	mov	r2, r1
 800274a:	71fb      	strb	r3, [r7, #7]
 800274c:	4613      	mov	r3, r2
 800274e:	71bb      	strb	r3, [r7, #6]
	RS(rs);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <lcd_send+0x24>
 8002758:	2201      	movs	r2, #1
 800275a:	2101      	movs	r1, #1
 800275c:	480e      	ldr	r0, [pc, #56]	; (8002798 <lcd_send+0x58>)
 800275e:	f7fd ffb7 	bl	80006d0 <HAL_GPIO_WritePin>
 8002762:	e004      	b.n	800276e <lcd_send+0x2e>
 8002764:	2200      	movs	r2, #0
 8002766:	2101      	movs	r1, #1
 8002768:	480b      	ldr	r0, [pc, #44]	; (8002798 <lcd_send+0x58>)
 800276a:	f7fd ffb1 	bl	80006d0 <HAL_GPIO_WritePin>
	lcd_send_8bit(data);
 800276e:	79bb      	ldrb	r3, [r7, #6]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff5b 	bl	800262c <lcd_send_8bit>
	EN(1);delay_us(100);EN(0);
 8002776:	2201      	movs	r2, #1
 8002778:	2102      	movs	r1, #2
 800277a:	4807      	ldr	r0, [pc, #28]	; (8002798 <lcd_send+0x58>)
 800277c:	f7fd ffa8 	bl	80006d0 <HAL_GPIO_WritePin>
 8002780:	2064      	movs	r0, #100	; 0x64
 8002782:	f7ff ff41 	bl	8002608 <delay_us>
 8002786:	2200      	movs	r2, #0
 8002788:	2102      	movs	r1, #2
 800278a:	4803      	ldr	r0, [pc, #12]	; (8002798 <lcd_send+0x58>)
 800278c:	f7fd ffa0 	bl	80006d0 <HAL_GPIO_WritePin>
	
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40010c00 	.word	0x40010c00

0800279c <lcd_data>:

void lcd_cmd(uint8_t command){
	lcd_send(1,command);
}

void lcd_data(char c){
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
	lcd_send(1,(uint8_t)c);
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	4619      	mov	r1, r3
 80027aa:	2001      	movs	r0, #1
 80027ac:	f7ff ffc8 	bl	8002740 <lcd_send>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <lcd_init>:

void lcd_init(void){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	
	lcd_send(0,0x33);
 80027bc:	2133      	movs	r1, #51	; 0x33
 80027be:	2000      	movs	r0, #0
 80027c0:	f7ff ffbe 	bl	8002740 <lcd_send>
  lcd_send(0,0x32);
 80027c4:	2132      	movs	r1, #50	; 0x32
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7ff ffba 	bl	8002740 <lcd_send>
  lcd_send(0,0x38);
 80027cc:	2138      	movs	r1, #56	; 0x38
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7ff ffb6 	bl	8002740 <lcd_send>
  lcd_send(0,0x0C);
 80027d4:	210c      	movs	r1, #12
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7ff ffb2 	bl	8002740 <lcd_send>
  lcd_send(0,0x06);
 80027dc:	2106      	movs	r1, #6
 80027de:	2000      	movs	r0, #0
 80027e0:	f7ff ffae 	bl	8002740 <lcd_send>
  lcd_send(0,0x01);
 80027e4:	2101      	movs	r1, #1
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7ff ffaa 	bl	8002740 <lcd_send>
	HAL_Delay(10);
 80027ec:	200a      	movs	r0, #10
 80027ee:	f7fd fd0f 	bl	8000210 <HAL_Delay>
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <lcd_clr>:

void lcd_clr(void){
 80027f6:	b580      	push	{r7, lr}
 80027f8:	af00      	add	r7, sp, #0
    lcd_send(0,0x01);
 80027fa:	2101      	movs	r1, #1
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7ff ff9f 	bl	8002740 <lcd_send>
    HAL_Delay(3);
 8002802:	2003      	movs	r0, #3
 8002804:	f7fd fd04 	bl	8000210 <HAL_Delay>
}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}

0800280c <lcd_gotoxy>:


void lcd_gotoxy(char x, char y){
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	460a      	mov	r2, r1
 8002816:	71fb      	strb	r3, [r7, #7]
 8002818:	4613      	mov	r3, r2
 800281a:	71bb      	strb	r3, [r7, #6]
	
					if(x==0)  lcd_send(0,0x80+y);
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d107      	bne.n	8002832 <lcd_gotoxy+0x26>
 8002822:	79bb      	ldrb	r3, [r7, #6]
 8002824:	3b80      	subs	r3, #128	; 0x80
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	2000      	movs	r0, #0
 800282c:	f7ff ff88 	bl	8002740 <lcd_send>
			else if (x == 1) lcd_send(0,0xc0+y);
	
}
 8002830:	e009      	b.n	8002846 <lcd_gotoxy+0x3a>
			else if (x == 1) lcd_send(0,0xc0+y);
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d106      	bne.n	8002846 <lcd_gotoxy+0x3a>
 8002838:	79bb      	ldrb	r3, [r7, #6]
 800283a:	3b40      	subs	r3, #64	; 0x40
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4619      	mov	r1, r3
 8002840:	2000      	movs	r0, #0
 8002842:	f7ff ff7d 	bl	8002740 <lcd_send>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <lcd_puts>:

void lcd_puts(char *text){
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
    while(*text){
 8002856:	e007      	b.n	8002868 <lcd_puts+0x1a>
        lcd_data(*text);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff9d 	bl	800279c <lcd_data>
        text++;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3301      	adds	r3, #1
 8002866:	607b      	str	r3, [r7, #4]
    while(*text){
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f3      	bne.n	8002858 <lcd_puts+0xa>
    }
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800287e:	f7fd fc65 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002882:	f000 f861 	bl	8002948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002886:	f000 f8fd 	bl	8002a84 <MX_GPIO_Init>
  MX_I2C1_Init();
 800288a:	f000 f8a3 	bl	80029d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800288e:	f000 f8cf 	bl	8002a30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8002892:	f7ff ff91 	bl	80027b8 <lcd_init>
  HAL_Delay(10);
 8002896:	200a      	movs	r0, #10
 8002898:	f7fd fcba 	bl	8000210 <HAL_Delay>
  lcd_i2c_init();
 800289c:	f7ff fe84 	bl	80025a8 <lcd_i2c_init>
  HAL_Delay(10);
 80028a0:	200a      	movs	r0, #10
 80028a2:	f7fd fcb5 	bl	8000210 <HAL_Delay>
  rtc_init(0, 1, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2101      	movs	r1, #1
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7ff fdc0 	bl	8002430 <rtc_init>

  lcd_clr();
 80028b0:	f7ff ffa1 	bl	80027f6 <lcd_clr>
  //lcd_i2c_clear();
  lcd_puts("---");
 80028b4:	481c      	ldr	r0, [pc, #112]	; (8002928 <main+0xb0>)
 80028b6:	f7ff ffca 	bl	800284e <lcd_puts>
  //lcd_i2c_clear();

//  lcd_i2c_clear();

  lcd_i2c_send_string("ABCDEFGHIJKLMNO");
 80028ba:	481c      	ldr	r0, [pc, #112]	; (800292c <main+0xb4>)
 80028bc:	f7ff fe90 	bl	80025e0 <lcd_i2c_send_string>


  HAL_Delay(2000);
 80028c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028c4:	f7fd fca4 	bl	8000210 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_clr();
 80028c8:	f7ff ff95 	bl	80027f6 <lcd_clr>
	  lcd_i2c_send_cmd(0x01);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f7ff fe0b 	bl	80024e8 <lcd_i2c_send_cmd>
	  rtc_get_time(&hour, &min, &sec);
 80028d2:	4a17      	ldr	r2, [pc, #92]	; (8002930 <main+0xb8>)
 80028d4:	4917      	ldr	r1, [pc, #92]	; (8002934 <main+0xbc>)
 80028d6:	4818      	ldr	r0, [pc, #96]	; (8002938 <main+0xc0>)
 80028d8:	f7ff fdce 	bl	8002478 <rtc_get_time>
	  lcd_gotoxy(0, 0);
 80028dc:	2100      	movs	r1, #0
 80028de:	2000      	movs	r0, #0
 80028e0:	f7ff ff94 	bl	800280c <lcd_gotoxy>


	  lcd_gotoxy(1, 0);
 80028e4:	2100      	movs	r1, #0
 80028e6:	2001      	movs	r0, #1
 80028e8:	f7ff ff90 	bl	800280c <lcd_gotoxy>
	  sprintf(buffer, "HORA: %d:%d:%d", hour, min, sec);
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <main+0xc0>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <main+0xbc>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	4619      	mov	r1, r3
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <main+0xb8>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	460b      	mov	r3, r1
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <main+0xc4>)
 8002902:	480f      	ldr	r0, [pc, #60]	; (8002940 <main+0xc8>)
 8002904:	f000 faee 	bl	8002ee4 <siprintf>
	  lcd_i2c_send_string(buffer);
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <main+0xc8>)
 800290a:	f7ff fe69 	bl	80025e0 <lcd_i2c_send_string>
	  lcd_puts(buffer);
 800290e:	480c      	ldr	r0, [pc, #48]	; (8002940 <main+0xc8>)
 8002910:	f7ff ff9d 	bl	800284e <lcd_puts>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002918:	480a      	ldr	r0, [pc, #40]	; (8002944 <main+0xcc>)
 800291a:	f7fd fef1 	bl	8000700 <HAL_GPIO_TogglePin>

	  HAL_Delay(500);
 800291e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002922:	f7fd fc75 	bl	8000210 <HAL_Delay>
	  lcd_clr();
 8002926:	e7cf      	b.n	80028c8 <main+0x50>
 8002928:	08003734 	.word	0x08003734
 800292c:	08003738 	.word	0x08003738
 8002930:	2000017e 	.word	0x2000017e
 8002934:	2000017c 	.word	0x2000017c
 8002938:	2000017a 	.word	0x2000017a
 800293c:	08003748 	.word	0x08003748
 8002940:	20000148 	.word	0x20000148
 8002944:	40011000 	.word	0x40011000

08002948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b090      	sub	sp, #64	; 0x40
 800294c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800294e:	f107 0318 	add.w	r3, r7, #24
 8002952:	2228      	movs	r2, #40	; 0x28
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fabc 	bl	8002ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	60da      	str	r2, [r3, #12]
 8002968:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800296e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002972:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002974:	2300      	movs	r3, #0
 8002976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002978:	2301      	movs	r3, #1
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800297c:	2302      	movs	r3, #2
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002986:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800298c:	f107 0318 	add.w	r3, r7, #24
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe ffcf 	bl	8001934 <HAL_RCC_OscConfig>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800299c:	f000 f8f4 	bl	8002b88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029a0:	230f      	movs	r3, #15
 80029a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a4:	2302      	movs	r3, #2
 80029a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	2102      	movs	r1, #2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fa3a 	bl	8001e34 <HAL_RCC_ClockConfig>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80029c6:	f000 f8df 	bl	8002b88 <Error_Handler>
  }
}
 80029ca:	bf00      	nop
 80029cc:	3740      	adds	r7, #64	; 0x40
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029da:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <MX_I2C1_Init+0x54>)
 80029dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <MX_I2C1_Init+0x58>)
 80029e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <MX_I2C1_Init+0x50>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <MX_I2C1_Init+0x50>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <MX_I2C1_Init+0x50>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <MX_I2C1_Init+0x50>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a10:	4804      	ldr	r0, [pc, #16]	; (8002a24 <MX_I2C1_Init+0x50>)
 8002a12:	f7fd fe8d 	bl	8000730 <HAL_I2C_Init>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a1c:	f000 f8b4 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200000ac 	.word	0x200000ac
 8002a28:	40005400 	.word	0x40005400
 8002a2c:	000186a0 	.word	0x000186a0

08002a30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <MX_USART1_UART_Init+0x50>)
 8002a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a56:	220c      	movs	r2, #12
 8002a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a68:	f7ff fb80 	bl	800216c <HAL_UART_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a72:	f000 f889 	bl	8002b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000108 	.word	0x20000108
 8002a80:	40013800 	.word	0x40013800

08002a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a98:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	4a36      	ldr	r2, [pc, #216]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002a9e:	f043 0310 	orr.w	r3, r3, #16
 8002aa2:	6193      	str	r3, [r2, #24]
 8002aa4:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab0:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a30      	ldr	r2, [pc, #192]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002ab6:	f043 0320 	orr.w	r3, r3, #32
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002ae6:	f043 0308 	orr.w	r3, r3, #8
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <MX_GPIO_Init+0xf4>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002af8:	2200      	movs	r2, #0
 8002afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002afe:	481f      	ldr	r0, [pc, #124]	; (8002b7c <MX_GPIO_Init+0xf8>)
 8002b00:	f7fd fde6 	bl	80006d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin 
 8002b04:	2200      	movs	r2, #0
 8002b06:	21ff      	movs	r1, #255	; 0xff
 8002b08:	481d      	ldr	r0, [pc, #116]	; (8002b80 <MX_GPIO_Init+0xfc>)
 8002b0a:	f7fd fde1 	bl	80006d0 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|EN_Pin, GPIO_PIN_RESET);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2103      	movs	r1, #3
 8002b12:	481c      	ldr	r0, [pc, #112]	; (8002b84 <MX_GPIO_Init+0x100>)
 8002b14:	f7fd fddc 	bl	80006d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2302      	movs	r3, #2
 8002b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4812      	ldr	r0, [pc, #72]	; (8002b7c <MX_GPIO_Init+0xf8>)
 8002b32:	f7fd fc73 	bl	800041c <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin 
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin 
 8002b36:	23ff      	movs	r3, #255	; 0xff
 8002b38:	613b      	str	r3, [r7, #16]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2302      	movs	r3, #2
 8002b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b46:	f107 0310 	add.w	r3, r7, #16
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	480c      	ldr	r0, [pc, #48]	; (8002b80 <MX_GPIO_Init+0xfc>)
 8002b4e:	f7fd fc65 	bl	800041c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|EN_Pin;
 8002b52:	2303      	movs	r3, #3
 8002b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b56:	2301      	movs	r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	4619      	mov	r1, r3
 8002b68:	4806      	ldr	r0, [pc, #24]	; (8002b84 <MX_GPIO_Init+0x100>)
 8002b6a:	f7fd fc57 	bl	800041c <HAL_GPIO_Init>

}
 8002b6e:	bf00      	nop
 8002b70:	3720      	adds	r7, #32
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40011000 	.word	0x40011000
 8002b80:	40010800 	.word	0x40010800
 8002b84:	40010c00 	.word	0x40010c00

08002b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	lcd_clr();
 8002b8c:	f7ff fe33 	bl	80027f6 <lcd_clr>
	lcd_gotoxy(0, 0);
 8002b90:	2100      	movs	r1, #0
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7ff fe3a 	bl	800280c <lcd_gotoxy>
	lcd_puts("FAILED RTC");
 8002b98:	4802      	ldr	r0, [pc, #8]	; (8002ba4 <Error_Handler+0x1c>)
 8002b9a:	f7ff fe58 	bl	800284e <lcd_puts>
  /* USER CODE END Error_Handler_Debug */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	08003758 	.word	0x08003758

08002ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_MspInit+0x5c>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <HAL_MspInit+0x5c>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6193      	str	r3, [r2, #24]
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_MspInit+0x5c>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_MspInit+0x5c>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <HAL_MspInit+0x5c>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	61d3      	str	r3, [r2, #28]
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_MspInit+0x5c>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_MspInit+0x60>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <HAL_MspInit+0x60>)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40010000 	.word	0x40010000

08002c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <HAL_I2C_MspInit+0x70>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d123      	bne.n	8002c74 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c32:	f043 0308 	orr.w	r3, r3, #8
 8002c36:	6193      	str	r3, [r2, #24]
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8002c44:	23c0      	movs	r3, #192	; 0xc0
 8002c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c48:	2312      	movs	r3, #18
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c50:	f107 0310 	add.w	r3, r7, #16
 8002c54:	4619      	mov	r1, r3
 8002c56:	480b      	ldr	r0, [pc, #44]	; (8002c84 <HAL_I2C_MspInit+0x78>)
 8002c58:	f7fd fbe0 	bl	800041c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c66:	61d3      	str	r3, [r2, #28]
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_I2C_MspInit+0x74>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c74:	bf00      	nop
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40005400 	.word	0x40005400
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40010c00 	.word	0x40010c00

08002c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 0310 	add.w	r3, r7, #16
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_UART_MspInit+0x8c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d131      	bne.n	8002d0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_UART_MspInit+0x90>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_UART_MspInit+0x90>)
 8002cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb2:	6193      	str	r3, [r2, #24]
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <HAL_UART_MspInit+0x90>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc0:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <HAL_UART_MspInit+0x90>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <HAL_UART_MspInit+0x90>)
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
 8002cca:	6193      	str	r3, [r2, #24]
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_UART_MspInit+0x90>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8002cd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	f107 0310 	add.w	r3, r7, #16
 8002cea:	4619      	mov	r1, r3
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <HAL_UART_MspInit+0x94>)
 8002cee:	f7fd fb95 	bl	800041c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8002cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	4619      	mov	r1, r3
 8002d06:	4805      	ldr	r0, [pc, #20]	; (8002d1c <HAL_UART_MspInit+0x94>)
 8002d08:	f7fd fb88 	bl	800041c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d0c:	bf00      	nop
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40013800 	.word	0x40013800
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40010800 	.word	0x40010800

08002d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d30:	e7fe      	b.n	8002d30 <HardFault_Handler+0x4>

08002d32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d36:	e7fe      	b.n	8002d36 <MemManage_Handler+0x4>

08002d38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <BusFault_Handler+0x4>

08002d3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d42:	e7fe      	b.n	8002d42 <UsageFault_Handler+0x4>

08002d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d6c:	f7fd fa34 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <_sbrk+0x50>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <_sbrk+0x16>
		heap_end = &end;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <_sbrk+0x50>)
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <_sbrk+0x54>)
 8002d88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <_sbrk+0x50>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <_sbrk+0x50>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	466a      	mov	r2, sp
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d907      	bls.n	8002dae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002d9e:	f000 f86f 	bl	8002e80 <__errno>
 8002da2:	4602      	mov	r2, r0
 8002da4:	230c      	movs	r3, #12
 8002da6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dac:	e006      	b.n	8002dbc <_sbrk+0x48>
	}

	heap_end += incr;
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <_sbrk+0x50>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	4a03      	ldr	r2, [pc, #12]	; (8002dc4 <_sbrk+0x50>)
 8002db8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	2000008c 	.word	0x2000008c
 8002dc8:	20000188 	.word	0x20000188

08002dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <SystemInit+0x5c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <SystemInit+0x5c>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <SystemInit+0x5c>)
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4911      	ldr	r1, [pc, #68]	; (8002e28 <SystemInit+0x5c>)
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <SystemInit+0x60>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <SystemInit+0x5c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <SystemInit+0x5c>)
 8002dee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <SystemInit+0x5c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <SystemInit+0x5c>)
 8002dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e02:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <SystemInit+0x5c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <SystemInit+0x5c>)
 8002e0a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002e0e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <SystemInit+0x5c>)
 8002e12:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002e16:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <SystemInit+0x64>)
 8002e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e1e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	f8ff0000 	.word	0xf8ff0000
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e36:	e003      	b.n	8002e40 <LoopCopyDataInit>

08002e38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e3e:	3104      	adds	r1, #4

08002e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e40:	480a      	ldr	r0, [pc, #40]	; (8002e6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e48:	d3f6      	bcc.n	8002e38 <CopyDataInit>
  ldr r2, =_sbss
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e4c:	e002      	b.n	8002e54 <LoopFillZerobss>

08002e4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e50:	f842 3b04 	str.w	r3, [r2], #4

08002e54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002e56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002e58:	d3f9      	bcc.n	8002e4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e5a:	f7ff ffb7 	bl	8002dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e5e:	f000 f815 	bl	8002e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e62:	f7ff fd09 	bl	8002878 <main>
  bx lr
 8002e66:	4770      	bx	lr
  ldr r3, =_sidata
 8002e68:	080037b8 	.word	0x080037b8
  ldr r0, =_sdata
 8002e6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e70:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002e74:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002e78:	20000184 	.word	0x20000184

08002e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e7c:	e7fe      	b.n	8002e7c <ADC1_2_IRQHandler>
	...

08002e80 <__errno>:
 8002e80:	4b01      	ldr	r3, [pc, #4]	; (8002e88 <__errno+0x8>)
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	2000000c 	.word	0x2000000c

08002e8c <__libc_init_array>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	2500      	movs	r5, #0
 8002e90:	4e0c      	ldr	r6, [pc, #48]	; (8002ec4 <__libc_init_array+0x38>)
 8002e92:	4c0d      	ldr	r4, [pc, #52]	; (8002ec8 <__libc_init_array+0x3c>)
 8002e94:	1ba4      	subs	r4, r4, r6
 8002e96:	10a4      	asrs	r4, r4, #2
 8002e98:	42a5      	cmp	r5, r4
 8002e9a:	d109      	bne.n	8002eb0 <__libc_init_array+0x24>
 8002e9c:	f000 fc34 	bl	8003708 <_init>
 8002ea0:	2500      	movs	r5, #0
 8002ea2:	4e0a      	ldr	r6, [pc, #40]	; (8002ecc <__libc_init_array+0x40>)
 8002ea4:	4c0a      	ldr	r4, [pc, #40]	; (8002ed0 <__libc_init_array+0x44>)
 8002ea6:	1ba4      	subs	r4, r4, r6
 8002ea8:	10a4      	asrs	r4, r4, #2
 8002eaa:	42a5      	cmp	r5, r4
 8002eac:	d105      	bne.n	8002eba <__libc_init_array+0x2e>
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eb4:	4798      	blx	r3
 8002eb6:	3501      	adds	r5, #1
 8002eb8:	e7ee      	b.n	8002e98 <__libc_init_array+0xc>
 8002eba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ebe:	4798      	blx	r3
 8002ec0:	3501      	adds	r5, #1
 8002ec2:	e7f2      	b.n	8002eaa <__libc_init_array+0x1e>
 8002ec4:	080037b0 	.word	0x080037b0
 8002ec8:	080037b0 	.word	0x080037b0
 8002ecc:	080037b0 	.word	0x080037b0
 8002ed0:	080037b4 	.word	0x080037b4

08002ed4 <memset>:
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4402      	add	r2, r0
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d100      	bne.n	8002ede <memset+0xa>
 8002edc:	4770      	bx	lr
 8002ede:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee2:	e7f9      	b.n	8002ed8 <memset+0x4>

08002ee4 <siprintf>:
 8002ee4:	b40e      	push	{r1, r2, r3}
 8002ee6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002eea:	b500      	push	{lr}
 8002eec:	b09c      	sub	sp, #112	; 0x70
 8002eee:	ab1d      	add	r3, sp, #116	; 0x74
 8002ef0:	9002      	str	r0, [sp, #8]
 8002ef2:	9006      	str	r0, [sp, #24]
 8002ef4:	9107      	str	r1, [sp, #28]
 8002ef6:	9104      	str	r1, [sp, #16]
 8002ef8:	4808      	ldr	r0, [pc, #32]	; (8002f1c <siprintf+0x38>)
 8002efa:	4909      	ldr	r1, [pc, #36]	; (8002f20 <siprintf+0x3c>)
 8002efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f00:	9105      	str	r1, [sp, #20]
 8002f02:	6800      	ldr	r0, [r0, #0]
 8002f04:	a902      	add	r1, sp, #8
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	f000 f866 	bl	8002fd8 <_svfiprintf_r>
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	9b02      	ldr	r3, [sp, #8]
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	b01c      	add	sp, #112	; 0x70
 8002f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f18:	b003      	add	sp, #12
 8002f1a:	4770      	bx	lr
 8002f1c:	2000000c 	.word	0x2000000c
 8002f20:	ffff0208 	.word	0xffff0208

08002f24 <__ssputs_r>:
 8002f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f28:	688e      	ldr	r6, [r1, #8]
 8002f2a:	4682      	mov	sl, r0
 8002f2c:	429e      	cmp	r6, r3
 8002f2e:	460c      	mov	r4, r1
 8002f30:	4690      	mov	r8, r2
 8002f32:	4699      	mov	r9, r3
 8002f34:	d837      	bhi.n	8002fa6 <__ssputs_r+0x82>
 8002f36:	898a      	ldrh	r2, [r1, #12]
 8002f38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f3c:	d031      	beq.n	8002fa2 <__ssputs_r+0x7e>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	6825      	ldr	r5, [r4, #0]
 8002f42:	6909      	ldr	r1, [r1, #16]
 8002f44:	1a6f      	subs	r7, r5, r1
 8002f46:	6965      	ldr	r5, [r4, #20]
 8002f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f4c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002f50:	f109 0301 	add.w	r3, r9, #1
 8002f54:	443b      	add	r3, r7
 8002f56:	429d      	cmp	r5, r3
 8002f58:	bf38      	it	cc
 8002f5a:	461d      	movcc	r5, r3
 8002f5c:	0553      	lsls	r3, r2, #21
 8002f5e:	d530      	bpl.n	8002fc2 <__ssputs_r+0x9e>
 8002f60:	4629      	mov	r1, r5
 8002f62:	f000 fb37 	bl	80035d4 <_malloc_r>
 8002f66:	4606      	mov	r6, r0
 8002f68:	b950      	cbnz	r0, 8002f80 <__ssputs_r+0x5c>
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f70:	f8ca 3000 	str.w	r3, [sl]
 8002f74:	89a3      	ldrh	r3, [r4, #12]
 8002f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f7a:	81a3      	strh	r3, [r4, #12]
 8002f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f80:	463a      	mov	r2, r7
 8002f82:	6921      	ldr	r1, [r4, #16]
 8002f84:	f000 fab6 	bl	80034f4 <memcpy>
 8002f88:	89a3      	ldrh	r3, [r4, #12]
 8002f8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f92:	81a3      	strh	r3, [r4, #12]
 8002f94:	6126      	str	r6, [r4, #16]
 8002f96:	443e      	add	r6, r7
 8002f98:	6026      	str	r6, [r4, #0]
 8002f9a:	464e      	mov	r6, r9
 8002f9c:	6165      	str	r5, [r4, #20]
 8002f9e:	1bed      	subs	r5, r5, r7
 8002fa0:	60a5      	str	r5, [r4, #8]
 8002fa2:	454e      	cmp	r6, r9
 8002fa4:	d900      	bls.n	8002fa8 <__ssputs_r+0x84>
 8002fa6:	464e      	mov	r6, r9
 8002fa8:	4632      	mov	r2, r6
 8002faa:	4641      	mov	r1, r8
 8002fac:	6820      	ldr	r0, [r4, #0]
 8002fae:	f000 faac 	bl	800350a <memmove>
 8002fb2:	68a3      	ldr	r3, [r4, #8]
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	1b9b      	subs	r3, r3, r6
 8002fb8:	60a3      	str	r3, [r4, #8]
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	441e      	add	r6, r3
 8002fbe:	6026      	str	r6, [r4, #0]
 8002fc0:	e7dc      	b.n	8002f7c <__ssputs_r+0x58>
 8002fc2:	462a      	mov	r2, r5
 8002fc4:	f000 fb60 	bl	8003688 <_realloc_r>
 8002fc8:	4606      	mov	r6, r0
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	d1e2      	bne.n	8002f94 <__ssputs_r+0x70>
 8002fce:	6921      	ldr	r1, [r4, #16]
 8002fd0:	4650      	mov	r0, sl
 8002fd2:	f000 fab3 	bl	800353c <_free_r>
 8002fd6:	e7c8      	b.n	8002f6a <__ssputs_r+0x46>

08002fd8 <_svfiprintf_r>:
 8002fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fdc:	461d      	mov	r5, r3
 8002fde:	898b      	ldrh	r3, [r1, #12]
 8002fe0:	b09d      	sub	sp, #116	; 0x74
 8002fe2:	061f      	lsls	r7, r3, #24
 8002fe4:	4680      	mov	r8, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	4616      	mov	r6, r2
 8002fea:	d50f      	bpl.n	800300c <_svfiprintf_r+0x34>
 8002fec:	690b      	ldr	r3, [r1, #16]
 8002fee:	b96b      	cbnz	r3, 800300c <_svfiprintf_r+0x34>
 8002ff0:	2140      	movs	r1, #64	; 0x40
 8002ff2:	f000 faef 	bl	80035d4 <_malloc_r>
 8002ff6:	6020      	str	r0, [r4, #0]
 8002ff8:	6120      	str	r0, [r4, #16]
 8002ffa:	b928      	cbnz	r0, 8003008 <_svfiprintf_r+0x30>
 8002ffc:	230c      	movs	r3, #12
 8002ffe:	f8c8 3000 	str.w	r3, [r8]
 8003002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003006:	e0c8      	b.n	800319a <_svfiprintf_r+0x1c2>
 8003008:	2340      	movs	r3, #64	; 0x40
 800300a:	6163      	str	r3, [r4, #20]
 800300c:	2300      	movs	r3, #0
 800300e:	9309      	str	r3, [sp, #36]	; 0x24
 8003010:	2320      	movs	r3, #32
 8003012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003016:	2330      	movs	r3, #48	; 0x30
 8003018:	f04f 0b01 	mov.w	fp, #1
 800301c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003020:	9503      	str	r5, [sp, #12]
 8003022:	4637      	mov	r7, r6
 8003024:	463d      	mov	r5, r7
 8003026:	f815 3b01 	ldrb.w	r3, [r5], #1
 800302a:	b10b      	cbz	r3, 8003030 <_svfiprintf_r+0x58>
 800302c:	2b25      	cmp	r3, #37	; 0x25
 800302e:	d13e      	bne.n	80030ae <_svfiprintf_r+0xd6>
 8003030:	ebb7 0a06 	subs.w	sl, r7, r6
 8003034:	d00b      	beq.n	800304e <_svfiprintf_r+0x76>
 8003036:	4653      	mov	r3, sl
 8003038:	4632      	mov	r2, r6
 800303a:	4621      	mov	r1, r4
 800303c:	4640      	mov	r0, r8
 800303e:	f7ff ff71 	bl	8002f24 <__ssputs_r>
 8003042:	3001      	adds	r0, #1
 8003044:	f000 80a4 	beq.w	8003190 <_svfiprintf_r+0x1b8>
 8003048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800304a:	4453      	add	r3, sl
 800304c:	9309      	str	r3, [sp, #36]	; 0x24
 800304e:	783b      	ldrb	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 809d 	beq.w	8003190 <_svfiprintf_r+0x1b8>
 8003056:	2300      	movs	r3, #0
 8003058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800305c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003060:	9304      	str	r3, [sp, #16]
 8003062:	9307      	str	r3, [sp, #28]
 8003064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003068:	931a      	str	r3, [sp, #104]	; 0x68
 800306a:	462f      	mov	r7, r5
 800306c:	2205      	movs	r2, #5
 800306e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003072:	4850      	ldr	r0, [pc, #320]	; (80031b4 <_svfiprintf_r+0x1dc>)
 8003074:	f000 fa30 	bl	80034d8 <memchr>
 8003078:	9b04      	ldr	r3, [sp, #16]
 800307a:	b9d0      	cbnz	r0, 80030b2 <_svfiprintf_r+0xda>
 800307c:	06d9      	lsls	r1, r3, #27
 800307e:	bf44      	itt	mi
 8003080:	2220      	movmi	r2, #32
 8003082:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003086:	071a      	lsls	r2, r3, #28
 8003088:	bf44      	itt	mi
 800308a:	222b      	movmi	r2, #43	; 0x2b
 800308c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003090:	782a      	ldrb	r2, [r5, #0]
 8003092:	2a2a      	cmp	r2, #42	; 0x2a
 8003094:	d015      	beq.n	80030c2 <_svfiprintf_r+0xea>
 8003096:	462f      	mov	r7, r5
 8003098:	2000      	movs	r0, #0
 800309a:	250a      	movs	r5, #10
 800309c:	9a07      	ldr	r2, [sp, #28]
 800309e:	4639      	mov	r1, r7
 80030a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030a4:	3b30      	subs	r3, #48	; 0x30
 80030a6:	2b09      	cmp	r3, #9
 80030a8:	d94d      	bls.n	8003146 <_svfiprintf_r+0x16e>
 80030aa:	b1b8      	cbz	r0, 80030dc <_svfiprintf_r+0x104>
 80030ac:	e00f      	b.n	80030ce <_svfiprintf_r+0xf6>
 80030ae:	462f      	mov	r7, r5
 80030b0:	e7b8      	b.n	8003024 <_svfiprintf_r+0x4c>
 80030b2:	4a40      	ldr	r2, [pc, #256]	; (80031b4 <_svfiprintf_r+0x1dc>)
 80030b4:	463d      	mov	r5, r7
 80030b6:	1a80      	subs	r0, r0, r2
 80030b8:	fa0b f000 	lsl.w	r0, fp, r0
 80030bc:	4318      	orrs	r0, r3
 80030be:	9004      	str	r0, [sp, #16]
 80030c0:	e7d3      	b.n	800306a <_svfiprintf_r+0x92>
 80030c2:	9a03      	ldr	r2, [sp, #12]
 80030c4:	1d11      	adds	r1, r2, #4
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	9103      	str	r1, [sp, #12]
 80030ca:	2a00      	cmp	r2, #0
 80030cc:	db01      	blt.n	80030d2 <_svfiprintf_r+0xfa>
 80030ce:	9207      	str	r2, [sp, #28]
 80030d0:	e004      	b.n	80030dc <_svfiprintf_r+0x104>
 80030d2:	4252      	negs	r2, r2
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	9207      	str	r2, [sp, #28]
 80030da:	9304      	str	r3, [sp, #16]
 80030dc:	783b      	ldrb	r3, [r7, #0]
 80030de:	2b2e      	cmp	r3, #46	; 0x2e
 80030e0:	d10c      	bne.n	80030fc <_svfiprintf_r+0x124>
 80030e2:	787b      	ldrb	r3, [r7, #1]
 80030e4:	2b2a      	cmp	r3, #42	; 0x2a
 80030e6:	d133      	bne.n	8003150 <_svfiprintf_r+0x178>
 80030e8:	9b03      	ldr	r3, [sp, #12]
 80030ea:	3702      	adds	r7, #2
 80030ec:	1d1a      	adds	r2, r3, #4
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	9203      	str	r2, [sp, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bfb8      	it	lt
 80030f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80030fa:	9305      	str	r3, [sp, #20]
 80030fc:	4d2e      	ldr	r5, [pc, #184]	; (80031b8 <_svfiprintf_r+0x1e0>)
 80030fe:	2203      	movs	r2, #3
 8003100:	7839      	ldrb	r1, [r7, #0]
 8003102:	4628      	mov	r0, r5
 8003104:	f000 f9e8 	bl	80034d8 <memchr>
 8003108:	b138      	cbz	r0, 800311a <_svfiprintf_r+0x142>
 800310a:	2340      	movs	r3, #64	; 0x40
 800310c:	1b40      	subs	r0, r0, r5
 800310e:	fa03 f000 	lsl.w	r0, r3, r0
 8003112:	9b04      	ldr	r3, [sp, #16]
 8003114:	3701      	adds	r7, #1
 8003116:	4303      	orrs	r3, r0
 8003118:	9304      	str	r3, [sp, #16]
 800311a:	7839      	ldrb	r1, [r7, #0]
 800311c:	2206      	movs	r2, #6
 800311e:	4827      	ldr	r0, [pc, #156]	; (80031bc <_svfiprintf_r+0x1e4>)
 8003120:	1c7e      	adds	r6, r7, #1
 8003122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003126:	f000 f9d7 	bl	80034d8 <memchr>
 800312a:	2800      	cmp	r0, #0
 800312c:	d038      	beq.n	80031a0 <_svfiprintf_r+0x1c8>
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <_svfiprintf_r+0x1e8>)
 8003130:	bb13      	cbnz	r3, 8003178 <_svfiprintf_r+0x1a0>
 8003132:	9b03      	ldr	r3, [sp, #12]
 8003134:	3307      	adds	r3, #7
 8003136:	f023 0307 	bic.w	r3, r3, #7
 800313a:	3308      	adds	r3, #8
 800313c:	9303      	str	r3, [sp, #12]
 800313e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003140:	444b      	add	r3, r9
 8003142:	9309      	str	r3, [sp, #36]	; 0x24
 8003144:	e76d      	b.n	8003022 <_svfiprintf_r+0x4a>
 8003146:	fb05 3202 	mla	r2, r5, r2, r3
 800314a:	2001      	movs	r0, #1
 800314c:	460f      	mov	r7, r1
 800314e:	e7a6      	b.n	800309e <_svfiprintf_r+0xc6>
 8003150:	2300      	movs	r3, #0
 8003152:	250a      	movs	r5, #10
 8003154:	4619      	mov	r1, r3
 8003156:	3701      	adds	r7, #1
 8003158:	9305      	str	r3, [sp, #20]
 800315a:	4638      	mov	r0, r7
 800315c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003160:	3a30      	subs	r2, #48	; 0x30
 8003162:	2a09      	cmp	r2, #9
 8003164:	d903      	bls.n	800316e <_svfiprintf_r+0x196>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0c8      	beq.n	80030fc <_svfiprintf_r+0x124>
 800316a:	9105      	str	r1, [sp, #20]
 800316c:	e7c6      	b.n	80030fc <_svfiprintf_r+0x124>
 800316e:	fb05 2101 	mla	r1, r5, r1, r2
 8003172:	2301      	movs	r3, #1
 8003174:	4607      	mov	r7, r0
 8003176:	e7f0      	b.n	800315a <_svfiprintf_r+0x182>
 8003178:	ab03      	add	r3, sp, #12
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4622      	mov	r2, r4
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <_svfiprintf_r+0x1ec>)
 8003180:	a904      	add	r1, sp, #16
 8003182:	4640      	mov	r0, r8
 8003184:	f3af 8000 	nop.w
 8003188:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800318c:	4681      	mov	r9, r0
 800318e:	d1d6      	bne.n	800313e <_svfiprintf_r+0x166>
 8003190:	89a3      	ldrh	r3, [r4, #12]
 8003192:	065b      	lsls	r3, r3, #25
 8003194:	f53f af35 	bmi.w	8003002 <_svfiprintf_r+0x2a>
 8003198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800319a:	b01d      	add	sp, #116	; 0x74
 800319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a0:	ab03      	add	r3, sp, #12
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	4622      	mov	r2, r4
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <_svfiprintf_r+0x1ec>)
 80031a8:	a904      	add	r1, sp, #16
 80031aa:	4640      	mov	r0, r8
 80031ac:	f000 f882 	bl	80032b4 <_printf_i>
 80031b0:	e7ea      	b.n	8003188 <_svfiprintf_r+0x1b0>
 80031b2:	bf00      	nop
 80031b4:	0800377c 	.word	0x0800377c
 80031b8:	08003782 	.word	0x08003782
 80031bc:	08003786 	.word	0x08003786
 80031c0:	00000000 	.word	0x00000000
 80031c4:	08002f25 	.word	0x08002f25

080031c8 <_printf_common>:
 80031c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031cc:	4691      	mov	r9, r2
 80031ce:	461f      	mov	r7, r3
 80031d0:	688a      	ldr	r2, [r1, #8]
 80031d2:	690b      	ldr	r3, [r1, #16]
 80031d4:	4606      	mov	r6, r0
 80031d6:	4293      	cmp	r3, r2
 80031d8:	bfb8      	it	lt
 80031da:	4613      	movlt	r3, r2
 80031dc:	f8c9 3000 	str.w	r3, [r9]
 80031e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031e4:	460c      	mov	r4, r1
 80031e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031ea:	b112      	cbz	r2, 80031f2 <_printf_common+0x2a>
 80031ec:	3301      	adds	r3, #1
 80031ee:	f8c9 3000 	str.w	r3, [r9]
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	0699      	lsls	r1, r3, #26
 80031f6:	bf42      	ittt	mi
 80031f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80031fc:	3302      	addmi	r3, #2
 80031fe:	f8c9 3000 	strmi.w	r3, [r9]
 8003202:	6825      	ldr	r5, [r4, #0]
 8003204:	f015 0506 	ands.w	r5, r5, #6
 8003208:	d107      	bne.n	800321a <_printf_common+0x52>
 800320a:	f104 0a19 	add.w	sl, r4, #25
 800320e:	68e3      	ldr	r3, [r4, #12]
 8003210:	f8d9 2000 	ldr.w	r2, [r9]
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	42ab      	cmp	r3, r5
 8003218:	dc29      	bgt.n	800326e <_printf_common+0xa6>
 800321a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	3300      	adds	r3, #0
 8003222:	bf18      	it	ne
 8003224:	2301      	movne	r3, #1
 8003226:	0692      	lsls	r2, r2, #26
 8003228:	d42e      	bmi.n	8003288 <_printf_common+0xc0>
 800322a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800322e:	4639      	mov	r1, r7
 8003230:	4630      	mov	r0, r6
 8003232:	47c0      	blx	r8
 8003234:	3001      	adds	r0, #1
 8003236:	d021      	beq.n	800327c <_printf_common+0xb4>
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	68e5      	ldr	r5, [r4, #12]
 800323c:	f003 0306 	and.w	r3, r3, #6
 8003240:	2b04      	cmp	r3, #4
 8003242:	bf18      	it	ne
 8003244:	2500      	movne	r5, #0
 8003246:	f8d9 2000 	ldr.w	r2, [r9]
 800324a:	f04f 0900 	mov.w	r9, #0
 800324e:	bf08      	it	eq
 8003250:	1aad      	subeq	r5, r5, r2
 8003252:	68a3      	ldr	r3, [r4, #8]
 8003254:	6922      	ldr	r2, [r4, #16]
 8003256:	bf08      	it	eq
 8003258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800325c:	4293      	cmp	r3, r2
 800325e:	bfc4      	itt	gt
 8003260:	1a9b      	subgt	r3, r3, r2
 8003262:	18ed      	addgt	r5, r5, r3
 8003264:	341a      	adds	r4, #26
 8003266:	454d      	cmp	r5, r9
 8003268:	d11a      	bne.n	80032a0 <_printf_common+0xd8>
 800326a:	2000      	movs	r0, #0
 800326c:	e008      	b.n	8003280 <_printf_common+0xb8>
 800326e:	2301      	movs	r3, #1
 8003270:	4652      	mov	r2, sl
 8003272:	4639      	mov	r1, r7
 8003274:	4630      	mov	r0, r6
 8003276:	47c0      	blx	r8
 8003278:	3001      	adds	r0, #1
 800327a:	d103      	bne.n	8003284 <_printf_common+0xbc>
 800327c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003284:	3501      	adds	r5, #1
 8003286:	e7c2      	b.n	800320e <_printf_common+0x46>
 8003288:	2030      	movs	r0, #48	; 0x30
 800328a:	18e1      	adds	r1, r4, r3
 800328c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003296:	4422      	add	r2, r4
 8003298:	3302      	adds	r3, #2
 800329a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800329e:	e7c4      	b.n	800322a <_printf_common+0x62>
 80032a0:	2301      	movs	r3, #1
 80032a2:	4622      	mov	r2, r4
 80032a4:	4639      	mov	r1, r7
 80032a6:	4630      	mov	r0, r6
 80032a8:	47c0      	blx	r8
 80032aa:	3001      	adds	r0, #1
 80032ac:	d0e6      	beq.n	800327c <_printf_common+0xb4>
 80032ae:	f109 0901 	add.w	r9, r9, #1
 80032b2:	e7d8      	b.n	8003266 <_printf_common+0x9e>

080032b4 <_printf_i>:
 80032b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80032bc:	460c      	mov	r4, r1
 80032be:	7e09      	ldrb	r1, [r1, #24]
 80032c0:	b085      	sub	sp, #20
 80032c2:	296e      	cmp	r1, #110	; 0x6e
 80032c4:	4617      	mov	r7, r2
 80032c6:	4606      	mov	r6, r0
 80032c8:	4698      	mov	r8, r3
 80032ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80032cc:	f000 80b3 	beq.w	8003436 <_printf_i+0x182>
 80032d0:	d822      	bhi.n	8003318 <_printf_i+0x64>
 80032d2:	2963      	cmp	r1, #99	; 0x63
 80032d4:	d036      	beq.n	8003344 <_printf_i+0x90>
 80032d6:	d80a      	bhi.n	80032ee <_printf_i+0x3a>
 80032d8:	2900      	cmp	r1, #0
 80032da:	f000 80b9 	beq.w	8003450 <_printf_i+0x19c>
 80032de:	2958      	cmp	r1, #88	; 0x58
 80032e0:	f000 8083 	beq.w	80033ea <_printf_i+0x136>
 80032e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80032ec:	e032      	b.n	8003354 <_printf_i+0xa0>
 80032ee:	2964      	cmp	r1, #100	; 0x64
 80032f0:	d001      	beq.n	80032f6 <_printf_i+0x42>
 80032f2:	2969      	cmp	r1, #105	; 0x69
 80032f4:	d1f6      	bne.n	80032e4 <_printf_i+0x30>
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	6813      	ldr	r3, [r2, #0]
 80032fa:	0605      	lsls	r5, r0, #24
 80032fc:	f103 0104 	add.w	r1, r3, #4
 8003300:	d52a      	bpl.n	8003358 <_printf_i+0xa4>
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6011      	str	r1, [r2, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	da03      	bge.n	8003312 <_printf_i+0x5e>
 800330a:	222d      	movs	r2, #45	; 0x2d
 800330c:	425b      	negs	r3, r3
 800330e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003312:	486f      	ldr	r0, [pc, #444]	; (80034d0 <_printf_i+0x21c>)
 8003314:	220a      	movs	r2, #10
 8003316:	e039      	b.n	800338c <_printf_i+0xd8>
 8003318:	2973      	cmp	r1, #115	; 0x73
 800331a:	f000 809d 	beq.w	8003458 <_printf_i+0x1a4>
 800331e:	d808      	bhi.n	8003332 <_printf_i+0x7e>
 8003320:	296f      	cmp	r1, #111	; 0x6f
 8003322:	d020      	beq.n	8003366 <_printf_i+0xb2>
 8003324:	2970      	cmp	r1, #112	; 0x70
 8003326:	d1dd      	bne.n	80032e4 <_printf_i+0x30>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	f043 0320 	orr.w	r3, r3, #32
 800332e:	6023      	str	r3, [r4, #0]
 8003330:	e003      	b.n	800333a <_printf_i+0x86>
 8003332:	2975      	cmp	r1, #117	; 0x75
 8003334:	d017      	beq.n	8003366 <_printf_i+0xb2>
 8003336:	2978      	cmp	r1, #120	; 0x78
 8003338:	d1d4      	bne.n	80032e4 <_printf_i+0x30>
 800333a:	2378      	movs	r3, #120	; 0x78
 800333c:	4865      	ldr	r0, [pc, #404]	; (80034d4 <_printf_i+0x220>)
 800333e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003342:	e055      	b.n	80033f0 <_printf_i+0x13c>
 8003344:	6813      	ldr	r3, [r2, #0]
 8003346:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800334a:	1d19      	adds	r1, r3, #4
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6011      	str	r1, [r2, #0]
 8003350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003354:	2301      	movs	r3, #1
 8003356:	e08c      	b.n	8003472 <_printf_i+0x1be>
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800335e:	6011      	str	r1, [r2, #0]
 8003360:	bf18      	it	ne
 8003362:	b21b      	sxthne	r3, r3
 8003364:	e7cf      	b.n	8003306 <_printf_i+0x52>
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	6825      	ldr	r5, [r4, #0]
 800336a:	1d18      	adds	r0, r3, #4
 800336c:	6010      	str	r0, [r2, #0]
 800336e:	0628      	lsls	r0, r5, #24
 8003370:	d501      	bpl.n	8003376 <_printf_i+0xc2>
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	e002      	b.n	800337c <_printf_i+0xc8>
 8003376:	0668      	lsls	r0, r5, #25
 8003378:	d5fb      	bpl.n	8003372 <_printf_i+0xbe>
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	296f      	cmp	r1, #111	; 0x6f
 800337e:	bf14      	ite	ne
 8003380:	220a      	movne	r2, #10
 8003382:	2208      	moveq	r2, #8
 8003384:	4852      	ldr	r0, [pc, #328]	; (80034d0 <_printf_i+0x21c>)
 8003386:	2100      	movs	r1, #0
 8003388:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800338c:	6865      	ldr	r5, [r4, #4]
 800338e:	2d00      	cmp	r5, #0
 8003390:	60a5      	str	r5, [r4, #8]
 8003392:	f2c0 8095 	blt.w	80034c0 <_printf_i+0x20c>
 8003396:	6821      	ldr	r1, [r4, #0]
 8003398:	f021 0104 	bic.w	r1, r1, #4
 800339c:	6021      	str	r1, [r4, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d13d      	bne.n	800341e <_printf_i+0x16a>
 80033a2:	2d00      	cmp	r5, #0
 80033a4:	f040 808e 	bne.w	80034c4 <_printf_i+0x210>
 80033a8:	4665      	mov	r5, ip
 80033aa:	2a08      	cmp	r2, #8
 80033ac:	d10b      	bne.n	80033c6 <_printf_i+0x112>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	07db      	lsls	r3, r3, #31
 80033b2:	d508      	bpl.n	80033c6 <_printf_i+0x112>
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	6862      	ldr	r2, [r4, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	bfde      	ittt	le
 80033bc:	2330      	movle	r3, #48	; 0x30
 80033be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033c2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80033c6:	ebac 0305 	sub.w	r3, ip, r5
 80033ca:	6123      	str	r3, [r4, #16]
 80033cc:	f8cd 8000 	str.w	r8, [sp]
 80033d0:	463b      	mov	r3, r7
 80033d2:	aa03      	add	r2, sp, #12
 80033d4:	4621      	mov	r1, r4
 80033d6:	4630      	mov	r0, r6
 80033d8:	f7ff fef6 	bl	80031c8 <_printf_common>
 80033dc:	3001      	adds	r0, #1
 80033de:	d14d      	bne.n	800347c <_printf_i+0x1c8>
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033e4:	b005      	add	sp, #20
 80033e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033ea:	4839      	ldr	r0, [pc, #228]	; (80034d0 <_printf_i+0x21c>)
 80033ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80033f0:	6813      	ldr	r3, [r2, #0]
 80033f2:	6821      	ldr	r1, [r4, #0]
 80033f4:	1d1d      	adds	r5, r3, #4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6015      	str	r5, [r2, #0]
 80033fa:	060a      	lsls	r2, r1, #24
 80033fc:	d50b      	bpl.n	8003416 <_printf_i+0x162>
 80033fe:	07ca      	lsls	r2, r1, #31
 8003400:	bf44      	itt	mi
 8003402:	f041 0120 	orrmi.w	r1, r1, #32
 8003406:	6021      	strmi	r1, [r4, #0]
 8003408:	b91b      	cbnz	r3, 8003412 <_printf_i+0x15e>
 800340a:	6822      	ldr	r2, [r4, #0]
 800340c:	f022 0220 	bic.w	r2, r2, #32
 8003410:	6022      	str	r2, [r4, #0]
 8003412:	2210      	movs	r2, #16
 8003414:	e7b7      	b.n	8003386 <_printf_i+0xd2>
 8003416:	064d      	lsls	r5, r1, #25
 8003418:	bf48      	it	mi
 800341a:	b29b      	uxthmi	r3, r3
 800341c:	e7ef      	b.n	80033fe <_printf_i+0x14a>
 800341e:	4665      	mov	r5, ip
 8003420:	fbb3 f1f2 	udiv	r1, r3, r2
 8003424:	fb02 3311 	mls	r3, r2, r1, r3
 8003428:	5cc3      	ldrb	r3, [r0, r3]
 800342a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800342e:	460b      	mov	r3, r1
 8003430:	2900      	cmp	r1, #0
 8003432:	d1f5      	bne.n	8003420 <_printf_i+0x16c>
 8003434:	e7b9      	b.n	80033aa <_printf_i+0xf6>
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	6825      	ldr	r5, [r4, #0]
 800343a:	1d18      	adds	r0, r3, #4
 800343c:	6961      	ldr	r1, [r4, #20]
 800343e:	6010      	str	r0, [r2, #0]
 8003440:	0628      	lsls	r0, r5, #24
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	d501      	bpl.n	800344a <_printf_i+0x196>
 8003446:	6019      	str	r1, [r3, #0]
 8003448:	e002      	b.n	8003450 <_printf_i+0x19c>
 800344a:	066a      	lsls	r2, r5, #25
 800344c:	d5fb      	bpl.n	8003446 <_printf_i+0x192>
 800344e:	8019      	strh	r1, [r3, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	4665      	mov	r5, ip
 8003454:	6123      	str	r3, [r4, #16]
 8003456:	e7b9      	b.n	80033cc <_printf_i+0x118>
 8003458:	6813      	ldr	r3, [r2, #0]
 800345a:	1d19      	adds	r1, r3, #4
 800345c:	6011      	str	r1, [r2, #0]
 800345e:	681d      	ldr	r5, [r3, #0]
 8003460:	6862      	ldr	r2, [r4, #4]
 8003462:	2100      	movs	r1, #0
 8003464:	4628      	mov	r0, r5
 8003466:	f000 f837 	bl	80034d8 <memchr>
 800346a:	b108      	cbz	r0, 8003470 <_printf_i+0x1bc>
 800346c:	1b40      	subs	r0, r0, r5
 800346e:	6060      	str	r0, [r4, #4]
 8003470:	6863      	ldr	r3, [r4, #4]
 8003472:	6123      	str	r3, [r4, #16]
 8003474:	2300      	movs	r3, #0
 8003476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800347a:	e7a7      	b.n	80033cc <_printf_i+0x118>
 800347c:	6923      	ldr	r3, [r4, #16]
 800347e:	462a      	mov	r2, r5
 8003480:	4639      	mov	r1, r7
 8003482:	4630      	mov	r0, r6
 8003484:	47c0      	blx	r8
 8003486:	3001      	adds	r0, #1
 8003488:	d0aa      	beq.n	80033e0 <_printf_i+0x12c>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	079b      	lsls	r3, r3, #30
 800348e:	d413      	bmi.n	80034b8 <_printf_i+0x204>
 8003490:	68e0      	ldr	r0, [r4, #12]
 8003492:	9b03      	ldr	r3, [sp, #12]
 8003494:	4298      	cmp	r0, r3
 8003496:	bfb8      	it	lt
 8003498:	4618      	movlt	r0, r3
 800349a:	e7a3      	b.n	80033e4 <_printf_i+0x130>
 800349c:	2301      	movs	r3, #1
 800349e:	464a      	mov	r2, r9
 80034a0:	4639      	mov	r1, r7
 80034a2:	4630      	mov	r0, r6
 80034a4:	47c0      	blx	r8
 80034a6:	3001      	adds	r0, #1
 80034a8:	d09a      	beq.n	80033e0 <_printf_i+0x12c>
 80034aa:	3501      	adds	r5, #1
 80034ac:	68e3      	ldr	r3, [r4, #12]
 80034ae:	9a03      	ldr	r2, [sp, #12]
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	42ab      	cmp	r3, r5
 80034b4:	dcf2      	bgt.n	800349c <_printf_i+0x1e8>
 80034b6:	e7eb      	b.n	8003490 <_printf_i+0x1dc>
 80034b8:	2500      	movs	r5, #0
 80034ba:	f104 0919 	add.w	r9, r4, #25
 80034be:	e7f5      	b.n	80034ac <_printf_i+0x1f8>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ac      	bne.n	800341e <_printf_i+0x16a>
 80034c4:	7803      	ldrb	r3, [r0, #0]
 80034c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034ce:	e76c      	b.n	80033aa <_printf_i+0xf6>
 80034d0:	0800378d 	.word	0x0800378d
 80034d4:	0800379e 	.word	0x0800379e

080034d8 <memchr>:
 80034d8:	b510      	push	{r4, lr}
 80034da:	b2c9      	uxtb	r1, r1
 80034dc:	4402      	add	r2, r0
 80034de:	4290      	cmp	r0, r2
 80034e0:	4603      	mov	r3, r0
 80034e2:	d101      	bne.n	80034e8 <memchr+0x10>
 80034e4:	2300      	movs	r3, #0
 80034e6:	e003      	b.n	80034f0 <memchr+0x18>
 80034e8:	781c      	ldrb	r4, [r3, #0]
 80034ea:	3001      	adds	r0, #1
 80034ec:	428c      	cmp	r4, r1
 80034ee:	d1f6      	bne.n	80034de <memchr+0x6>
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd10      	pop	{r4, pc}

080034f4 <memcpy>:
 80034f4:	b510      	push	{r4, lr}
 80034f6:	1e43      	subs	r3, r0, #1
 80034f8:	440a      	add	r2, r1
 80034fa:	4291      	cmp	r1, r2
 80034fc:	d100      	bne.n	8003500 <memcpy+0xc>
 80034fe:	bd10      	pop	{r4, pc}
 8003500:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003504:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003508:	e7f7      	b.n	80034fa <memcpy+0x6>

0800350a <memmove>:
 800350a:	4288      	cmp	r0, r1
 800350c:	b510      	push	{r4, lr}
 800350e:	eb01 0302 	add.w	r3, r1, r2
 8003512:	d807      	bhi.n	8003524 <memmove+0x1a>
 8003514:	1e42      	subs	r2, r0, #1
 8003516:	4299      	cmp	r1, r3
 8003518:	d00a      	beq.n	8003530 <memmove+0x26>
 800351a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800351e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003522:	e7f8      	b.n	8003516 <memmove+0xc>
 8003524:	4283      	cmp	r3, r0
 8003526:	d9f5      	bls.n	8003514 <memmove+0xa>
 8003528:	1881      	adds	r1, r0, r2
 800352a:	1ad2      	subs	r2, r2, r3
 800352c:	42d3      	cmn	r3, r2
 800352e:	d100      	bne.n	8003532 <memmove+0x28>
 8003530:	bd10      	pop	{r4, pc}
 8003532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003536:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800353a:	e7f7      	b.n	800352c <memmove+0x22>

0800353c <_free_r>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	4605      	mov	r5, r0
 8003540:	2900      	cmp	r1, #0
 8003542:	d043      	beq.n	80035cc <_free_r+0x90>
 8003544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003548:	1f0c      	subs	r4, r1, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	bfb8      	it	lt
 800354e:	18e4      	addlt	r4, r4, r3
 8003550:	f000 f8d0 	bl	80036f4 <__malloc_lock>
 8003554:	4a1e      	ldr	r2, [pc, #120]	; (80035d0 <_free_r+0x94>)
 8003556:	6813      	ldr	r3, [r2, #0]
 8003558:	4610      	mov	r0, r2
 800355a:	b933      	cbnz	r3, 800356a <_free_r+0x2e>
 800355c:	6063      	str	r3, [r4, #4]
 800355e:	6014      	str	r4, [r2, #0]
 8003560:	4628      	mov	r0, r5
 8003562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003566:	f000 b8c6 	b.w	80036f6 <__malloc_unlock>
 800356a:	42a3      	cmp	r3, r4
 800356c:	d90b      	bls.n	8003586 <_free_r+0x4a>
 800356e:	6821      	ldr	r1, [r4, #0]
 8003570:	1862      	adds	r2, r4, r1
 8003572:	4293      	cmp	r3, r2
 8003574:	bf01      	itttt	eq
 8003576:	681a      	ldreq	r2, [r3, #0]
 8003578:	685b      	ldreq	r3, [r3, #4]
 800357a:	1852      	addeq	r2, r2, r1
 800357c:	6022      	streq	r2, [r4, #0]
 800357e:	6063      	str	r3, [r4, #4]
 8003580:	6004      	str	r4, [r0, #0]
 8003582:	e7ed      	b.n	8003560 <_free_r+0x24>
 8003584:	4613      	mov	r3, r2
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	b10a      	cbz	r2, 800358e <_free_r+0x52>
 800358a:	42a2      	cmp	r2, r4
 800358c:	d9fa      	bls.n	8003584 <_free_r+0x48>
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	1858      	adds	r0, r3, r1
 8003592:	42a0      	cmp	r0, r4
 8003594:	d10b      	bne.n	80035ae <_free_r+0x72>
 8003596:	6820      	ldr	r0, [r4, #0]
 8003598:	4401      	add	r1, r0
 800359a:	1858      	adds	r0, r3, r1
 800359c:	4282      	cmp	r2, r0
 800359e:	6019      	str	r1, [r3, #0]
 80035a0:	d1de      	bne.n	8003560 <_free_r+0x24>
 80035a2:	6810      	ldr	r0, [r2, #0]
 80035a4:	6852      	ldr	r2, [r2, #4]
 80035a6:	4401      	add	r1, r0
 80035a8:	6019      	str	r1, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	e7d8      	b.n	8003560 <_free_r+0x24>
 80035ae:	d902      	bls.n	80035b6 <_free_r+0x7a>
 80035b0:	230c      	movs	r3, #12
 80035b2:	602b      	str	r3, [r5, #0]
 80035b4:	e7d4      	b.n	8003560 <_free_r+0x24>
 80035b6:	6820      	ldr	r0, [r4, #0]
 80035b8:	1821      	adds	r1, r4, r0
 80035ba:	428a      	cmp	r2, r1
 80035bc:	bf01      	itttt	eq
 80035be:	6811      	ldreq	r1, [r2, #0]
 80035c0:	6852      	ldreq	r2, [r2, #4]
 80035c2:	1809      	addeq	r1, r1, r0
 80035c4:	6021      	streq	r1, [r4, #0]
 80035c6:	6062      	str	r2, [r4, #4]
 80035c8:	605c      	str	r4, [r3, #4]
 80035ca:	e7c9      	b.n	8003560 <_free_r+0x24>
 80035cc:	bd38      	pop	{r3, r4, r5, pc}
 80035ce:	bf00      	nop
 80035d0:	20000090 	.word	0x20000090

080035d4 <_malloc_r>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	1ccd      	adds	r5, r1, #3
 80035d8:	f025 0503 	bic.w	r5, r5, #3
 80035dc:	3508      	adds	r5, #8
 80035de:	2d0c      	cmp	r5, #12
 80035e0:	bf38      	it	cc
 80035e2:	250c      	movcc	r5, #12
 80035e4:	2d00      	cmp	r5, #0
 80035e6:	4606      	mov	r6, r0
 80035e8:	db01      	blt.n	80035ee <_malloc_r+0x1a>
 80035ea:	42a9      	cmp	r1, r5
 80035ec:	d903      	bls.n	80035f6 <_malloc_r+0x22>
 80035ee:	230c      	movs	r3, #12
 80035f0:	6033      	str	r3, [r6, #0]
 80035f2:	2000      	movs	r0, #0
 80035f4:	bd70      	pop	{r4, r5, r6, pc}
 80035f6:	f000 f87d 	bl	80036f4 <__malloc_lock>
 80035fa:	4a21      	ldr	r2, [pc, #132]	; (8003680 <_malloc_r+0xac>)
 80035fc:	6814      	ldr	r4, [r2, #0]
 80035fe:	4621      	mov	r1, r4
 8003600:	b991      	cbnz	r1, 8003628 <_malloc_r+0x54>
 8003602:	4c20      	ldr	r4, [pc, #128]	; (8003684 <_malloc_r+0xb0>)
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	b91b      	cbnz	r3, 8003610 <_malloc_r+0x3c>
 8003608:	4630      	mov	r0, r6
 800360a:	f000 f863 	bl	80036d4 <_sbrk_r>
 800360e:	6020      	str	r0, [r4, #0]
 8003610:	4629      	mov	r1, r5
 8003612:	4630      	mov	r0, r6
 8003614:	f000 f85e 	bl	80036d4 <_sbrk_r>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d124      	bne.n	8003666 <_malloc_r+0x92>
 800361c:	230c      	movs	r3, #12
 800361e:	4630      	mov	r0, r6
 8003620:	6033      	str	r3, [r6, #0]
 8003622:	f000 f868 	bl	80036f6 <__malloc_unlock>
 8003626:	e7e4      	b.n	80035f2 <_malloc_r+0x1e>
 8003628:	680b      	ldr	r3, [r1, #0]
 800362a:	1b5b      	subs	r3, r3, r5
 800362c:	d418      	bmi.n	8003660 <_malloc_r+0x8c>
 800362e:	2b0b      	cmp	r3, #11
 8003630:	d90f      	bls.n	8003652 <_malloc_r+0x7e>
 8003632:	600b      	str	r3, [r1, #0]
 8003634:	18cc      	adds	r4, r1, r3
 8003636:	50cd      	str	r5, [r1, r3]
 8003638:	4630      	mov	r0, r6
 800363a:	f000 f85c 	bl	80036f6 <__malloc_unlock>
 800363e:	f104 000b 	add.w	r0, r4, #11
 8003642:	1d23      	adds	r3, r4, #4
 8003644:	f020 0007 	bic.w	r0, r0, #7
 8003648:	1ac3      	subs	r3, r0, r3
 800364a:	d0d3      	beq.n	80035f4 <_malloc_r+0x20>
 800364c:	425a      	negs	r2, r3
 800364e:	50e2      	str	r2, [r4, r3]
 8003650:	e7d0      	b.n	80035f4 <_malloc_r+0x20>
 8003652:	684b      	ldr	r3, [r1, #4]
 8003654:	428c      	cmp	r4, r1
 8003656:	bf16      	itet	ne
 8003658:	6063      	strne	r3, [r4, #4]
 800365a:	6013      	streq	r3, [r2, #0]
 800365c:	460c      	movne	r4, r1
 800365e:	e7eb      	b.n	8003638 <_malloc_r+0x64>
 8003660:	460c      	mov	r4, r1
 8003662:	6849      	ldr	r1, [r1, #4]
 8003664:	e7cc      	b.n	8003600 <_malloc_r+0x2c>
 8003666:	1cc4      	adds	r4, r0, #3
 8003668:	f024 0403 	bic.w	r4, r4, #3
 800366c:	42a0      	cmp	r0, r4
 800366e:	d005      	beq.n	800367c <_malloc_r+0xa8>
 8003670:	1a21      	subs	r1, r4, r0
 8003672:	4630      	mov	r0, r6
 8003674:	f000 f82e 	bl	80036d4 <_sbrk_r>
 8003678:	3001      	adds	r0, #1
 800367a:	d0cf      	beq.n	800361c <_malloc_r+0x48>
 800367c:	6025      	str	r5, [r4, #0]
 800367e:	e7db      	b.n	8003638 <_malloc_r+0x64>
 8003680:	20000090 	.word	0x20000090
 8003684:	20000094 	.word	0x20000094

08003688 <_realloc_r>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	4607      	mov	r7, r0
 800368c:	4614      	mov	r4, r2
 800368e:	460e      	mov	r6, r1
 8003690:	b921      	cbnz	r1, 800369c <_realloc_r+0x14>
 8003692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003696:	4611      	mov	r1, r2
 8003698:	f7ff bf9c 	b.w	80035d4 <_malloc_r>
 800369c:	b922      	cbnz	r2, 80036a8 <_realloc_r+0x20>
 800369e:	f7ff ff4d 	bl	800353c <_free_r>
 80036a2:	4625      	mov	r5, r4
 80036a4:	4628      	mov	r0, r5
 80036a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a8:	f000 f826 	bl	80036f8 <_malloc_usable_size_r>
 80036ac:	42a0      	cmp	r0, r4
 80036ae:	d20f      	bcs.n	80036d0 <_realloc_r+0x48>
 80036b0:	4621      	mov	r1, r4
 80036b2:	4638      	mov	r0, r7
 80036b4:	f7ff ff8e 	bl	80035d4 <_malloc_r>
 80036b8:	4605      	mov	r5, r0
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d0f2      	beq.n	80036a4 <_realloc_r+0x1c>
 80036be:	4631      	mov	r1, r6
 80036c0:	4622      	mov	r2, r4
 80036c2:	f7ff ff17 	bl	80034f4 <memcpy>
 80036c6:	4631      	mov	r1, r6
 80036c8:	4638      	mov	r0, r7
 80036ca:	f7ff ff37 	bl	800353c <_free_r>
 80036ce:	e7e9      	b.n	80036a4 <_realloc_r+0x1c>
 80036d0:	4635      	mov	r5, r6
 80036d2:	e7e7      	b.n	80036a4 <_realloc_r+0x1c>

080036d4 <_sbrk_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	2300      	movs	r3, #0
 80036d8:	4c05      	ldr	r4, [pc, #20]	; (80036f0 <_sbrk_r+0x1c>)
 80036da:	4605      	mov	r5, r0
 80036dc:	4608      	mov	r0, r1
 80036de:	6023      	str	r3, [r4, #0]
 80036e0:	f7ff fb48 	bl	8002d74 <_sbrk>
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	d102      	bne.n	80036ee <_sbrk_r+0x1a>
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	b103      	cbz	r3, 80036ee <_sbrk_r+0x1a>
 80036ec:	602b      	str	r3, [r5, #0]
 80036ee:	bd38      	pop	{r3, r4, r5, pc}
 80036f0:	20000180 	.word	0x20000180

080036f4 <__malloc_lock>:
 80036f4:	4770      	bx	lr

080036f6 <__malloc_unlock>:
 80036f6:	4770      	bx	lr

080036f8 <_malloc_usable_size_r>:
 80036f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036fc:	1f18      	subs	r0, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bfbc      	itt	lt
 8003702:	580b      	ldrlt	r3, [r1, r0]
 8003704:	18c0      	addlt	r0, r0, r3
 8003706:	4770      	bx	lr

08003708 <_init>:
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	bf00      	nop
 800370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370e:	bc08      	pop	{r3}
 8003710:	469e      	mov	lr, r3
 8003712:	4770      	bx	lr

08003714 <_fini>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr
