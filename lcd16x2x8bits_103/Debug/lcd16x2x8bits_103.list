
lcd16x2x8bits_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080032fc  080032fc  000132fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003388  08003388  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003388  08003388  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003388  08003388  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08003400  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003400  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009235  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e4  00000000  00000000  000292ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000940  00000000  00000000  0002aab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002b3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014153  00000000  00000000  0002bc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000795f  00000000  00000000  0003fdd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d3d8  00000000  00000000  00047732  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b4b0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000288c  00000000  00000000  000b4b88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080032e4 	.word	0x080032e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080032e4 	.word	0x080032e4

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fb0c 	bl	8002784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db0a      	blt.n	80002e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <__NVIC_SetPriority+0x4c>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	0112      	lsls	r2, r2, #4
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	440b      	add	r3, r1
 80002dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e0:	e00a      	b.n	80002f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <__NVIC_SetPriority+0x50>)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	3b04      	subs	r3, #4
 80002f0:	0112      	lsls	r2, r2, #4
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	440b      	add	r3, r1
 80002f6:	761a      	strb	r2, [r3, #24]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e100 	.word	0xe000e100
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000394:	f7ff ff90 	bl	80002b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <__NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <__NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000426:	2300      	movs	r3, #0
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800042e:	e127      	b.n	8000680 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000430:	2201      	movs	r2, #1
 8000432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	69fa      	ldr	r2, [r7, #28]
 8000440:	4013      	ands	r3, r2
 8000442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000444:	69ba      	ldr	r2, [r7, #24]
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	429a      	cmp	r2, r3
 800044a:	f040 8116 	bne.w	800067a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	2b12      	cmp	r3, #18
 8000454:	d034      	beq.n	80004c0 <HAL_GPIO_Init+0xa4>
 8000456:	2b12      	cmp	r3, #18
 8000458:	d80d      	bhi.n	8000476 <HAL_GPIO_Init+0x5a>
 800045a:	2b02      	cmp	r3, #2
 800045c:	d02b      	beq.n	80004b6 <HAL_GPIO_Init+0x9a>
 800045e:	2b02      	cmp	r3, #2
 8000460:	d804      	bhi.n	800046c <HAL_GPIO_Init+0x50>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d031      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d01c      	beq.n	80004a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800046a:	e048      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800046c:	2b03      	cmp	r3, #3
 800046e:	d043      	beq.n	80004f8 <HAL_GPIO_Init+0xdc>
 8000470:	2b11      	cmp	r3, #17
 8000472:	d01b      	beq.n	80004ac <HAL_GPIO_Init+0x90>
          break;
 8000474:	e043      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000476:	4a89      	ldr	r2, [pc, #548]	; (800069c <HAL_GPIO_Init+0x280>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d026      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800047c:	4a87      	ldr	r2, [pc, #540]	; (800069c <HAL_GPIO_Init+0x280>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d806      	bhi.n	8000490 <HAL_GPIO_Init+0x74>
 8000482:	4a87      	ldr	r2, [pc, #540]	; (80006a0 <HAL_GPIO_Init+0x284>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d020      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000488:	4a86      	ldr	r2, [pc, #536]	; (80006a4 <HAL_GPIO_Init+0x288>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d01d      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 800048e:	e036      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000490:	4a85      	ldr	r2, [pc, #532]	; (80006a8 <HAL_GPIO_Init+0x28c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d019      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000496:	4a85      	ldr	r2, [pc, #532]	; (80006ac <HAL_GPIO_Init+0x290>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d016      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800049c:	4a84      	ldr	r2, [pc, #528]	; (80006b0 <HAL_GPIO_Init+0x294>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d013      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 80004a2:	e02c      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	623b      	str	r3, [r7, #32]
          break;
 80004aa:	e028      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	3304      	adds	r3, #4
 80004b2:	623b      	str	r3, [r7, #32]
          break;
 80004b4:	e023      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	3308      	adds	r3, #8
 80004bc:	623b      	str	r3, [r7, #32]
          break;
 80004be:	e01e      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	330c      	adds	r3, #12
 80004c6:	623b      	str	r3, [r7, #32]
          break;
 80004c8:	e019      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004d2:	2304      	movs	r3, #4
 80004d4:	623b      	str	r3, [r7, #32]
          break;
 80004d6:	e012      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d105      	bne.n	80004ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004e0:	2308      	movs	r3, #8
 80004e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	69fa      	ldr	r2, [r7, #28]
 80004e8:	611a      	str	r2, [r3, #16]
          break;
 80004ea:	e008      	b.n	80004fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ec:	2308      	movs	r3, #8
 80004ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	615a      	str	r2, [r3, #20]
          break;
 80004f6:	e002      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
          break;
 80004fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d801      	bhi.n	8000508 <HAL_GPIO_Init+0xec>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	e001      	b.n	800050c <HAL_GPIO_Init+0xf0>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3304      	adds	r3, #4
 800050c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d802      	bhi.n	800051a <HAL_GPIO_Init+0xfe>
 8000514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	e002      	b.n	8000520 <HAL_GPIO_Init+0x104>
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	3b08      	subs	r3, #8
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	210f      	movs	r1, #15
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	401a      	ands	r2, r3
 8000532:	6a39      	ldr	r1, [r7, #32]
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	431a      	orrs	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	2b00      	cmp	r3, #0
 800054a:	f000 8096 	beq.w	800067a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800054e:	4b59      	ldr	r3, [pc, #356]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a58      	ldr	r2, [pc, #352]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <HAL_GPIO_Init+0x298>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000566:	4a54      	ldr	r2, [pc, #336]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	3302      	adds	r3, #2
 800056e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000572:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	f003 0303 	and.w	r3, r3, #3
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	220f      	movs	r2, #15
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0x19e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_Init+0x19a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x2a8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x196>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x2ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_GPIO_Init+0x192>
 80005aa:	2303      	movs	r3, #3
 80005ac:	e006      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ae:	2304      	movs	r3, #4
 80005b0:	e004      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b2:	2302      	movs	r3, #2
 80005b4:	e002      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ba:	2300      	movs	r3, #0
 80005bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005be:	f002 0203 	and.w	r2, r2, #3
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	4093      	lsls	r3, r2
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005cc:	493a      	ldr	r1, [pc, #232]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	089b      	lsrs	r3, r3, #2
 80005d2:	3302      	adds	r3, #2
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4938      	ldr	r1, [pc, #224]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	600b      	str	r3, [r1, #0]
 80005f2:	e006      	b.n	8000602 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	43db      	mvns	r3, r3
 80005fc:	4933      	ldr	r1, [pc, #204]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005fe:	4013      	ands	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	492e      	ldr	r1, [pc, #184]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4313      	orrs	r3, r2
 8000618:	604b      	str	r3, [r1, #4]
 800061a:	e006      	b.n	800062a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	43db      	mvns	r3, r3
 8000624:	4929      	ldr	r1, [pc, #164]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000626:	4013      	ands	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	4924      	ldr	r1, [pc, #144]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	4313      	orrs	r3, r2
 8000640:	608b      	str	r3, [r1, #8]
 8000642:	e006      	b.n	8000652 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	43db      	mvns	r3, r3
 800064c:	491f      	ldr	r1, [pc, #124]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800064e:	4013      	ands	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	491a      	ldr	r1, [pc, #104]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	4313      	orrs	r3, r2
 8000668:	60cb      	str	r3, [r1, #12]
 800066a:	e006      	b.n	800067a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	43db      	mvns	r3, r3
 8000674:	4915      	ldr	r1, [pc, #84]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000676:	4013      	ands	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	3301      	adds	r3, #1
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	fa22 f303 	lsr.w	r3, r2, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	f47f aed0 	bne.w	8000430 <HAL_GPIO_Init+0x14>
  }
}
 8000690:	bf00      	nop
 8000692:	372c      	adds	r7, #44	; 0x2c
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	10210000 	.word	0x10210000
 80006a0:	10110000 	.word	0x10110000
 80006a4:	10120000 	.word	0x10120000
 80006a8:	10310000 	.word	0x10310000
 80006ac:	10320000 	.word	0x10320000
 80006b0:	10220000 	.word	0x10220000
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010000 	.word	0x40010000
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40011000 	.word	0x40011000
 80006c8:	40011400 	.word	0x40011400
 80006cc:	40010400 	.word	0x40010400

080006d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
 80006dc:	4613      	mov	r3, r2
 80006de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006e0:	787b      	ldrb	r3, [r7, #1]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006e6:	887a      	ldrh	r2, [r7, #2]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80006ec:	e003      	b.n	80006f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	041a      	lsls	r2, r3, #16
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	611a      	str	r2, [r3, #16]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68da      	ldr	r2, [r3, #12]
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	4013      	ands	r3, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000718:	887a      	ldrh	r2, [r7, #2]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800071e:	e002      	b.n	8000726 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	611a      	str	r2, [r3, #16]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e10f      	b.n	8000962 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d106      	bne.n	800075c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f002 f846 	bl	80027e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2224      	movs	r2, #36	; 0x24
 8000760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0201 	bic.w	r2, r2, #1
 8000772:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000774:	f001 fb40 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8000778:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4a7b      	ldr	r2, [pc, #492]	; (800096c <HAL_I2C_Init+0x23c>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d807      	bhi.n	8000794 <HAL_I2C_Init+0x64>
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4a7a      	ldr	r2, [pc, #488]	; (8000970 <HAL_I2C_Init+0x240>)
 8000788:	4293      	cmp	r3, r2
 800078a:	bf94      	ite	ls
 800078c:	2301      	movls	r3, #1
 800078e:	2300      	movhi	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	e006      	b.n	80007a2 <HAL_I2C_Init+0x72>
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4a77      	ldr	r2, [pc, #476]	; (8000974 <HAL_I2C_Init+0x244>)
 8000798:	4293      	cmp	r3, r2
 800079a:	bf94      	ite	ls
 800079c:	2301      	movls	r3, #1
 800079e:	2300      	movhi	r3, #0
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e0db      	b.n	8000962 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4a72      	ldr	r2, [pc, #456]	; (8000978 <HAL_I2C_Init+0x248>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	0c9b      	lsrs	r3, r3, #18
 80007b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	68ba      	ldr	r2, [r7, #8]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6a1b      	ldr	r3, [r3, #32]
 80007d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4a64      	ldr	r2, [pc, #400]	; (800096c <HAL_I2C_Init+0x23c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d802      	bhi.n	80007e4 <HAL_I2C_Init+0xb4>
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3301      	adds	r3, #1
 80007e2:	e009      	b.n	80007f8 <HAL_I2C_Init+0xc8>
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007ea:	fb02 f303 	mul.w	r3, r2, r3
 80007ee:	4a63      	ldr	r2, [pc, #396]	; (800097c <HAL_I2C_Init+0x24c>)
 80007f0:	fba2 2303 	umull	r2, r3, r2, r3
 80007f4:	099b      	lsrs	r3, r3, #6
 80007f6:	3301      	adds	r3, #1
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	430b      	orrs	r3, r1
 80007fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800080a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	4956      	ldr	r1, [pc, #344]	; (800096c <HAL_I2C_Init+0x23c>)
 8000814:	428b      	cmp	r3, r1
 8000816:	d80d      	bhi.n	8000834 <HAL_I2C_Init+0x104>
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	1e59      	subs	r1, r3, #1
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	fbb1 f3f3 	udiv	r3, r1, r3
 8000826:	3301      	adds	r3, #1
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	2b04      	cmp	r3, #4
 800082e:	bf38      	it	cc
 8000830:	2304      	movcc	r3, #4
 8000832:	e04f      	b.n	80008d4 <HAL_I2C_Init+0x1a4>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d111      	bne.n	8000860 <HAL_I2C_Init+0x130>
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	1e58      	subs	r0, r3, #1
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6859      	ldr	r1, [r3, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	440b      	add	r3, r1
 800084a:	fbb0 f3f3 	udiv	r3, r0, r3
 800084e:	3301      	adds	r3, #1
 8000850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf0c      	ite	eq
 8000858:	2301      	moveq	r3, #1
 800085a:	2300      	movne	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	e012      	b.n	8000886 <HAL_I2C_Init+0x156>
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	1e58      	subs	r0, r3, #1
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6859      	ldr	r1, [r3, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	440b      	add	r3, r1
 800086e:	0099      	lsls	r1, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	fbb0 f3f3 	udiv	r3, r0, r3
 8000876:	3301      	adds	r3, #1
 8000878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf0c      	ite	eq
 8000880:	2301      	moveq	r3, #1
 8000882:	2300      	movne	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_I2C_Init+0x15e>
 800088a:	2301      	movs	r3, #1
 800088c:	e022      	b.n	80008d4 <HAL_I2C_Init+0x1a4>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d10e      	bne.n	80008b4 <HAL_I2C_Init+0x184>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	1e58      	subs	r0, r3, #1
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6859      	ldr	r1, [r3, #4]
 800089e:	460b      	mov	r3, r1
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	440b      	add	r3, r1
 80008a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80008a8:	3301      	adds	r3, #1
 80008aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b2:	e00f      	b.n	80008d4 <HAL_I2C_Init+0x1a4>
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	1e58      	subs	r0, r3, #1
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6859      	ldr	r1, [r3, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	440b      	add	r3, r1
 80008c2:	0099      	lsls	r1, r3, #2
 80008c4:	440b      	add	r3, r1
 80008c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80008ca:	3301      	adds	r3, #1
 80008cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	6809      	ldr	r1, [r1, #0]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69da      	ldr	r2, [r3, #28]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6a1b      	ldr	r3, [r3, #32]
 80008ee:	431a      	orrs	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	6911      	ldr	r1, [r2, #16]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	68d2      	ldr	r2, [r2, #12]
 800090e:	4311      	orrs	r1, r2
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	430b      	orrs	r3, r1
 8000916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695a      	ldr	r2, [r3, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	431a      	orrs	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	430a      	orrs	r2, r1
 8000932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f042 0201 	orr.w	r2, r2, #1
 8000942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2220      	movs	r2, #32
 800094e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	000186a0 	.word	0x000186a0
 8000970:	001e847f 	.word	0x001e847f
 8000974:	003d08ff 	.word	0x003d08ff
 8000978:	431bde83 	.word	0x431bde83
 800097c:	10624dd3 	.word	0x10624dd3

08000980 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af02      	add	r7, sp, #8
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	4608      	mov	r0, r1
 800098a:	4611      	mov	r1, r2
 800098c:	461a      	mov	r2, r3
 800098e:	4603      	mov	r3, r0
 8000990:	817b      	strh	r3, [r7, #10]
 8000992:	460b      	mov	r3, r1
 8000994:	813b      	strh	r3, [r7, #8]
 8000996:	4613      	mov	r3, r2
 8000998:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800099a:	f7ff fc2f 	bl	80001fc <HAL_GetTick>
 800099e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b20      	cmp	r3, #32
 80009aa:	f040 80d9 	bne.w	8000b60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2319      	movs	r3, #25
 80009b4:	2201      	movs	r2, #1
 80009b6:	496d      	ldr	r1, [pc, #436]	; (8000b6c <HAL_I2C_Mem_Write+0x1ec>)
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f000 fc6b 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80009c4:	2302      	movs	r3, #2
 80009c6:	e0cc      	b.n	8000b62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d101      	bne.n	80009d6 <HAL_I2C_Mem_Write+0x56>
 80009d2:	2302      	movs	r3, #2
 80009d4:	e0c5      	b.n	8000b62 <HAL_I2C_Mem_Write+0x1e2>
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2201      	movs	r2, #1
 80009da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d007      	beq.n	80009fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f042 0201 	orr.w	r2, r2, #1
 80009fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2221      	movs	r2, #33	; 0x21
 8000a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2240      	movs	r2, #64	; 0x40
 8000a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6a3a      	ldr	r2, [r7, #32]
 8000a26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a4d      	ldr	r2, [pc, #308]	; (8000b70 <HAL_I2C_Mem_Write+0x1f0>)
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000a3e:	88f8      	ldrh	r0, [r7, #6]
 8000a40:	893a      	ldrh	r2, [r7, #8]
 8000a42:	8979      	ldrh	r1, [r7, #10]
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f000 fac6 	bl	8000fe0 <I2C_RequestMemoryWrite>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d052      	beq.n	8000b00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e081      	b.n	8000b62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a5e:	697a      	ldr	r2, [r7, #20]
 8000a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f000 fcec 	bl	8001440 <I2C_WaitOnTXEFlagUntilTimeout>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00d      	beq.n	8000a8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	d107      	bne.n	8000a86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e06b      	b.n	8000b62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d11b      	bne.n	8000b00 <HAL_I2C_Mem_Write+0x180>
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d017      	beq.n	8000b00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aea:	3b01      	subs	r3, #1
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	3b01      	subs	r3, #1
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1aa      	bne.n	8000a5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f000 fcd8 	bl	80014c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00d      	beq.n	8000b34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d107      	bne.n	8000b30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e016      	b.n	8000b62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2220      	movs	r2, #32
 8000b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e000      	b.n	8000b62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8000b60:	2302      	movs	r3, #2
  }
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	00100002 	.word	0x00100002
 8000b70:	ffff0000 	.word	0xffff0000

08000b74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	; 0x30
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	4611      	mov	r1, r2
 8000b80:	461a      	mov	r2, r3
 8000b82:	4603      	mov	r3, r0
 8000b84:	817b      	strh	r3, [r7, #10]
 8000b86:	460b      	mov	r3, r1
 8000b88:	813b      	strh	r3, [r7, #8]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000b8e:	f7ff fb35 	bl	80001fc <HAL_GetTick>
 8000b92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b20      	cmp	r3, #32
 8000b9e:	f040 8218 	bne.w	8000fd2 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2319      	movs	r3, #25
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4981      	ldr	r1, [pc, #516]	; (8000db0 <HAL_I2C_Mem_Read+0x23c>)
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f000 fb71 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	e20b      	b.n	8000fd4 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d101      	bne.n	8000bca <HAL_I2C_Mem_Read+0x56>
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	e204      	b.n	8000fd4 <HAL_I2C_Mem_Read+0x460>
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d007      	beq.n	8000bf0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0201 	orr.w	r2, r2, #1
 8000bee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2222      	movs	r2, #34	; 0x22
 8000c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2240      	movs	r2, #64	; 0x40
 8000c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2200      	movs	r2, #0
 8000c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4a61      	ldr	r2, [pc, #388]	; (8000db4 <HAL_I2C_Mem_Read+0x240>)
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000c32:	88f8      	ldrh	r0, [r7, #6]
 8000c34:	893a      	ldrh	r2, [r7, #8]
 8000c36:	8979      	ldrh	r1, [r7, #10]
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	4603      	mov	r3, r0
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f000 fa56 	bl	80010f4 <I2C_RequestMemoryRead>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e1c0      	b.n	8000fd4 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d113      	bne.n	8000c82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	623b      	str	r3, [r7, #32]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	623b      	str	r3, [r7, #32]
 8000c6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	e194      	b.n	8000fac <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d11d      	bne.n	8000cc6 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c98:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	61fb      	str	r3, [r7, #28]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cc2:	b662      	cpsie	i
 8000cc4:	e172      	b.n	8000fac <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d11d      	bne.n	8000d0a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cdc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000cde:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	61bb      	str	r3, [r7, #24]
 8000cf4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d06:	b662      	cpsie	i
 8000d08:	e150      	b.n	8000fac <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d18:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8000d30:	e13c      	b.n	8000fac <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	f200 80f5 	bhi.w	8000f26 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d123      	bne.n	8000d8c <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f000 fbfb 	bl	8001544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e13d      	b.n	8000fd4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d74:	3b01      	subs	r3, #1
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000d8a:	e10f      	b.n	8000fac <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d150      	bne.n	8000e36 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4906      	ldr	r1, [pc, #24]	; (8000db8 <HAL_I2C_Mem_Read+0x244>)
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f000 fa78 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d008      	beq.n	8000dbc <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e112      	b.n	8000fd4 <HAL_I2C_Mem_Read+0x460>
 8000dae:	bf00      	nop
 8000db0:	00100002 	.word	0x00100002
 8000db4:	ffff0000 	.word	0xffff0000
 8000db8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dcc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dea:	3b01      	subs	r3, #1
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000e00:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	691a      	ldr	r2, [r3, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e14:	1c5a      	adds	r2, r3, #1
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000e34:	e0ba      	b.n	8000fac <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4967      	ldr	r1, [pc, #412]	; (8000fdc <HAL_I2C_Mem_Read+0x468>)
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f000 fa27 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e0c1      	b.n	8000fd4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	494f      	ldr	r1, [pc, #316]	; (8000fdc <HAL_I2C_Mem_Read+0x468>)
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f000 f9f8 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e092      	b.n	8000fd4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ebc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eda:	3b01      	subs	r3, #1
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000ef0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000f24:	e042      	b.n	8000fac <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f000 fb0a 	bl	8001544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e04c      	b.n	8000fd4 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f56:	3b01      	subs	r3, #1
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	3b01      	subs	r3, #1
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d118      	bne.n	8000fac <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f96:	3b01      	subs	r3, #1
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f47f aebe 	bne.w	8000d32 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2220      	movs	r2, #32
 8000fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8000fd2:	2302      	movs	r3, #2
  }
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	00010004 	.word	0x00010004

08000fe0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	4608      	mov	r0, r1
 8000fea:	4611      	mov	r1, r2
 8000fec:	461a      	mov	r2, r3
 8000fee:	4603      	mov	r3, r0
 8000ff0:	817b      	strh	r3, [r7, #10]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	813b      	strh	r3, [r7, #8]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	2200      	movs	r2, #0
 8001012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f93c 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e05f      	b.n	80010e6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001026:	897b      	ldrh	r3, [r7, #10]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001034:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	6a3a      	ldr	r2, [r7, #32]
 800103a:	492d      	ldr	r1, [pc, #180]	; (80010f0 <I2C_RequestMemoryWrite+0x110>)
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 f980 	bl	8001342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e04c      	b.n	80010e6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001064:	6a39      	ldr	r1, [r7, #32]
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 f9ea 	bl	8001440 <I2C_WaitOnTXEFlagUntilTimeout>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00d      	beq.n	800108e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	2b04      	cmp	r3, #4
 8001078:	d107      	bne.n	800108a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001088:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e02b      	b.n	80010e6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d105      	bne.n	80010a0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001094:	893b      	ldrh	r3, [r7, #8]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	e021      	b.n	80010e4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80010a0:	893b      	ldrh	r3, [r7, #8]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b0:	6a39      	ldr	r1, [r7, #32]
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f9c4 	bl	8001440 <I2C_WaitOnTXEFlagUntilTimeout>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00d      	beq.n	80010da <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d107      	bne.n	80010d6 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e005      	b.n	80010e6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80010da:	893b      	ldrh	r3, [r7, #8]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	00010002 	.word	0x00010002

080010f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	4608      	mov	r0, r1
 80010fe:	4611      	mov	r1, r2
 8001100:	461a      	mov	r2, r3
 8001102:	4603      	mov	r3, r0
 8001104:	817b      	strh	r3, [r7, #10]
 8001106:	460b      	mov	r3, r1
 8001108:	813b      	strh	r3, [r7, #8]
 800110a:	4613      	mov	r3, r2
 800110c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800111c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800112c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	2200      	movs	r2, #0
 8001136:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 f8aa 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e09e      	b.n	8001288 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800114a:	897b      	ldrh	r3, [r7, #10]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001158:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	6a3a      	ldr	r2, [r7, #32]
 800115e:	494c      	ldr	r1, [pc, #304]	; (8001290 <I2C_RequestMemoryRead+0x19c>)
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f000 f8ee 	bl	8001342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e08b      	b.n	8001288 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001188:	6a39      	ldr	r1, [r7, #32]
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 f958 	bl	8001440 <I2C_WaitOnTXEFlagUntilTimeout>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00d      	beq.n	80011b2 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	2b04      	cmp	r3, #4
 800119c:	d107      	bne.n	80011ae <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e06a      	b.n	8001288 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80011b8:	893b      	ldrh	r3, [r7, #8]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	e021      	b.n	8001208 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80011c4:	893b      	ldrh	r3, [r7, #8]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d4:	6a39      	ldr	r1, [r7, #32]
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 f932 	bl	8001440 <I2C_WaitOnTXEFlagUntilTimeout>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00d      	beq.n	80011fe <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d107      	bne.n	80011fa <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e044      	b.n	8001288 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80011fe:	893b      	ldrh	r3, [r7, #8]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800120a:	6a39      	ldr	r1, [r7, #32]
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 f917 	bl	8001440 <I2C_WaitOnTXEFlagUntilTimeout>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00d      	beq.n	8001234 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	2b04      	cmp	r3, #4
 800121e:	d107      	bne.n	8001230 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800122e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e029      	b.n	8001288 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001242:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	2200      	movs	r2, #0
 800124c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f000 f81f 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e013      	b.n	8001288 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001260:	897b      	ldrh	r3, [r7, #10]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	b2da      	uxtb	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	6a3a      	ldr	r2, [r7, #32]
 8001274:	4906      	ldr	r1, [pc, #24]	; (8001290 <I2C_RequestMemoryRead+0x19c>)
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f863 	bl	8001342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	00010002 	.word	0x00010002

08001294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	4613      	mov	r3, r2
 80012a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012a4:	e025      	b.n	80012f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ac:	d021      	beq.n	80012f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ae:	f7fe ffa5 	bl	80001fc <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d302      	bcc.n	80012c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d116      	bne.n	80012f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2220      	movs	r2, #32
 80012ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f043 0220 	orr.w	r2, r3, #32
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e023      	b.n	800133a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	0c1b      	lsrs	r3, r3, #16
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d10d      	bne.n	8001318 <I2C_WaitOnFlagUntilTimeout+0x84>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4013      	ands	r3, r2
 8001308:	b29b      	uxth	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf0c      	ite	eq
 800130e:	2301      	moveq	r3, #1
 8001310:	2300      	movne	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	e00c      	b.n	8001332 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4013      	ands	r3, r2
 8001324:	b29b      	uxth	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	429a      	cmp	r2, r3
 8001336:	d0b6      	beq.n	80012a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001350:	e051      	b.n	80013f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001360:	d123      	bne.n	80013aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001370:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800137a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2220      	movs	r2, #32
 8001386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f043 0204 	orr.w	r2, r3, #4
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e046      	b.n	8001438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013b0:	d021      	beq.n	80013f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013b2:	f7fe ff23 	bl	80001fc <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d302      	bcc.n	80013c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d116      	bne.n	80013f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2220      	movs	r2, #32
 80013d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f043 0220 	orr.w	r2, r3, #32
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e020      	b.n	8001438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	0c1b      	lsrs	r3, r3, #16
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d10c      	bne.n	800141a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4013      	ands	r3, r2
 800140c:	b29b      	uxth	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf14      	ite	ne
 8001412:	2301      	movne	r3, #1
 8001414:	2300      	moveq	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	e00b      	b.n	8001432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	43da      	mvns	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4013      	ands	r3, r2
 8001426:	b29b      	uxth	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf14      	ite	ne
 800142c:	2301      	movne	r3, #1
 800142e:	2300      	moveq	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d18d      	bne.n	8001352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800144c:	e02d      	b.n	80014aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 f8ce 	bl	80015f0 <I2C_IsAcknowledgeFailed>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e02d      	b.n	80014ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001464:	d021      	beq.n	80014aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001466:	f7fe fec9 	bl	80001fc <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	429a      	cmp	r2, r3
 8001474:	d302      	bcc.n	800147c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d116      	bne.n	80014aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2220      	movs	r2, #32
 8001486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f043 0220 	orr.w	r2, r3, #32
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e007      	b.n	80014ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b4:	2b80      	cmp	r3, #128	; 0x80
 80014b6:	d1ca      	bne.n	800144e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014ce:	e02d      	b.n	800152c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 f88d 	bl	80015f0 <I2C_IsAcknowledgeFailed>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e02d      	b.n	800153c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014e6:	d021      	beq.n	800152c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014e8:	f7fe fe88 	bl	80001fc <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d302      	bcc.n	80014fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d116      	bne.n	800152c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2220      	movs	r2, #32
 8001508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f043 0220 	orr.w	r2, r3, #32
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e007      	b.n	800153c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b04      	cmp	r3, #4
 8001538:	d1ca      	bne.n	80014d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001550:	e042      	b.n	80015d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	2b10      	cmp	r3, #16
 800155e:	d119      	bne.n	8001594 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f06f 0210 	mvn.w	r2, #16
 8001568:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2220      	movs	r2, #32
 8001574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e029      	b.n	80015e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001594:	f7fe fe32 	bl	80001fc <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d302      	bcc.n	80015aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2220      	movs	r2, #32
 80015b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f043 0220 	orr.w	r2, r3, #32
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e007      	b.n	80015e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	2b40      	cmp	r3, #64	; 0x40
 80015e4:	d1b5      	bne.n	8001552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001606:	d11b      	bne.n	8001640 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001610:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2220      	movs	r2, #32
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f043 0204 	orr.w	r2, r3, #4
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e26c      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8087 	beq.w	800177a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800166c:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b04      	cmp	r3, #4
 8001676:	d00c      	beq.n	8001692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001678:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b08      	cmp	r3, #8
 8001682:	d112      	bne.n	80016aa <HAL_RCC_OscConfig+0x5e>
 8001684:	4b8c      	ldr	r3, [pc, #560]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001690:	d10b      	bne.n	80016aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001692:	4b89      	ldr	r3, [pc, #548]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d06c      	beq.n	8001778 <HAL_RCC_OscConfig+0x12c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d168      	bne.n	8001778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e246      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x76>
 80016b4:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a7f      	ldr	r2, [pc, #508]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e02e      	b.n	8001720 <HAL_RCC_OscConfig+0xd4>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x98>
 80016ca:	4b7b      	ldr	r3, [pc, #492]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7a      	ldr	r2, [pc, #488]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b78      	ldr	r3, [pc, #480]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a77      	ldr	r2, [pc, #476]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e01d      	b.n	8001720 <HAL_RCC_OscConfig+0xd4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0xbc>
 80016ee:	4b72      	ldr	r3, [pc, #456]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a71      	ldr	r2, [pc, #452]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0xd4>
 8001708:	4b6b      	ldr	r3, [pc, #428]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a6a      	ldr	r2, [pc, #424]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800170e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a67      	ldr	r2, [pc, #412]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800171a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d013      	beq.n	8001750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7fe fd68 	bl	80001fc <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7fe fd64 	bl	80001fc <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1fa      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0xe4>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7fe fd54 	bl	80001fc <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7fe fd50 	bl	80001fc <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1e6      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x10c>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d063      	beq.n	800184e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001786:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b08      	cmp	r3, #8
 800179c:	d11c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x18c>
 800179e:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d116      	bne.n	80017d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x176>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e1ba      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4939      	ldr	r1, [pc, #228]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d6:	e03a      	b.n	800184e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e0:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7fe fd09 	bl	80001fc <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ee:	f7fe fd05 	bl	80001fc <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e19b      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4927      	ldr	r1, [pc, #156]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
 8001820:	e015      	b.n	800184e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_RCC_OscConfig+0x270>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7fe fce8 	bl	80001fc <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001830:	f7fe fce4 	bl	80001fc <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e17a      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03a      	beq.n	80018d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d019      	beq.n	8001896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7fe fcc8 	bl	80001fc <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001870:	f7fe fcc4 	bl	80001fc <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e15a      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800188e:	2001      	movs	r0, #1
 8001890:	f000 fada 	bl	8001e48 <RCC_Delay>
 8001894:	e01c      	b.n	80018d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7fe fcae 	bl	80001fc <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a2:	e00f      	b.n	80018c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a4:	f7fe fcaa 	bl	80001fc <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d908      	bls.n	80018c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e140      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	42420000 	.word	0x42420000
 80018c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b9e      	ldr	r3, [pc, #632]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1e9      	bne.n	80018a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80a6 	beq.w	8001a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e2:	4b97      	ldr	r3, [pc, #604]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10d      	bne.n	800190a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b94      	ldr	r3, [pc, #592]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a93      	ldr	r2, [pc, #588]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b91      	ldr	r3, [pc, #580]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001906:	2301      	movs	r3, #1
 8001908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190a:	4b8e      	ldr	r3, [pc, #568]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d118      	bne.n	8001948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001916:	4b8b      	ldr	r3, [pc, #556]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a8a      	ldr	r2, [pc, #552]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001922:	f7fe fc6b 	bl	80001fc <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192a:	f7fe fc67 	bl	80001fc <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b64      	cmp	r3, #100	; 0x64
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0fd      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	4b81      	ldr	r3, [pc, #516]	; (8001b44 <HAL_RCC_OscConfig+0x4f8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d106      	bne.n	800195e <HAL_RCC_OscConfig+0x312>
 8001950:	4b7b      	ldr	r3, [pc, #492]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a7a      	ldr	r2, [pc, #488]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	e02d      	b.n	80019ba <HAL_RCC_OscConfig+0x36e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0x334>
 8001966:	4b76      	ldr	r3, [pc, #472]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a75      	ldr	r2, [pc, #468]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	4b73      	ldr	r3, [pc, #460]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a72      	ldr	r2, [pc, #456]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	6213      	str	r3, [r2, #32]
 800197e:	e01c      	b.n	80019ba <HAL_RCC_OscConfig+0x36e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d10c      	bne.n	80019a2 <HAL_RCC_OscConfig+0x356>
 8001988:	4b6d      	ldr	r3, [pc, #436]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a6c      	ldr	r2, [pc, #432]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a69      	ldr	r2, [pc, #420]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	e00b      	b.n	80019ba <HAL_RCC_OscConfig+0x36e>
 80019a2:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4a66      	ldr	r2, [pc, #408]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6213      	str	r3, [r2, #32]
 80019ae:	4b64      	ldr	r3, [pc, #400]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a63      	ldr	r2, [pc, #396]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80019b4:	f023 0304 	bic.w	r3, r3, #4
 80019b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d015      	beq.n	80019ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c2:	f7fe fc1b 	bl	80001fc <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7fe fc17 	bl	80001fc <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e0ab      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e0:	4b57      	ldr	r3, [pc, #348]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ee      	beq.n	80019ca <HAL_RCC_OscConfig+0x37e>
 80019ec:	e014      	b.n	8001a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ee:	f7fe fc05 	bl	80001fc <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7fe fc01 	bl	80001fc <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e095      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ee      	bne.n	80019f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d105      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1e:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a47      	ldr	r2, [pc, #284]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8081 	beq.w	8001b36 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d061      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d146      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <HAL_RCC_OscConfig+0x4fc>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7fe fbd5 	bl	80001fc <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a56:	f7fe fbd1 	bl	80001fc <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e067      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a68:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a7e:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	492d      	ldr	r1, [pc, #180]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a19      	ldr	r1, [r3, #32]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	4927      	ldr	r1, [pc, #156]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_RCC_OscConfig+0x4fc>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7fe fba5 	bl	80001fc <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7fe fba1 	bl	80001fc <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e037      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x46a>
 8001ad4:	e02f      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_RCC_OscConfig+0x4fc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7fe fb8e 	bl	80001fc <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7fe fb8a 	bl	80001fc <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e020      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x498>
 8001b02:	e018      	b.n	8001b36 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e013      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40007000 	.word	0x40007000
 8001b48:	42420060 	.word	0x42420060

08001b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0d0      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d910      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4965      	ldr	r1, [pc, #404]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0b8      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba8:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc0:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	494d      	ldr	r1, [pc, #308]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d040      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d115      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e07f      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e073      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e06b      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4936      	ldr	r1, [pc, #216]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7fe fade 	bl	80001fc <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7fe fada 	bl	80001fc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e053      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d210      	bcs.n	8001c9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 0207 	bic.w	r2, r3, #7
 8001c82:	4922      	ldr	r1, [pc, #136]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e032      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4916      	ldr	r1, [pc, #88]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	490e      	ldr	r1, [pc, #56]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cda:	f000 f821 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cde:	4601      	mov	r1, r0
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cec:	5cd3      	ldrb	r3, [r2, r3]
 8001cee:	fa21 f303 	lsr.w	r3, r1, r3
 8001cf2:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1cc>)
 8001cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1d0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fa3c 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	0800333c 	.word	0x0800333c
 8001d18:	20000008 	.word	0x20000008
 8001d1c:	20000000 	.word	0x20000000

08001d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b490      	push	{r4, r7}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d28:	1d3c      	adds	r4, r7, #4
 8001d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x40>
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d003      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x46>
 8001d5e:	e02d      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d62:	623b      	str	r3, [r7, #32]
      break;
 8001d64:	e02d      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	0c9b      	lsrs	r3, r3, #18
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d72:	4413      	add	r3, r2
 8001d74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	0c5b      	lsrs	r3, r3, #17
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d92:	4413      	add	r3, r2
 8001d94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d9e:	fb02 f203 	mul.w	r2, r2, r3
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	e004      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001db0:	fb02 f303 	mul.w	r3, r2, r3
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	623b      	str	r3, [r7, #32]
      break;
 8001dba:	e002      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dbe:	623b      	str	r3, [r7, #32]
      break;
 8001dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc90      	pop	{r4, r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	080032fc 	.word	0x080032fc
 8001dd4:	0800330c 	.word	0x0800330c
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	007a1200 	.word	0x007a1200
 8001de0:	003d0900 	.word	0x003d0900

08001de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de8:	4b02      	ldr	r3, [pc, #8]	; (8001df4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	20000008 	.word	0x20000008

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dfc:	f7ff fff2 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e00:	4601      	mov	r1, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4a03      	ldr	r2, [pc, #12]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	0800334c 	.word	0x0800334c

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e24:	f7ff ffde 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e28:	4601      	mov	r1, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	0adb      	lsrs	r3, r3, #11
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4a03      	ldr	r2, [pc, #12]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e36:	5cd3      	ldrb	r3, [r2, r3]
 8001e38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	0800334c 	.word	0x0800334c

08001e48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <RCC_Delay+0x34>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <RCC_Delay+0x38>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0a5b      	lsrs	r3, r3, #9
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e64:	bf00      	nop
  }
  while (Delay --);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1e5a      	subs	r2, r3, #1
 8001e6a:	60fa      	str	r2, [r7, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f9      	bne.n	8001e64 <RCC_Delay+0x1c>
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	10624dd3 	.word	0x10624dd3

08001e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e03f      	b.n	8001f16 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fcda 	bl	8002864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	; 0x24
 8001eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f829 	bl	8001f20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f5a:	f023 030c 	bic.w	r3, r3, #12
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	68f9      	ldr	r1, [r7, #12]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a52      	ldr	r2, [pc, #328]	; (80020cc <UART_SetConfig+0x1ac>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d14e      	bne.n	8002026 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f88:	f7ff ff4a 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8001f8c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	009a      	lsls	r2, r3, #2
 8001f98:	441a      	add	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <UART_SetConfig+0x1b0>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	0119      	lsls	r1, r3, #4
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009a      	lsls	r2, r3, #2
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc4:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <UART_SetConfig+0x1b0>)
 8001fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2064      	movs	r0, #100	; 0x64
 8001fce:	fb00 f303 	mul.w	r3, r0, r3
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	3332      	adds	r3, #50	; 0x32
 8001fd8:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <UART_SetConfig+0x1b0>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe4:	4419      	add	r1, r3
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	009a      	lsls	r2, r3, #2
 8001ff0:	441a      	add	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ffc:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <UART_SetConfig+0x1b0>)
 8001ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2064      	movs	r0, #100	; 0x64
 8002006:	fb00 f303 	mul.w	r3, r0, r3
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	3332      	adds	r3, #50	; 0x32
 8002010:	4a2f      	ldr	r2, [pc, #188]	; (80020d0 <UART_SetConfig+0x1b0>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	f003 020f 	and.w	r2, r3, #15
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	440a      	add	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002024:	e04d      	b.n	80020c2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002026:	f7ff fee7 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 800202a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	009a      	lsls	r2, r3, #2
 8002036:	441a      	add	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <UART_SetConfig+0x1b0>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	0119      	lsls	r1, r3, #4
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	009a      	lsls	r2, r3, #2
 8002056:	441a      	add	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <UART_SetConfig+0x1b0>)
 8002064:	fba3 0302 	umull	r0, r3, r3, r2
 8002068:	095b      	lsrs	r3, r3, #5
 800206a:	2064      	movs	r0, #100	; 0x64
 800206c:	fb00 f303 	mul.w	r3, r0, r3
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	3332      	adds	r3, #50	; 0x32
 8002076:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <UART_SetConfig+0x1b0>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	095b      	lsrs	r3, r3, #5
 800207e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002082:	4419      	add	r1, r3
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	009a      	lsls	r2, r3, #2
 800208e:	441a      	add	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	fbb2 f2f3 	udiv	r2, r2, r3
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <UART_SetConfig+0x1b0>)
 800209c:	fba3 0302 	umull	r0, r3, r3, r2
 80020a0:	095b      	lsrs	r3, r3, #5
 80020a2:	2064      	movs	r0, #100	; 0x64
 80020a4:	fb00 f303 	mul.w	r3, r0, r3
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	3332      	adds	r3, #50	; 0x32
 80020ae:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <UART_SetConfig+0x1b0>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	f003 020f 	and.w	r2, r3, #15
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	440a      	add	r2, r1
 80020c0:	609a      	str	r2, [r3, #8]
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40013800 	.word	0x40013800
 80020d0:	51eb851f 	.word	0x51eb851f

080020d4 <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;


uint8_t bcd2bin(uint8_t data){
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	b2db      	uxtb	r3, r3
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <rtc_write>:
	
	return data;
}

void rtc_write(uint8_t address,uint8_t data)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af04      	add	r7, sp, #16
 800210a:	4603      	mov	r3, r0
 800210c:	460a      	mov	r2, r1
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	4613      	mov	r3, r2
 8002112:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,address,I2C_MEMADD_SIZE_8BIT,&data,1,100)!=HAL_OK){
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	b29a      	uxth	r2, r3
 8002118:	2364      	movs	r3, #100	; 0x64
 800211a:	9302      	str	r3, [sp, #8]
 800211c:	2301      	movs	r3, #1
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	1dbb      	adds	r3, r7, #6
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2301      	movs	r3, #1
 8002126:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <rtc_write+0x40>)
 800212c:	f7fe fc28 	bl	8000980 <HAL_I2C_Mem_Write>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <rtc_write+0x36>
		Error_Handler();
 8002136:	f000 fb15 	bl	8002764 <Error_Handler>
	}
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200000ac 	.word	0x200000ac

08002148 <rtc_init>:

void rtc_init(uint8_t rs,uint8_t sqwe,uint8_t out)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	460b      	mov	r3, r1
 8002154:	71bb      	strb	r3, [r7, #6]
 8002156:	4613      	mov	r3, r2
 8002158:	717b      	strb	r3, [r7, #5]
	rs&=3;
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	71fb      	strb	r3, [r7, #7]
	if (sqwe) rs|=0x10;
 8002162:	79bb      	ldrb	r3, [r7, #6]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <rtc_init+0x28>
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	f043 0310 	orr.w	r3, r3, #16
 800216e:	71fb      	strb	r3, [r7, #7]
	if (out) rs|=0x80;
 8002170:	797b      	ldrb	r3, [r7, #5]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <rtc_init+0x36>
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800217c:	71fb      	strb	r3, [r7, #7]
	
	rtc_write(0x07,rs);
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	4619      	mov	r1, r3
 8002182:	2007      	movs	r0, #7
 8002184:	f7ff ffbe 	bl	8002104 <rtc_write>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <rtc_get_time>:

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af04      	add	r7, sp, #16
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 800219c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	2303      	movs	r3, #3
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	2200      	movs	r2, #0
 80021b0:	f64f 71d0 	movw	r1, #65488	; 0xffd0
 80021b4:	4811      	ldr	r0, [pc, #68]	; (80021fc <rtc_get_time+0x6c>)
 80021b6:	f7fe fcdd 	bl	8000b74 <HAL_I2C_Mem_Read>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <rtc_get_time+0x34>
		Error_Handler();
 80021c0:	f000 fad0 	bl	8002764 <Error_Handler>
	}	

	*sec=bcd2bin(data[0]);
 80021c4:	7d3b      	ldrb	r3, [r7, #20]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff84 	bl	80020d4 <bcd2bin>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461a      	mov	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 80021d4:	7d7b      	ldrb	r3, [r7, #21]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff7c 	bl	80020d4 <bcd2bin>
 80021dc:	4603      	mov	r3, r0
 80021de:	461a      	mov	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 80021e4:	7dbb      	ldrb	r3, [r7, #22]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff74 	bl	80020d4 <bcd2bin>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	701a      	strb	r2, [r3, #0]
}
 80021f4:	bf00      	nop
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200000ac 	.word	0x200000ac

08002200 <delay_us>:
#include "lcd_1602.h"

static void delay_us(uint32_t delay){
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	delay*=32;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	015b      	lsls	r3, r3, #5
 800220c:	607b      	str	r3, [r7, #4]
	while(delay--);
 800220e:	bf00      	nop
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	1e5a      	subs	r2, r3, #1
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1fa      	bne.n	8002210 <delay_us+0x10>
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <lcd_send_8bit>:

 void lcd_send_8bit(uint8_t data){
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
	
	if(data & 0x01) D0(1); else D0(0);
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <lcd_send_8bit+0x20>
 8002238:	2201      	movs	r2, #1
 800223a:	2101      	movs	r1, #1
 800223c:	483d      	ldr	r0, [pc, #244]	; (8002334 <lcd_send_8bit+0x110>)
 800223e:	f7fe fa47 	bl	80006d0 <HAL_GPIO_WritePin>
 8002242:	e004      	b.n	800224e <lcd_send_8bit+0x2a>
 8002244:	2200      	movs	r2, #0
 8002246:	2101      	movs	r1, #1
 8002248:	483a      	ldr	r0, [pc, #232]	; (8002334 <lcd_send_8bit+0x110>)
 800224a:	f7fe fa41 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x02) D1(1); else D1(0);
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <lcd_send_8bit+0x40>
 8002258:	2201      	movs	r2, #1
 800225a:	2102      	movs	r1, #2
 800225c:	4835      	ldr	r0, [pc, #212]	; (8002334 <lcd_send_8bit+0x110>)
 800225e:	f7fe fa37 	bl	80006d0 <HAL_GPIO_WritePin>
 8002262:	e004      	b.n	800226e <lcd_send_8bit+0x4a>
 8002264:	2200      	movs	r2, #0
 8002266:	2102      	movs	r1, #2
 8002268:	4832      	ldr	r0, [pc, #200]	; (8002334 <lcd_send_8bit+0x110>)
 800226a:	f7fe fa31 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x04) D2(1); else D2(0);
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <lcd_send_8bit+0x60>
 8002278:	2201      	movs	r2, #1
 800227a:	2104      	movs	r1, #4
 800227c:	482d      	ldr	r0, [pc, #180]	; (8002334 <lcd_send_8bit+0x110>)
 800227e:	f7fe fa27 	bl	80006d0 <HAL_GPIO_WritePin>
 8002282:	e004      	b.n	800228e <lcd_send_8bit+0x6a>
 8002284:	2200      	movs	r2, #0
 8002286:	2104      	movs	r1, #4
 8002288:	482a      	ldr	r0, [pc, #168]	; (8002334 <lcd_send_8bit+0x110>)
 800228a:	f7fe fa21 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x08) D3(1); else D3(0);
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <lcd_send_8bit+0x80>
 8002298:	2201      	movs	r2, #1
 800229a:	2108      	movs	r1, #8
 800229c:	4825      	ldr	r0, [pc, #148]	; (8002334 <lcd_send_8bit+0x110>)
 800229e:	f7fe fa17 	bl	80006d0 <HAL_GPIO_WritePin>
 80022a2:	e004      	b.n	80022ae <lcd_send_8bit+0x8a>
 80022a4:	2200      	movs	r2, #0
 80022a6:	2108      	movs	r1, #8
 80022a8:	4822      	ldr	r0, [pc, #136]	; (8002334 <lcd_send_8bit+0x110>)
 80022aa:	f7fe fa11 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x10) D4(1); else D4(0);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <lcd_send_8bit+0xa0>
 80022b8:	2201      	movs	r2, #1
 80022ba:	2110      	movs	r1, #16
 80022bc:	481d      	ldr	r0, [pc, #116]	; (8002334 <lcd_send_8bit+0x110>)
 80022be:	f7fe fa07 	bl	80006d0 <HAL_GPIO_WritePin>
 80022c2:	e004      	b.n	80022ce <lcd_send_8bit+0xaa>
 80022c4:	2200      	movs	r2, #0
 80022c6:	2110      	movs	r1, #16
 80022c8:	481a      	ldr	r0, [pc, #104]	; (8002334 <lcd_send_8bit+0x110>)
 80022ca:	f7fe fa01 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x20) D5(1); else D5(0);
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <lcd_send_8bit+0xc0>
 80022d8:	2201      	movs	r2, #1
 80022da:	2120      	movs	r1, #32
 80022dc:	4815      	ldr	r0, [pc, #84]	; (8002334 <lcd_send_8bit+0x110>)
 80022de:	f7fe f9f7 	bl	80006d0 <HAL_GPIO_WritePin>
 80022e2:	e004      	b.n	80022ee <lcd_send_8bit+0xca>
 80022e4:	2200      	movs	r2, #0
 80022e6:	2120      	movs	r1, #32
 80022e8:	4812      	ldr	r0, [pc, #72]	; (8002334 <lcd_send_8bit+0x110>)
 80022ea:	f7fe f9f1 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x40) D6(1); else D6(0);
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <lcd_send_8bit+0xe0>
 80022f8:	2201      	movs	r2, #1
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	480d      	ldr	r0, [pc, #52]	; (8002334 <lcd_send_8bit+0x110>)
 80022fe:	f7fe f9e7 	bl	80006d0 <HAL_GPIO_WritePin>
 8002302:	e004      	b.n	800230e <lcd_send_8bit+0xea>
 8002304:	2200      	movs	r2, #0
 8002306:	2140      	movs	r1, #64	; 0x40
 8002308:	480a      	ldr	r0, [pc, #40]	; (8002334 <lcd_send_8bit+0x110>)
 800230a:	f7fe f9e1 	bl	80006d0 <HAL_GPIO_WritePin>
	if(data & 0x80) D7(1); else D7(0);
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	2b00      	cmp	r3, #0
 8002314:	da05      	bge.n	8002322 <lcd_send_8bit+0xfe>
 8002316:	2201      	movs	r2, #1
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	4806      	ldr	r0, [pc, #24]	; (8002334 <lcd_send_8bit+0x110>)
 800231c:	f7fe f9d8 	bl	80006d0 <HAL_GPIO_WritePin>
}
 8002320:	e004      	b.n	800232c <lcd_send_8bit+0x108>
	if(data & 0x80) D7(1); else D7(0);
 8002322:	2200      	movs	r2, #0
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	4803      	ldr	r0, [pc, #12]	; (8002334 <lcd_send_8bit+0x110>)
 8002328:	f7fe f9d2 	bl	80006d0 <HAL_GPIO_WritePin>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40010800 	.word	0x40010800

08002338 <lcd_send>:

 void lcd_send(int8_t rs,uint8_t data){
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	460a      	mov	r2, r1
 8002342:	71fb      	strb	r3, [r7, #7]
 8002344:	4613      	mov	r3, r2
 8002346:	71bb      	strb	r3, [r7, #6]
	RS(rs);
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <lcd_send+0x24>
 8002350:	2201      	movs	r2, #1
 8002352:	2101      	movs	r1, #1
 8002354:	480e      	ldr	r0, [pc, #56]	; (8002390 <lcd_send+0x58>)
 8002356:	f7fe f9bb 	bl	80006d0 <HAL_GPIO_WritePin>
 800235a:	e004      	b.n	8002366 <lcd_send+0x2e>
 800235c:	2200      	movs	r2, #0
 800235e:	2101      	movs	r1, #1
 8002360:	480b      	ldr	r0, [pc, #44]	; (8002390 <lcd_send+0x58>)
 8002362:	f7fe f9b5 	bl	80006d0 <HAL_GPIO_WritePin>
	lcd_send_8bit(data);
 8002366:	79bb      	ldrb	r3, [r7, #6]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff5b 	bl	8002224 <lcd_send_8bit>
	EN(1);delay_us(100);EN(0);
 800236e:	2201      	movs	r2, #1
 8002370:	2102      	movs	r1, #2
 8002372:	4807      	ldr	r0, [pc, #28]	; (8002390 <lcd_send+0x58>)
 8002374:	f7fe f9ac 	bl	80006d0 <HAL_GPIO_WritePin>
 8002378:	2064      	movs	r0, #100	; 0x64
 800237a:	f7ff ff41 	bl	8002200 <delay_us>
 800237e:	2200      	movs	r2, #0
 8002380:	2102      	movs	r1, #2
 8002382:	4803      	ldr	r0, [pc, #12]	; (8002390 <lcd_send+0x58>)
 8002384:	f7fe f9a4 	bl	80006d0 <HAL_GPIO_WritePin>
	
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40010c00 	.word	0x40010c00

08002394 <lcd_data>:

void lcd_cmd(uint8_t command){
	lcd_send(1,command);
}

void lcd_data(char c){
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
	lcd_send(1,(uint8_t)c);
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	4619      	mov	r1, r3
 80023a2:	2001      	movs	r0, #1
 80023a4:	f7ff ffc8 	bl	8002338 <lcd_send>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <lcd_init>:

void lcd_init(void){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	
	lcd_send(0,0x33);
 80023b4:	2133      	movs	r1, #51	; 0x33
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7ff ffbe 	bl	8002338 <lcd_send>
  lcd_send(0,0x32);
 80023bc:	2132      	movs	r1, #50	; 0x32
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff ffba 	bl	8002338 <lcd_send>
  lcd_send(0,0x38);
 80023c4:	2138      	movs	r1, #56	; 0x38
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff ffb6 	bl	8002338 <lcd_send>
  lcd_send(0,0x0C);
 80023cc:	210c      	movs	r1, #12
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7ff ffb2 	bl	8002338 <lcd_send>
  lcd_send(0,0x06);
 80023d4:	2106      	movs	r1, #6
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7ff ffae 	bl	8002338 <lcd_send>
  lcd_send(0,0x01);
 80023dc:	2101      	movs	r1, #1
 80023de:	2000      	movs	r0, #0
 80023e0:	f7ff ffaa 	bl	8002338 <lcd_send>
	HAL_Delay(10);
 80023e4:	200a      	movs	r0, #10
 80023e6:	f7fd ff13 	bl	8000210 <HAL_Delay>
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}

080023ee <lcd_clr>:

void lcd_clr(void){
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0
    lcd_send(0,0x01);
 80023f2:	2101      	movs	r1, #1
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff ff9f 	bl	8002338 <lcd_send>
    HAL_Delay(3);
 80023fa:	2003      	movs	r0, #3
 80023fc:	f7fd ff08 	bl	8000210 <HAL_Delay>
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}

08002404 <lcd_gotoxy>:


void lcd_gotoxy(char x, char y){
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	460a      	mov	r2, r1
 800240e:	71fb      	strb	r3, [r7, #7]
 8002410:	4613      	mov	r3, r2
 8002412:	71bb      	strb	r3, [r7, #6]
	
					if(x==0)  lcd_send(0,0x80+y);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d107      	bne.n	800242a <lcd_gotoxy+0x26>
 800241a:	79bb      	ldrb	r3, [r7, #6]
 800241c:	3b80      	subs	r3, #128	; 0x80
 800241e:	b2db      	uxtb	r3, r3
 8002420:	4619      	mov	r1, r3
 8002422:	2000      	movs	r0, #0
 8002424:	f7ff ff88 	bl	8002338 <lcd_send>
			else if (x == 1) lcd_send(0,0xc0+y);
	
}
 8002428:	e009      	b.n	800243e <lcd_gotoxy+0x3a>
			else if (x == 1) lcd_send(0,0xc0+y);
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <lcd_gotoxy+0x3a>
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	3b40      	subs	r3, #64	; 0x40
 8002434:	b2db      	uxtb	r3, r3
 8002436:	4619      	mov	r1, r3
 8002438:	2000      	movs	r0, #0
 800243a:	f7ff ff7d 	bl	8002338 <lcd_send>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <lcd_puts>:

void lcd_puts(char *text){
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
    while(*text){
 800244e:	e007      	b.n	8002460 <lcd_puts+0x1a>
        lcd_data(*text);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff9d 	bl	8002394 <lcd_data>
        text++;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3301      	adds	r3, #1
 800245e:	607b      	str	r3, [r7, #4]
    while(*text){
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f3      	bne.n	8002450 <lcd_puts+0xa>
    }
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002476:	f7fd fe69 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247a:	f000 f853 	bl	8002524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247e:	f000 f8ef 	bl	8002660 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002482:	f000 f895 	bl	80025b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002486:	f000 f8c1 	bl	800260c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 800248a:	f7ff ff91 	bl	80023b0 <lcd_init>
  lcd_clr();
 800248e:	f7ff ffae 	bl	80023ee <lcd_clr>
  lcd_puts("---");
 8002492:	481c      	ldr	r0, [pc, #112]	; (8002504 <main+0x94>)
 8002494:	f7ff ffd7 	bl	8002446 <lcd_puts>
  rtc_init(0, 1, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2101      	movs	r1, #1
 800249c:	2000      	movs	r0, #0
 800249e:	f7ff fe53 	bl	8002148 <rtc_init>
  HAL_Delay(2000);
 80024a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024a6:	f7fd feb3 	bl	8000210 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_clr();
 80024aa:	f7ff ffa0 	bl	80023ee <lcd_clr>
	  rtc_get_time(&hour, &min, &sec);
 80024ae:	4a16      	ldr	r2, [pc, #88]	; (8002508 <main+0x98>)
 80024b0:	4916      	ldr	r1, [pc, #88]	; (800250c <main+0x9c>)
 80024b2:	4817      	ldr	r0, [pc, #92]	; (8002510 <main+0xa0>)
 80024b4:	f7ff fe6c 	bl	8002190 <rtc_get_time>
	  lcd_gotoxy(0, 0);
 80024b8:	2100      	movs	r1, #0
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff ffa2 	bl	8002404 <lcd_gotoxy>

	  lcd_puts("Ola k ase:");
 80024c0:	4814      	ldr	r0, [pc, #80]	; (8002514 <main+0xa4>)
 80024c2:	f7ff ffc0 	bl	8002446 <lcd_puts>
	  lcd_gotoxy(1, 0);
 80024c6:	2100      	movs	r1, #0
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7ff ff9b 	bl	8002404 <lcd_gotoxy>
	  sprintf(buffer, "HORA: %d:%d:%d", hour, min, sec);
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <main+0xa0>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b0d      	ldr	r3, [pc, #52]	; (800250c <main+0x9c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <main+0x98>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	460b      	mov	r3, r1
 80024e2:	490d      	ldr	r1, [pc, #52]	; (8002518 <main+0xa8>)
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <main+0xac>)
 80024e6:	f000 faeb 	bl	8002ac0 <siprintf>
	  lcd_puts(buffer);
 80024ea:	480c      	ldr	r0, [pc, #48]	; (800251c <main+0xac>)
 80024ec:	f7ff ffab 	bl	8002446 <lcd_puts>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80024f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024f4:	480a      	ldr	r0, [pc, #40]	; (8002520 <main+0xb0>)
 80024f6:	f7fe f903 	bl	8000700 <HAL_GPIO_TogglePin>

	  HAL_Delay(500);
 80024fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024fe:	f7fd fe87 	bl	8000210 <HAL_Delay>
	  lcd_clr();
 8002502:	e7d2      	b.n	80024aa <main+0x3a>
 8002504:	08003310 	.word	0x08003310
 8002508:	2000017e 	.word	0x2000017e
 800250c:	2000017c 	.word	0x2000017c
 8002510:	2000017a 	.word	0x2000017a
 8002514:	08003314 	.word	0x08003314
 8002518:	08003320 	.word	0x08003320
 800251c:	20000148 	.word	0x20000148
 8002520:	40011000 	.word	0x40011000

08002524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b090      	sub	sp, #64	; 0x40
 8002528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252a:	f107 0318 	add.w	r3, r7, #24
 800252e:	2228      	movs	r2, #40	; 0x28
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f000 fabc 	bl	8002ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	60da      	str	r2, [r3, #12]
 8002544:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002546:	2301      	movs	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800254a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800254e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002554:	2301      	movs	r3, #1
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002558:	2302      	movs	r3, #2
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800255c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002562:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002568:	f107 0318 	add.w	r3, r7, #24
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff f86d 	bl	800164c <HAL_RCC_OscConfig>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002578:	f000 f8f4 	bl	8002764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800257c:	230f      	movs	r3, #15
 800257e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002580:	2302      	movs	r3, #2
 8002582:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800258c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2102      	movs	r1, #2
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fad8 	bl	8001b4c <HAL_RCC_ClockConfig>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80025a2:	f000 f8df 	bl	8002764 <Error_Handler>
  }
}
 80025a6:	bf00      	nop
 80025a8:	3740      	adds	r7, #64	; 0x40
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <MX_I2C1_Init+0x50>)
 80025b6:	4a13      	ldr	r2, [pc, #76]	; (8002604 <MX_I2C1_Init+0x54>)
 80025b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <MX_I2C1_Init+0x50>)
 80025bc:	4a12      	ldr	r2, [pc, #72]	; (8002608 <MX_I2C1_Init+0x58>)
 80025be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <MX_I2C1_Init+0x50>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <MX_I2C1_Init+0x50>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <MX_I2C1_Init+0x50>)
 80025ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <MX_I2C1_Init+0x50>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <MX_I2C1_Init+0x50>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <MX_I2C1_Init+0x50>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <MX_I2C1_Init+0x50>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025ec:	4804      	ldr	r0, [pc, #16]	; (8002600 <MX_I2C1_Init+0x50>)
 80025ee:	f7fe f89f 	bl	8000730 <HAL_I2C_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025f8:	f000 f8b4 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200000ac 	.word	0x200000ac
 8002604:	40005400 	.word	0x40005400
 8002608:	00061a80 	.word	0x00061a80

0800260c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <MX_USART1_UART_Init+0x4c>)
 8002612:	4a12      	ldr	r2, [pc, #72]	; (800265c <MX_USART1_UART_Init+0x50>)
 8002614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <MX_USART1_UART_Init+0x4c>)
 8002618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800261c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <MX_USART1_UART_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <MX_USART1_UART_Init+0x4c>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <MX_USART1_UART_Init+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <MX_USART1_UART_Init+0x4c>)
 8002632:	220c      	movs	r2, #12
 8002634:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <MX_USART1_UART_Init+0x4c>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <MX_USART1_UART_Init+0x4c>)
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002642:	4805      	ldr	r0, [pc, #20]	; (8002658 <MX_USART1_UART_Init+0x4c>)
 8002644:	f7ff fc1e 	bl	8001e84 <HAL_UART_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800264e:	f000 f889 	bl	8002764 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000108 	.word	0x20000108
 800265c:	40013800 	.word	0x40013800

08002660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002674:	4b37      	ldr	r3, [pc, #220]	; (8002754 <MX_GPIO_Init+0xf4>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4a36      	ldr	r2, [pc, #216]	; (8002754 <MX_GPIO_Init+0xf4>)
 800267a:	f043 0310 	orr.w	r3, r3, #16
 800267e:	6193      	str	r3, [r2, #24]
 8002680:	4b34      	ldr	r3, [pc, #208]	; (8002754 <MX_GPIO_Init+0xf4>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800268c:	4b31      	ldr	r3, [pc, #196]	; (8002754 <MX_GPIO_Init+0xf4>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a30      	ldr	r2, [pc, #192]	; (8002754 <MX_GPIO_Init+0xf4>)
 8002692:	f043 0320 	orr.w	r3, r3, #32
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b2e      	ldr	r3, [pc, #184]	; (8002754 <MX_GPIO_Init+0xf4>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <MX_GPIO_Init+0xf4>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a2a      	ldr	r2, [pc, #168]	; (8002754 <MX_GPIO_Init+0xf4>)
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b28      	ldr	r3, [pc, #160]	; (8002754 <MX_GPIO_Init+0xf4>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <MX_GPIO_Init+0xf4>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a24      	ldr	r2, [pc, #144]	; (8002754 <MX_GPIO_Init+0xf4>)
 80026c2:	f043 0308 	orr.w	r3, r3, #8
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <MX_GPIO_Init+0xf4>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026d4:	2200      	movs	r2, #0
 80026d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026da:	481f      	ldr	r0, [pc, #124]	; (8002758 <MX_GPIO_Init+0xf8>)
 80026dc:	f7fd fff8 	bl	80006d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin 
 80026e0:	2200      	movs	r2, #0
 80026e2:	21ff      	movs	r1, #255	; 0xff
 80026e4:	481d      	ldr	r0, [pc, #116]	; (800275c <MX_GPIO_Init+0xfc>)
 80026e6:	f7fd fff3 	bl	80006d0 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|EN_Pin, GPIO_PIN_RESET);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2103      	movs	r1, #3
 80026ee:	481c      	ldr	r0, [pc, #112]	; (8002760 <MX_GPIO_Init+0x100>)
 80026f0:	f7fd ffee 	bl	80006d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80026f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fa:	2301      	movs	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2302      	movs	r3, #2
 8002704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002706:	f107 0310 	add.w	r3, r7, #16
 800270a:	4619      	mov	r1, r3
 800270c:	4812      	ldr	r0, [pc, #72]	; (8002758 <MX_GPIO_Init+0xf8>)
 800270e:	f7fd fe85 	bl	800041c <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin 
                           D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin 
 8002712:	23ff      	movs	r3, #255	; 0xff
 8002714:	613b      	str	r3, [r7, #16]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002716:	2301      	movs	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2302      	movs	r3, #2
 8002720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	4619      	mov	r1, r3
 8002728:	480c      	ldr	r0, [pc, #48]	; (800275c <MX_GPIO_Init+0xfc>)
 800272a:	f7fd fe77 	bl	800041c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|EN_Pin;
 800272e:	2303      	movs	r3, #3
 8002730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	2301      	movs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2302      	movs	r3, #2
 800273c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273e:	f107 0310 	add.w	r3, r7, #16
 8002742:	4619      	mov	r1, r3
 8002744:	4806      	ldr	r0, [pc, #24]	; (8002760 <MX_GPIO_Init+0x100>)
 8002746:	f7fd fe69 	bl	800041c <HAL_GPIO_Init>

}
 800274a:	bf00      	nop
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	40011000 	.word	0x40011000
 800275c:	40010800 	.word	0x40010800
 8002760:	40010c00 	.word	0x40010c00

08002764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	lcd_clr();
 8002768:	f7ff fe41 	bl	80023ee <lcd_clr>
	lcd_gotoxy(0, 0);
 800276c:	2100      	movs	r1, #0
 800276e:	2000      	movs	r0, #0
 8002770:	f7ff fe48 	bl	8002404 <lcd_gotoxy>
	lcd_puts("FAILED RTC");
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <Error_Handler+0x1c>)
 8002776:	f7ff fe66 	bl	8002446 <lcd_puts>
  /* USER CODE END Error_Handler_Debug */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	08003330 	.word	0x08003330

08002784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_MspInit+0x5c>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_MspInit+0x5c>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6193      	str	r3, [r2, #24]
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_MspInit+0x5c>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_MspInit+0x5c>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <HAL_MspInit+0x5c>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ac:	61d3      	str	r3, [r2, #28]
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_MspInit+0x5c>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_MspInit+0x60>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_MspInit+0x60>)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010000 	.word	0x40010000

080027e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a15      	ldr	r2, [pc, #84]	; (8002858 <HAL_I2C_MspInit+0x70>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d123      	bne.n	8002850 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <HAL_I2C_MspInit+0x74>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a13      	ldr	r2, [pc, #76]	; (800285c <HAL_I2C_MspInit+0x74>)
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	6193      	str	r3, [r2, #24]
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <HAL_I2C_MspInit+0x74>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8002820:	23c0      	movs	r3, #192	; 0xc0
 8002822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002824:	2312      	movs	r3, #18
 8002826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	4619      	mov	r1, r3
 8002832:	480b      	ldr	r0, [pc, #44]	; (8002860 <HAL_I2C_MspInit+0x78>)
 8002834:	f7fd fdf2 	bl	800041c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_I2C_MspInit+0x74>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	4a07      	ldr	r2, [pc, #28]	; (800285c <HAL_I2C_MspInit+0x74>)
 800283e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002842:	61d3      	str	r3, [r2, #28]
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_I2C_MspInit+0x74>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002850:	bf00      	nop
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40005400 	.word	0x40005400
 800285c:	40021000 	.word	0x40021000
 8002860:	40010c00 	.word	0x40010c00

08002864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 0310 	add.w	r3, r7, #16
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <HAL_UART_MspInit+0x8c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d131      	bne.n	80028e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_UART_MspInit+0x90>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <HAL_UART_MspInit+0x90>)
 800288a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_UART_MspInit+0x90>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289c:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_UART_MspInit+0x90>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <HAL_UART_MspInit+0x90>)
 80028a2:	f043 0304 	orr.w	r3, r3, #4
 80028a6:	6193      	str	r3, [r2, #24]
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_UART_MspInit+0x90>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = TX_Pin;
 80028b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028be:	2303      	movs	r3, #3
 80028c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 80028c2:	f107 0310 	add.w	r3, r7, #16
 80028c6:	4619      	mov	r1, r3
 80028c8:	480b      	ldr	r0, [pc, #44]	; (80028f8 <HAL_UART_MspInit+0x94>)
 80028ca:	f7fd fda7 	bl	800041c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 80028ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	4619      	mov	r1, r3
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <HAL_UART_MspInit+0x94>)
 80028e4:	f7fd fd9a 	bl	800041c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028e8:	bf00      	nop
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40013800 	.word	0x40013800
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40010800 	.word	0x40010800

080028fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290c:	e7fe      	b.n	800290c <HardFault_Handler+0x4>

0800290e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002912:	e7fe      	b.n	8002912 <MemManage_Handler+0x4>

08002914 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002918:	e7fe      	b.n	8002918 <BusFault_Handler+0x4>

0800291a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800291e:	e7fe      	b.n	800291e <UsageFault_Handler+0x4>

08002920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002948:	f7fd fc46 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}

08002950 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <_sbrk+0x50>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <_sbrk+0x16>
		heap_end = &end;
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <_sbrk+0x50>)
 8002962:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <_sbrk+0x54>)
 8002964:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <_sbrk+0x50>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <_sbrk+0x50>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	466a      	mov	r2, sp
 8002976:	4293      	cmp	r3, r2
 8002978:	d907      	bls.n	800298a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800297a:	f000 f86f 	bl	8002a5c <__errno>
 800297e:	4602      	mov	r2, r0
 8002980:	230c      	movs	r3, #12
 8002982:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002988:	e006      	b.n	8002998 <_sbrk+0x48>
	}

	heap_end += incr;
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <_sbrk+0x50>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	4a03      	ldr	r2, [pc, #12]	; (80029a0 <_sbrk+0x50>)
 8002994:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002996:	68fb      	ldr	r3, [r7, #12]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000008c 	.word	0x2000008c
 80029a4:	20000188 	.word	0x20000188

080029a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029ac:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <SystemInit+0x5c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <SystemInit+0x5c>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <SystemInit+0x5c>)
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4911      	ldr	r1, [pc, #68]	; (8002a04 <SystemInit+0x5c>)
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <SystemInit+0x60>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <SystemInit+0x5c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <SystemInit+0x5c>)
 80029ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <SystemInit+0x5c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <SystemInit+0x5c>)
 80029da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <SystemInit+0x5c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <SystemInit+0x5c>)
 80029e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80029ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <SystemInit+0x5c>)
 80029ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80029f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <SystemInit+0x64>)
 80029f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	40021000 	.word	0x40021000
 8002a08:	f8ff0000 	.word	0xf8ff0000
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a12:	e003      	b.n	8002a1c <LoopCopyDataInit>

08002a14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a1a:	3104      	adds	r1, #4

08002a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a1c:	480a      	ldr	r0, [pc, #40]	; (8002a48 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a24:	d3f6      	bcc.n	8002a14 <CopyDataInit>
  ldr r2, =_sbss
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a28:	e002      	b.n	8002a30 <LoopFillZerobss>

08002a2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a2c:	f842 3b04 	str.w	r3, [r2], #4

08002a30 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a34:	d3f9      	bcc.n	8002a2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a36:	f7ff ffb7 	bl	80029a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a3a:	f000 f815 	bl	8002a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a3e:	f7ff fd17 	bl	8002470 <main>
  bx lr
 8002a42:	4770      	bx	lr
  ldr r3, =_sidata
 8002a44:	08003390 	.word	0x08003390
  ldr r0, =_sdata
 8002a48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a4c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002a50:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002a54:	20000184 	.word	0x20000184

08002a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a58:	e7fe      	b.n	8002a58 <ADC1_2_IRQHandler>
	...

08002a5c <__errno>:
 8002a5c:	4b01      	ldr	r3, [pc, #4]	; (8002a64 <__errno+0x8>)
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	2000000c 	.word	0x2000000c

08002a68 <__libc_init_array>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	2500      	movs	r5, #0
 8002a6c:	4e0c      	ldr	r6, [pc, #48]	; (8002aa0 <__libc_init_array+0x38>)
 8002a6e:	4c0d      	ldr	r4, [pc, #52]	; (8002aa4 <__libc_init_array+0x3c>)
 8002a70:	1ba4      	subs	r4, r4, r6
 8002a72:	10a4      	asrs	r4, r4, #2
 8002a74:	42a5      	cmp	r5, r4
 8002a76:	d109      	bne.n	8002a8c <__libc_init_array+0x24>
 8002a78:	f000 fc34 	bl	80032e4 <_init>
 8002a7c:	2500      	movs	r5, #0
 8002a7e:	4e0a      	ldr	r6, [pc, #40]	; (8002aa8 <__libc_init_array+0x40>)
 8002a80:	4c0a      	ldr	r4, [pc, #40]	; (8002aac <__libc_init_array+0x44>)
 8002a82:	1ba4      	subs	r4, r4, r6
 8002a84:	10a4      	asrs	r4, r4, #2
 8002a86:	42a5      	cmp	r5, r4
 8002a88:	d105      	bne.n	8002a96 <__libc_init_array+0x2e>
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
 8002a8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a90:	4798      	blx	r3
 8002a92:	3501      	adds	r5, #1
 8002a94:	e7ee      	b.n	8002a74 <__libc_init_array+0xc>
 8002a96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a9a:	4798      	blx	r3
 8002a9c:	3501      	adds	r5, #1
 8002a9e:	e7f2      	b.n	8002a86 <__libc_init_array+0x1e>
 8002aa0:	08003388 	.word	0x08003388
 8002aa4:	08003388 	.word	0x08003388
 8002aa8:	08003388 	.word	0x08003388
 8002aac:	0800338c 	.word	0x0800338c

08002ab0 <memset>:
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4402      	add	r2, r0
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <memset+0xa>
 8002ab8:	4770      	bx	lr
 8002aba:	f803 1b01 	strb.w	r1, [r3], #1
 8002abe:	e7f9      	b.n	8002ab4 <memset+0x4>

08002ac0 <siprintf>:
 8002ac0:	b40e      	push	{r1, r2, r3}
 8002ac2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ac6:	b500      	push	{lr}
 8002ac8:	b09c      	sub	sp, #112	; 0x70
 8002aca:	ab1d      	add	r3, sp, #116	; 0x74
 8002acc:	9002      	str	r0, [sp, #8]
 8002ace:	9006      	str	r0, [sp, #24]
 8002ad0:	9107      	str	r1, [sp, #28]
 8002ad2:	9104      	str	r1, [sp, #16]
 8002ad4:	4808      	ldr	r0, [pc, #32]	; (8002af8 <siprintf+0x38>)
 8002ad6:	4909      	ldr	r1, [pc, #36]	; (8002afc <siprintf+0x3c>)
 8002ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002adc:	9105      	str	r1, [sp, #20]
 8002ade:	6800      	ldr	r0, [r0, #0]
 8002ae0:	a902      	add	r1, sp, #8
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	f000 f866 	bl	8002bb4 <_svfiprintf_r>
 8002ae8:	2200      	movs	r2, #0
 8002aea:	9b02      	ldr	r3, [sp, #8]
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	b01c      	add	sp, #112	; 0x70
 8002af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002af4:	b003      	add	sp, #12
 8002af6:	4770      	bx	lr
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	ffff0208 	.word	0xffff0208

08002b00 <__ssputs_r>:
 8002b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b04:	688e      	ldr	r6, [r1, #8]
 8002b06:	4682      	mov	sl, r0
 8002b08:	429e      	cmp	r6, r3
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	4690      	mov	r8, r2
 8002b0e:	4699      	mov	r9, r3
 8002b10:	d837      	bhi.n	8002b82 <__ssputs_r+0x82>
 8002b12:	898a      	ldrh	r2, [r1, #12]
 8002b14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b18:	d031      	beq.n	8002b7e <__ssputs_r+0x7e>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	6825      	ldr	r5, [r4, #0]
 8002b1e:	6909      	ldr	r1, [r1, #16]
 8002b20:	1a6f      	subs	r7, r5, r1
 8002b22:	6965      	ldr	r5, [r4, #20]
 8002b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b28:	fb95 f5f3 	sdiv	r5, r5, r3
 8002b2c:	f109 0301 	add.w	r3, r9, #1
 8002b30:	443b      	add	r3, r7
 8002b32:	429d      	cmp	r5, r3
 8002b34:	bf38      	it	cc
 8002b36:	461d      	movcc	r5, r3
 8002b38:	0553      	lsls	r3, r2, #21
 8002b3a:	d530      	bpl.n	8002b9e <__ssputs_r+0x9e>
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	f000 fb37 	bl	80031b0 <_malloc_r>
 8002b42:	4606      	mov	r6, r0
 8002b44:	b950      	cbnz	r0, 8002b5c <__ssputs_r+0x5c>
 8002b46:	230c      	movs	r3, #12
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b4c:	f8ca 3000 	str.w	r3, [sl]
 8002b50:	89a3      	ldrh	r3, [r4, #12]
 8002b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b56:	81a3      	strh	r3, [r4, #12]
 8002b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b5c:	463a      	mov	r2, r7
 8002b5e:	6921      	ldr	r1, [r4, #16]
 8002b60:	f000 fab6 	bl	80030d0 <memcpy>
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6e:	81a3      	strh	r3, [r4, #12]
 8002b70:	6126      	str	r6, [r4, #16]
 8002b72:	443e      	add	r6, r7
 8002b74:	6026      	str	r6, [r4, #0]
 8002b76:	464e      	mov	r6, r9
 8002b78:	6165      	str	r5, [r4, #20]
 8002b7a:	1bed      	subs	r5, r5, r7
 8002b7c:	60a5      	str	r5, [r4, #8]
 8002b7e:	454e      	cmp	r6, r9
 8002b80:	d900      	bls.n	8002b84 <__ssputs_r+0x84>
 8002b82:	464e      	mov	r6, r9
 8002b84:	4632      	mov	r2, r6
 8002b86:	4641      	mov	r1, r8
 8002b88:	6820      	ldr	r0, [r4, #0]
 8002b8a:	f000 faac 	bl	80030e6 <memmove>
 8002b8e:	68a3      	ldr	r3, [r4, #8]
 8002b90:	2000      	movs	r0, #0
 8002b92:	1b9b      	subs	r3, r3, r6
 8002b94:	60a3      	str	r3, [r4, #8]
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	441e      	add	r6, r3
 8002b9a:	6026      	str	r6, [r4, #0]
 8002b9c:	e7dc      	b.n	8002b58 <__ssputs_r+0x58>
 8002b9e:	462a      	mov	r2, r5
 8002ba0:	f000 fb60 	bl	8003264 <_realloc_r>
 8002ba4:	4606      	mov	r6, r0
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d1e2      	bne.n	8002b70 <__ssputs_r+0x70>
 8002baa:	6921      	ldr	r1, [r4, #16]
 8002bac:	4650      	mov	r0, sl
 8002bae:	f000 fab3 	bl	8003118 <_free_r>
 8002bb2:	e7c8      	b.n	8002b46 <__ssputs_r+0x46>

08002bb4 <_svfiprintf_r>:
 8002bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb8:	461d      	mov	r5, r3
 8002bba:	898b      	ldrh	r3, [r1, #12]
 8002bbc:	b09d      	sub	sp, #116	; 0x74
 8002bbe:	061f      	lsls	r7, r3, #24
 8002bc0:	4680      	mov	r8, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	4616      	mov	r6, r2
 8002bc6:	d50f      	bpl.n	8002be8 <_svfiprintf_r+0x34>
 8002bc8:	690b      	ldr	r3, [r1, #16]
 8002bca:	b96b      	cbnz	r3, 8002be8 <_svfiprintf_r+0x34>
 8002bcc:	2140      	movs	r1, #64	; 0x40
 8002bce:	f000 faef 	bl	80031b0 <_malloc_r>
 8002bd2:	6020      	str	r0, [r4, #0]
 8002bd4:	6120      	str	r0, [r4, #16]
 8002bd6:	b928      	cbnz	r0, 8002be4 <_svfiprintf_r+0x30>
 8002bd8:	230c      	movs	r3, #12
 8002bda:	f8c8 3000 	str.w	r3, [r8]
 8002bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002be2:	e0c8      	b.n	8002d76 <_svfiprintf_r+0x1c2>
 8002be4:	2340      	movs	r3, #64	; 0x40
 8002be6:	6163      	str	r3, [r4, #20]
 8002be8:	2300      	movs	r3, #0
 8002bea:	9309      	str	r3, [sp, #36]	; 0x24
 8002bec:	2320      	movs	r3, #32
 8002bee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bf2:	2330      	movs	r3, #48	; 0x30
 8002bf4:	f04f 0b01 	mov.w	fp, #1
 8002bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bfc:	9503      	str	r5, [sp, #12]
 8002bfe:	4637      	mov	r7, r6
 8002c00:	463d      	mov	r5, r7
 8002c02:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c06:	b10b      	cbz	r3, 8002c0c <_svfiprintf_r+0x58>
 8002c08:	2b25      	cmp	r3, #37	; 0x25
 8002c0a:	d13e      	bne.n	8002c8a <_svfiprintf_r+0xd6>
 8002c0c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002c10:	d00b      	beq.n	8002c2a <_svfiprintf_r+0x76>
 8002c12:	4653      	mov	r3, sl
 8002c14:	4632      	mov	r2, r6
 8002c16:	4621      	mov	r1, r4
 8002c18:	4640      	mov	r0, r8
 8002c1a:	f7ff ff71 	bl	8002b00 <__ssputs_r>
 8002c1e:	3001      	adds	r0, #1
 8002c20:	f000 80a4 	beq.w	8002d6c <_svfiprintf_r+0x1b8>
 8002c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c26:	4453      	add	r3, sl
 8002c28:	9309      	str	r3, [sp, #36]	; 0x24
 8002c2a:	783b      	ldrb	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 809d 	beq.w	8002d6c <_svfiprintf_r+0x1b8>
 8002c32:	2300      	movs	r3, #0
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c3c:	9304      	str	r3, [sp, #16]
 8002c3e:	9307      	str	r3, [sp, #28]
 8002c40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c44:	931a      	str	r3, [sp, #104]	; 0x68
 8002c46:	462f      	mov	r7, r5
 8002c48:	2205      	movs	r2, #5
 8002c4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002c4e:	4850      	ldr	r0, [pc, #320]	; (8002d90 <_svfiprintf_r+0x1dc>)
 8002c50:	f000 fa30 	bl	80030b4 <memchr>
 8002c54:	9b04      	ldr	r3, [sp, #16]
 8002c56:	b9d0      	cbnz	r0, 8002c8e <_svfiprintf_r+0xda>
 8002c58:	06d9      	lsls	r1, r3, #27
 8002c5a:	bf44      	itt	mi
 8002c5c:	2220      	movmi	r2, #32
 8002c5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c62:	071a      	lsls	r2, r3, #28
 8002c64:	bf44      	itt	mi
 8002c66:	222b      	movmi	r2, #43	; 0x2b
 8002c68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c6c:	782a      	ldrb	r2, [r5, #0]
 8002c6e:	2a2a      	cmp	r2, #42	; 0x2a
 8002c70:	d015      	beq.n	8002c9e <_svfiprintf_r+0xea>
 8002c72:	462f      	mov	r7, r5
 8002c74:	2000      	movs	r0, #0
 8002c76:	250a      	movs	r5, #10
 8002c78:	9a07      	ldr	r2, [sp, #28]
 8002c7a:	4639      	mov	r1, r7
 8002c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c80:	3b30      	subs	r3, #48	; 0x30
 8002c82:	2b09      	cmp	r3, #9
 8002c84:	d94d      	bls.n	8002d22 <_svfiprintf_r+0x16e>
 8002c86:	b1b8      	cbz	r0, 8002cb8 <_svfiprintf_r+0x104>
 8002c88:	e00f      	b.n	8002caa <_svfiprintf_r+0xf6>
 8002c8a:	462f      	mov	r7, r5
 8002c8c:	e7b8      	b.n	8002c00 <_svfiprintf_r+0x4c>
 8002c8e:	4a40      	ldr	r2, [pc, #256]	; (8002d90 <_svfiprintf_r+0x1dc>)
 8002c90:	463d      	mov	r5, r7
 8002c92:	1a80      	subs	r0, r0, r2
 8002c94:	fa0b f000 	lsl.w	r0, fp, r0
 8002c98:	4318      	orrs	r0, r3
 8002c9a:	9004      	str	r0, [sp, #16]
 8002c9c:	e7d3      	b.n	8002c46 <_svfiprintf_r+0x92>
 8002c9e:	9a03      	ldr	r2, [sp, #12]
 8002ca0:	1d11      	adds	r1, r2, #4
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	9103      	str	r1, [sp, #12]
 8002ca6:	2a00      	cmp	r2, #0
 8002ca8:	db01      	blt.n	8002cae <_svfiprintf_r+0xfa>
 8002caa:	9207      	str	r2, [sp, #28]
 8002cac:	e004      	b.n	8002cb8 <_svfiprintf_r+0x104>
 8002cae:	4252      	negs	r2, r2
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	9207      	str	r2, [sp, #28]
 8002cb6:	9304      	str	r3, [sp, #16]
 8002cb8:	783b      	ldrb	r3, [r7, #0]
 8002cba:	2b2e      	cmp	r3, #46	; 0x2e
 8002cbc:	d10c      	bne.n	8002cd8 <_svfiprintf_r+0x124>
 8002cbe:	787b      	ldrb	r3, [r7, #1]
 8002cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cc2:	d133      	bne.n	8002d2c <_svfiprintf_r+0x178>
 8002cc4:	9b03      	ldr	r3, [sp, #12]
 8002cc6:	3702      	adds	r7, #2
 8002cc8:	1d1a      	adds	r2, r3, #4
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	9203      	str	r2, [sp, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bfb8      	it	lt
 8002cd2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002cd6:	9305      	str	r3, [sp, #20]
 8002cd8:	4d2e      	ldr	r5, [pc, #184]	; (8002d94 <_svfiprintf_r+0x1e0>)
 8002cda:	2203      	movs	r2, #3
 8002cdc:	7839      	ldrb	r1, [r7, #0]
 8002cde:	4628      	mov	r0, r5
 8002ce0:	f000 f9e8 	bl	80030b4 <memchr>
 8002ce4:	b138      	cbz	r0, 8002cf6 <_svfiprintf_r+0x142>
 8002ce6:	2340      	movs	r3, #64	; 0x40
 8002ce8:	1b40      	subs	r0, r0, r5
 8002cea:	fa03 f000 	lsl.w	r0, r3, r0
 8002cee:	9b04      	ldr	r3, [sp, #16]
 8002cf0:	3701      	adds	r7, #1
 8002cf2:	4303      	orrs	r3, r0
 8002cf4:	9304      	str	r3, [sp, #16]
 8002cf6:	7839      	ldrb	r1, [r7, #0]
 8002cf8:	2206      	movs	r2, #6
 8002cfa:	4827      	ldr	r0, [pc, #156]	; (8002d98 <_svfiprintf_r+0x1e4>)
 8002cfc:	1c7e      	adds	r6, r7, #1
 8002cfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d02:	f000 f9d7 	bl	80030b4 <memchr>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d038      	beq.n	8002d7c <_svfiprintf_r+0x1c8>
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <_svfiprintf_r+0x1e8>)
 8002d0c:	bb13      	cbnz	r3, 8002d54 <_svfiprintf_r+0x1a0>
 8002d0e:	9b03      	ldr	r3, [sp, #12]
 8002d10:	3307      	adds	r3, #7
 8002d12:	f023 0307 	bic.w	r3, r3, #7
 8002d16:	3308      	adds	r3, #8
 8002d18:	9303      	str	r3, [sp, #12]
 8002d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d1c:	444b      	add	r3, r9
 8002d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d20:	e76d      	b.n	8002bfe <_svfiprintf_r+0x4a>
 8002d22:	fb05 3202 	mla	r2, r5, r2, r3
 8002d26:	2001      	movs	r0, #1
 8002d28:	460f      	mov	r7, r1
 8002d2a:	e7a6      	b.n	8002c7a <_svfiprintf_r+0xc6>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	250a      	movs	r5, #10
 8002d30:	4619      	mov	r1, r3
 8002d32:	3701      	adds	r7, #1
 8002d34:	9305      	str	r3, [sp, #20]
 8002d36:	4638      	mov	r0, r7
 8002d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d3c:	3a30      	subs	r2, #48	; 0x30
 8002d3e:	2a09      	cmp	r2, #9
 8002d40:	d903      	bls.n	8002d4a <_svfiprintf_r+0x196>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0c8      	beq.n	8002cd8 <_svfiprintf_r+0x124>
 8002d46:	9105      	str	r1, [sp, #20]
 8002d48:	e7c6      	b.n	8002cd8 <_svfiprintf_r+0x124>
 8002d4a:	fb05 2101 	mla	r1, r5, r1, r2
 8002d4e:	2301      	movs	r3, #1
 8002d50:	4607      	mov	r7, r0
 8002d52:	e7f0      	b.n	8002d36 <_svfiprintf_r+0x182>
 8002d54:	ab03      	add	r3, sp, #12
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	4622      	mov	r2, r4
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <_svfiprintf_r+0x1ec>)
 8002d5c:	a904      	add	r1, sp, #16
 8002d5e:	4640      	mov	r0, r8
 8002d60:	f3af 8000 	nop.w
 8002d64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002d68:	4681      	mov	r9, r0
 8002d6a:	d1d6      	bne.n	8002d1a <_svfiprintf_r+0x166>
 8002d6c:	89a3      	ldrh	r3, [r4, #12]
 8002d6e:	065b      	lsls	r3, r3, #25
 8002d70:	f53f af35 	bmi.w	8002bde <_svfiprintf_r+0x2a>
 8002d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d76:	b01d      	add	sp, #116	; 0x74
 8002d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d7c:	ab03      	add	r3, sp, #12
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	4622      	mov	r2, r4
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <_svfiprintf_r+0x1ec>)
 8002d84:	a904      	add	r1, sp, #16
 8002d86:	4640      	mov	r0, r8
 8002d88:	f000 f882 	bl	8002e90 <_printf_i>
 8002d8c:	e7ea      	b.n	8002d64 <_svfiprintf_r+0x1b0>
 8002d8e:	bf00      	nop
 8002d90:	08003354 	.word	0x08003354
 8002d94:	0800335a 	.word	0x0800335a
 8002d98:	0800335e 	.word	0x0800335e
 8002d9c:	00000000 	.word	0x00000000
 8002da0:	08002b01 	.word	0x08002b01

08002da4 <_printf_common>:
 8002da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002da8:	4691      	mov	r9, r2
 8002daa:	461f      	mov	r7, r3
 8002dac:	688a      	ldr	r2, [r1, #8]
 8002dae:	690b      	ldr	r3, [r1, #16]
 8002db0:	4606      	mov	r6, r0
 8002db2:	4293      	cmp	r3, r2
 8002db4:	bfb8      	it	lt
 8002db6:	4613      	movlt	r3, r2
 8002db8:	f8c9 3000 	str.w	r3, [r9]
 8002dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dc6:	b112      	cbz	r2, 8002dce <_printf_common+0x2a>
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f8c9 3000 	str.w	r3, [r9]
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	0699      	lsls	r1, r3, #26
 8002dd2:	bf42      	ittt	mi
 8002dd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002dd8:	3302      	addmi	r3, #2
 8002dda:	f8c9 3000 	strmi.w	r3, [r9]
 8002dde:	6825      	ldr	r5, [r4, #0]
 8002de0:	f015 0506 	ands.w	r5, r5, #6
 8002de4:	d107      	bne.n	8002df6 <_printf_common+0x52>
 8002de6:	f104 0a19 	add.w	sl, r4, #25
 8002dea:	68e3      	ldr	r3, [r4, #12]
 8002dec:	f8d9 2000 	ldr.w	r2, [r9]
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	42ab      	cmp	r3, r5
 8002df4:	dc29      	bgt.n	8002e4a <_printf_common+0xa6>
 8002df6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002dfa:	6822      	ldr	r2, [r4, #0]
 8002dfc:	3300      	adds	r3, #0
 8002dfe:	bf18      	it	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	0692      	lsls	r2, r2, #26
 8002e04:	d42e      	bmi.n	8002e64 <_printf_common+0xc0>
 8002e06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e0a:	4639      	mov	r1, r7
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	47c0      	blx	r8
 8002e10:	3001      	adds	r0, #1
 8002e12:	d021      	beq.n	8002e58 <_printf_common+0xb4>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	68e5      	ldr	r5, [r4, #12]
 8002e18:	f003 0306 	and.w	r3, r3, #6
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	bf18      	it	ne
 8002e20:	2500      	movne	r5, #0
 8002e22:	f8d9 2000 	ldr.w	r2, [r9]
 8002e26:	f04f 0900 	mov.w	r9, #0
 8002e2a:	bf08      	it	eq
 8002e2c:	1aad      	subeq	r5, r5, r2
 8002e2e:	68a3      	ldr	r3, [r4, #8]
 8002e30:	6922      	ldr	r2, [r4, #16]
 8002e32:	bf08      	it	eq
 8002e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	bfc4      	itt	gt
 8002e3c:	1a9b      	subgt	r3, r3, r2
 8002e3e:	18ed      	addgt	r5, r5, r3
 8002e40:	341a      	adds	r4, #26
 8002e42:	454d      	cmp	r5, r9
 8002e44:	d11a      	bne.n	8002e7c <_printf_common+0xd8>
 8002e46:	2000      	movs	r0, #0
 8002e48:	e008      	b.n	8002e5c <_printf_common+0xb8>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	4652      	mov	r2, sl
 8002e4e:	4639      	mov	r1, r7
 8002e50:	4630      	mov	r0, r6
 8002e52:	47c0      	blx	r8
 8002e54:	3001      	adds	r0, #1
 8002e56:	d103      	bne.n	8002e60 <_printf_common+0xbc>
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e60:	3501      	adds	r5, #1
 8002e62:	e7c2      	b.n	8002dea <_printf_common+0x46>
 8002e64:	2030      	movs	r0, #48	; 0x30
 8002e66:	18e1      	adds	r1, r4, r3
 8002e68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e72:	4422      	add	r2, r4
 8002e74:	3302      	adds	r3, #2
 8002e76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e7a:	e7c4      	b.n	8002e06 <_printf_common+0x62>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	4622      	mov	r2, r4
 8002e80:	4639      	mov	r1, r7
 8002e82:	4630      	mov	r0, r6
 8002e84:	47c0      	blx	r8
 8002e86:	3001      	adds	r0, #1
 8002e88:	d0e6      	beq.n	8002e58 <_printf_common+0xb4>
 8002e8a:	f109 0901 	add.w	r9, r9, #1
 8002e8e:	e7d8      	b.n	8002e42 <_printf_common+0x9e>

08002e90 <_printf_i>:
 8002e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002e98:	460c      	mov	r4, r1
 8002e9a:	7e09      	ldrb	r1, [r1, #24]
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	296e      	cmp	r1, #110	; 0x6e
 8002ea0:	4617      	mov	r7, r2
 8002ea2:	4606      	mov	r6, r0
 8002ea4:	4698      	mov	r8, r3
 8002ea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ea8:	f000 80b3 	beq.w	8003012 <_printf_i+0x182>
 8002eac:	d822      	bhi.n	8002ef4 <_printf_i+0x64>
 8002eae:	2963      	cmp	r1, #99	; 0x63
 8002eb0:	d036      	beq.n	8002f20 <_printf_i+0x90>
 8002eb2:	d80a      	bhi.n	8002eca <_printf_i+0x3a>
 8002eb4:	2900      	cmp	r1, #0
 8002eb6:	f000 80b9 	beq.w	800302c <_printf_i+0x19c>
 8002eba:	2958      	cmp	r1, #88	; 0x58
 8002ebc:	f000 8083 	beq.w	8002fc6 <_printf_i+0x136>
 8002ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ec4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002ec8:	e032      	b.n	8002f30 <_printf_i+0xa0>
 8002eca:	2964      	cmp	r1, #100	; 0x64
 8002ecc:	d001      	beq.n	8002ed2 <_printf_i+0x42>
 8002ece:	2969      	cmp	r1, #105	; 0x69
 8002ed0:	d1f6      	bne.n	8002ec0 <_printf_i+0x30>
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	6813      	ldr	r3, [r2, #0]
 8002ed6:	0605      	lsls	r5, r0, #24
 8002ed8:	f103 0104 	add.w	r1, r3, #4
 8002edc:	d52a      	bpl.n	8002f34 <_printf_i+0xa4>
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6011      	str	r1, [r2, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	da03      	bge.n	8002eee <_printf_i+0x5e>
 8002ee6:	222d      	movs	r2, #45	; 0x2d
 8002ee8:	425b      	negs	r3, r3
 8002eea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002eee:	486f      	ldr	r0, [pc, #444]	; (80030ac <_printf_i+0x21c>)
 8002ef0:	220a      	movs	r2, #10
 8002ef2:	e039      	b.n	8002f68 <_printf_i+0xd8>
 8002ef4:	2973      	cmp	r1, #115	; 0x73
 8002ef6:	f000 809d 	beq.w	8003034 <_printf_i+0x1a4>
 8002efa:	d808      	bhi.n	8002f0e <_printf_i+0x7e>
 8002efc:	296f      	cmp	r1, #111	; 0x6f
 8002efe:	d020      	beq.n	8002f42 <_printf_i+0xb2>
 8002f00:	2970      	cmp	r1, #112	; 0x70
 8002f02:	d1dd      	bne.n	8002ec0 <_printf_i+0x30>
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	f043 0320 	orr.w	r3, r3, #32
 8002f0a:	6023      	str	r3, [r4, #0]
 8002f0c:	e003      	b.n	8002f16 <_printf_i+0x86>
 8002f0e:	2975      	cmp	r1, #117	; 0x75
 8002f10:	d017      	beq.n	8002f42 <_printf_i+0xb2>
 8002f12:	2978      	cmp	r1, #120	; 0x78
 8002f14:	d1d4      	bne.n	8002ec0 <_printf_i+0x30>
 8002f16:	2378      	movs	r3, #120	; 0x78
 8002f18:	4865      	ldr	r0, [pc, #404]	; (80030b0 <_printf_i+0x220>)
 8002f1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f1e:	e055      	b.n	8002fcc <_printf_i+0x13c>
 8002f20:	6813      	ldr	r3, [r2, #0]
 8002f22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f26:	1d19      	adds	r1, r3, #4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6011      	str	r1, [r2, #0]
 8002f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f30:	2301      	movs	r3, #1
 8002f32:	e08c      	b.n	800304e <_printf_i+0x1be>
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f3a:	6011      	str	r1, [r2, #0]
 8002f3c:	bf18      	it	ne
 8002f3e:	b21b      	sxthne	r3, r3
 8002f40:	e7cf      	b.n	8002ee2 <_printf_i+0x52>
 8002f42:	6813      	ldr	r3, [r2, #0]
 8002f44:	6825      	ldr	r5, [r4, #0]
 8002f46:	1d18      	adds	r0, r3, #4
 8002f48:	6010      	str	r0, [r2, #0]
 8002f4a:	0628      	lsls	r0, r5, #24
 8002f4c:	d501      	bpl.n	8002f52 <_printf_i+0xc2>
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e002      	b.n	8002f58 <_printf_i+0xc8>
 8002f52:	0668      	lsls	r0, r5, #25
 8002f54:	d5fb      	bpl.n	8002f4e <_printf_i+0xbe>
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	296f      	cmp	r1, #111	; 0x6f
 8002f5a:	bf14      	ite	ne
 8002f5c:	220a      	movne	r2, #10
 8002f5e:	2208      	moveq	r2, #8
 8002f60:	4852      	ldr	r0, [pc, #328]	; (80030ac <_printf_i+0x21c>)
 8002f62:	2100      	movs	r1, #0
 8002f64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f68:	6865      	ldr	r5, [r4, #4]
 8002f6a:	2d00      	cmp	r5, #0
 8002f6c:	60a5      	str	r5, [r4, #8]
 8002f6e:	f2c0 8095 	blt.w	800309c <_printf_i+0x20c>
 8002f72:	6821      	ldr	r1, [r4, #0]
 8002f74:	f021 0104 	bic.w	r1, r1, #4
 8002f78:	6021      	str	r1, [r4, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d13d      	bne.n	8002ffa <_printf_i+0x16a>
 8002f7e:	2d00      	cmp	r5, #0
 8002f80:	f040 808e 	bne.w	80030a0 <_printf_i+0x210>
 8002f84:	4665      	mov	r5, ip
 8002f86:	2a08      	cmp	r2, #8
 8002f88:	d10b      	bne.n	8002fa2 <_printf_i+0x112>
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	07db      	lsls	r3, r3, #31
 8002f8e:	d508      	bpl.n	8002fa2 <_printf_i+0x112>
 8002f90:	6923      	ldr	r3, [r4, #16]
 8002f92:	6862      	ldr	r2, [r4, #4]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	bfde      	ittt	le
 8002f98:	2330      	movle	r3, #48	; 0x30
 8002f9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f9e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002fa2:	ebac 0305 	sub.w	r3, ip, r5
 8002fa6:	6123      	str	r3, [r4, #16]
 8002fa8:	f8cd 8000 	str.w	r8, [sp]
 8002fac:	463b      	mov	r3, r7
 8002fae:	aa03      	add	r2, sp, #12
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	f7ff fef6 	bl	8002da4 <_printf_common>
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d14d      	bne.n	8003058 <_printf_i+0x1c8>
 8002fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fc0:	b005      	add	sp, #20
 8002fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fc6:	4839      	ldr	r0, [pc, #228]	; (80030ac <_printf_i+0x21c>)
 8002fc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002fcc:	6813      	ldr	r3, [r2, #0]
 8002fce:	6821      	ldr	r1, [r4, #0]
 8002fd0:	1d1d      	adds	r5, r3, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6015      	str	r5, [r2, #0]
 8002fd6:	060a      	lsls	r2, r1, #24
 8002fd8:	d50b      	bpl.n	8002ff2 <_printf_i+0x162>
 8002fda:	07ca      	lsls	r2, r1, #31
 8002fdc:	bf44      	itt	mi
 8002fde:	f041 0120 	orrmi.w	r1, r1, #32
 8002fe2:	6021      	strmi	r1, [r4, #0]
 8002fe4:	b91b      	cbnz	r3, 8002fee <_printf_i+0x15e>
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	f022 0220 	bic.w	r2, r2, #32
 8002fec:	6022      	str	r2, [r4, #0]
 8002fee:	2210      	movs	r2, #16
 8002ff0:	e7b7      	b.n	8002f62 <_printf_i+0xd2>
 8002ff2:	064d      	lsls	r5, r1, #25
 8002ff4:	bf48      	it	mi
 8002ff6:	b29b      	uxthmi	r3, r3
 8002ff8:	e7ef      	b.n	8002fda <_printf_i+0x14a>
 8002ffa:	4665      	mov	r5, ip
 8002ffc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003000:	fb02 3311 	mls	r3, r2, r1, r3
 8003004:	5cc3      	ldrb	r3, [r0, r3]
 8003006:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800300a:	460b      	mov	r3, r1
 800300c:	2900      	cmp	r1, #0
 800300e:	d1f5      	bne.n	8002ffc <_printf_i+0x16c>
 8003010:	e7b9      	b.n	8002f86 <_printf_i+0xf6>
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	6825      	ldr	r5, [r4, #0]
 8003016:	1d18      	adds	r0, r3, #4
 8003018:	6961      	ldr	r1, [r4, #20]
 800301a:	6010      	str	r0, [r2, #0]
 800301c:	0628      	lsls	r0, r5, #24
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	d501      	bpl.n	8003026 <_printf_i+0x196>
 8003022:	6019      	str	r1, [r3, #0]
 8003024:	e002      	b.n	800302c <_printf_i+0x19c>
 8003026:	066a      	lsls	r2, r5, #25
 8003028:	d5fb      	bpl.n	8003022 <_printf_i+0x192>
 800302a:	8019      	strh	r1, [r3, #0]
 800302c:	2300      	movs	r3, #0
 800302e:	4665      	mov	r5, ip
 8003030:	6123      	str	r3, [r4, #16]
 8003032:	e7b9      	b.n	8002fa8 <_printf_i+0x118>
 8003034:	6813      	ldr	r3, [r2, #0]
 8003036:	1d19      	adds	r1, r3, #4
 8003038:	6011      	str	r1, [r2, #0]
 800303a:	681d      	ldr	r5, [r3, #0]
 800303c:	6862      	ldr	r2, [r4, #4]
 800303e:	2100      	movs	r1, #0
 8003040:	4628      	mov	r0, r5
 8003042:	f000 f837 	bl	80030b4 <memchr>
 8003046:	b108      	cbz	r0, 800304c <_printf_i+0x1bc>
 8003048:	1b40      	subs	r0, r0, r5
 800304a:	6060      	str	r0, [r4, #4]
 800304c:	6863      	ldr	r3, [r4, #4]
 800304e:	6123      	str	r3, [r4, #16]
 8003050:	2300      	movs	r3, #0
 8003052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003056:	e7a7      	b.n	8002fa8 <_printf_i+0x118>
 8003058:	6923      	ldr	r3, [r4, #16]
 800305a:	462a      	mov	r2, r5
 800305c:	4639      	mov	r1, r7
 800305e:	4630      	mov	r0, r6
 8003060:	47c0      	blx	r8
 8003062:	3001      	adds	r0, #1
 8003064:	d0aa      	beq.n	8002fbc <_printf_i+0x12c>
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	079b      	lsls	r3, r3, #30
 800306a:	d413      	bmi.n	8003094 <_printf_i+0x204>
 800306c:	68e0      	ldr	r0, [r4, #12]
 800306e:	9b03      	ldr	r3, [sp, #12]
 8003070:	4298      	cmp	r0, r3
 8003072:	bfb8      	it	lt
 8003074:	4618      	movlt	r0, r3
 8003076:	e7a3      	b.n	8002fc0 <_printf_i+0x130>
 8003078:	2301      	movs	r3, #1
 800307a:	464a      	mov	r2, r9
 800307c:	4639      	mov	r1, r7
 800307e:	4630      	mov	r0, r6
 8003080:	47c0      	blx	r8
 8003082:	3001      	adds	r0, #1
 8003084:	d09a      	beq.n	8002fbc <_printf_i+0x12c>
 8003086:	3501      	adds	r5, #1
 8003088:	68e3      	ldr	r3, [r4, #12]
 800308a:	9a03      	ldr	r2, [sp, #12]
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	42ab      	cmp	r3, r5
 8003090:	dcf2      	bgt.n	8003078 <_printf_i+0x1e8>
 8003092:	e7eb      	b.n	800306c <_printf_i+0x1dc>
 8003094:	2500      	movs	r5, #0
 8003096:	f104 0919 	add.w	r9, r4, #25
 800309a:	e7f5      	b.n	8003088 <_printf_i+0x1f8>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ac      	bne.n	8002ffa <_printf_i+0x16a>
 80030a0:	7803      	ldrb	r3, [r0, #0]
 80030a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030aa:	e76c      	b.n	8002f86 <_printf_i+0xf6>
 80030ac:	08003365 	.word	0x08003365
 80030b0:	08003376 	.word	0x08003376

080030b4 <memchr>:
 80030b4:	b510      	push	{r4, lr}
 80030b6:	b2c9      	uxtb	r1, r1
 80030b8:	4402      	add	r2, r0
 80030ba:	4290      	cmp	r0, r2
 80030bc:	4603      	mov	r3, r0
 80030be:	d101      	bne.n	80030c4 <memchr+0x10>
 80030c0:	2300      	movs	r3, #0
 80030c2:	e003      	b.n	80030cc <memchr+0x18>
 80030c4:	781c      	ldrb	r4, [r3, #0]
 80030c6:	3001      	adds	r0, #1
 80030c8:	428c      	cmp	r4, r1
 80030ca:	d1f6      	bne.n	80030ba <memchr+0x6>
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd10      	pop	{r4, pc}

080030d0 <memcpy>:
 80030d0:	b510      	push	{r4, lr}
 80030d2:	1e43      	subs	r3, r0, #1
 80030d4:	440a      	add	r2, r1
 80030d6:	4291      	cmp	r1, r2
 80030d8:	d100      	bne.n	80030dc <memcpy+0xc>
 80030da:	bd10      	pop	{r4, pc}
 80030dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030e4:	e7f7      	b.n	80030d6 <memcpy+0x6>

080030e6 <memmove>:
 80030e6:	4288      	cmp	r0, r1
 80030e8:	b510      	push	{r4, lr}
 80030ea:	eb01 0302 	add.w	r3, r1, r2
 80030ee:	d807      	bhi.n	8003100 <memmove+0x1a>
 80030f0:	1e42      	subs	r2, r0, #1
 80030f2:	4299      	cmp	r1, r3
 80030f4:	d00a      	beq.n	800310c <memmove+0x26>
 80030f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80030fe:	e7f8      	b.n	80030f2 <memmove+0xc>
 8003100:	4283      	cmp	r3, r0
 8003102:	d9f5      	bls.n	80030f0 <memmove+0xa>
 8003104:	1881      	adds	r1, r0, r2
 8003106:	1ad2      	subs	r2, r2, r3
 8003108:	42d3      	cmn	r3, r2
 800310a:	d100      	bne.n	800310e <memmove+0x28>
 800310c:	bd10      	pop	{r4, pc}
 800310e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003112:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003116:	e7f7      	b.n	8003108 <memmove+0x22>

08003118 <_free_r>:
 8003118:	b538      	push	{r3, r4, r5, lr}
 800311a:	4605      	mov	r5, r0
 800311c:	2900      	cmp	r1, #0
 800311e:	d043      	beq.n	80031a8 <_free_r+0x90>
 8003120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003124:	1f0c      	subs	r4, r1, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	bfb8      	it	lt
 800312a:	18e4      	addlt	r4, r4, r3
 800312c:	f000 f8d0 	bl	80032d0 <__malloc_lock>
 8003130:	4a1e      	ldr	r2, [pc, #120]	; (80031ac <_free_r+0x94>)
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	4610      	mov	r0, r2
 8003136:	b933      	cbnz	r3, 8003146 <_free_r+0x2e>
 8003138:	6063      	str	r3, [r4, #4]
 800313a:	6014      	str	r4, [r2, #0]
 800313c:	4628      	mov	r0, r5
 800313e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003142:	f000 b8c6 	b.w	80032d2 <__malloc_unlock>
 8003146:	42a3      	cmp	r3, r4
 8003148:	d90b      	bls.n	8003162 <_free_r+0x4a>
 800314a:	6821      	ldr	r1, [r4, #0]
 800314c:	1862      	adds	r2, r4, r1
 800314e:	4293      	cmp	r3, r2
 8003150:	bf01      	itttt	eq
 8003152:	681a      	ldreq	r2, [r3, #0]
 8003154:	685b      	ldreq	r3, [r3, #4]
 8003156:	1852      	addeq	r2, r2, r1
 8003158:	6022      	streq	r2, [r4, #0]
 800315a:	6063      	str	r3, [r4, #4]
 800315c:	6004      	str	r4, [r0, #0]
 800315e:	e7ed      	b.n	800313c <_free_r+0x24>
 8003160:	4613      	mov	r3, r2
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	b10a      	cbz	r2, 800316a <_free_r+0x52>
 8003166:	42a2      	cmp	r2, r4
 8003168:	d9fa      	bls.n	8003160 <_free_r+0x48>
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	1858      	adds	r0, r3, r1
 800316e:	42a0      	cmp	r0, r4
 8003170:	d10b      	bne.n	800318a <_free_r+0x72>
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	4401      	add	r1, r0
 8003176:	1858      	adds	r0, r3, r1
 8003178:	4282      	cmp	r2, r0
 800317a:	6019      	str	r1, [r3, #0]
 800317c:	d1de      	bne.n	800313c <_free_r+0x24>
 800317e:	6810      	ldr	r0, [r2, #0]
 8003180:	6852      	ldr	r2, [r2, #4]
 8003182:	4401      	add	r1, r0
 8003184:	6019      	str	r1, [r3, #0]
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	e7d8      	b.n	800313c <_free_r+0x24>
 800318a:	d902      	bls.n	8003192 <_free_r+0x7a>
 800318c:	230c      	movs	r3, #12
 800318e:	602b      	str	r3, [r5, #0]
 8003190:	e7d4      	b.n	800313c <_free_r+0x24>
 8003192:	6820      	ldr	r0, [r4, #0]
 8003194:	1821      	adds	r1, r4, r0
 8003196:	428a      	cmp	r2, r1
 8003198:	bf01      	itttt	eq
 800319a:	6811      	ldreq	r1, [r2, #0]
 800319c:	6852      	ldreq	r2, [r2, #4]
 800319e:	1809      	addeq	r1, r1, r0
 80031a0:	6021      	streq	r1, [r4, #0]
 80031a2:	6062      	str	r2, [r4, #4]
 80031a4:	605c      	str	r4, [r3, #4]
 80031a6:	e7c9      	b.n	800313c <_free_r+0x24>
 80031a8:	bd38      	pop	{r3, r4, r5, pc}
 80031aa:	bf00      	nop
 80031ac:	20000090 	.word	0x20000090

080031b0 <_malloc_r>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	1ccd      	adds	r5, r1, #3
 80031b4:	f025 0503 	bic.w	r5, r5, #3
 80031b8:	3508      	adds	r5, #8
 80031ba:	2d0c      	cmp	r5, #12
 80031bc:	bf38      	it	cc
 80031be:	250c      	movcc	r5, #12
 80031c0:	2d00      	cmp	r5, #0
 80031c2:	4606      	mov	r6, r0
 80031c4:	db01      	blt.n	80031ca <_malloc_r+0x1a>
 80031c6:	42a9      	cmp	r1, r5
 80031c8:	d903      	bls.n	80031d2 <_malloc_r+0x22>
 80031ca:	230c      	movs	r3, #12
 80031cc:	6033      	str	r3, [r6, #0]
 80031ce:	2000      	movs	r0, #0
 80031d0:	bd70      	pop	{r4, r5, r6, pc}
 80031d2:	f000 f87d 	bl	80032d0 <__malloc_lock>
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <_malloc_r+0xac>)
 80031d8:	6814      	ldr	r4, [r2, #0]
 80031da:	4621      	mov	r1, r4
 80031dc:	b991      	cbnz	r1, 8003204 <_malloc_r+0x54>
 80031de:	4c20      	ldr	r4, [pc, #128]	; (8003260 <_malloc_r+0xb0>)
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	b91b      	cbnz	r3, 80031ec <_malloc_r+0x3c>
 80031e4:	4630      	mov	r0, r6
 80031e6:	f000 f863 	bl	80032b0 <_sbrk_r>
 80031ea:	6020      	str	r0, [r4, #0]
 80031ec:	4629      	mov	r1, r5
 80031ee:	4630      	mov	r0, r6
 80031f0:	f000 f85e 	bl	80032b0 <_sbrk_r>
 80031f4:	1c43      	adds	r3, r0, #1
 80031f6:	d124      	bne.n	8003242 <_malloc_r+0x92>
 80031f8:	230c      	movs	r3, #12
 80031fa:	4630      	mov	r0, r6
 80031fc:	6033      	str	r3, [r6, #0]
 80031fe:	f000 f868 	bl	80032d2 <__malloc_unlock>
 8003202:	e7e4      	b.n	80031ce <_malloc_r+0x1e>
 8003204:	680b      	ldr	r3, [r1, #0]
 8003206:	1b5b      	subs	r3, r3, r5
 8003208:	d418      	bmi.n	800323c <_malloc_r+0x8c>
 800320a:	2b0b      	cmp	r3, #11
 800320c:	d90f      	bls.n	800322e <_malloc_r+0x7e>
 800320e:	600b      	str	r3, [r1, #0]
 8003210:	18cc      	adds	r4, r1, r3
 8003212:	50cd      	str	r5, [r1, r3]
 8003214:	4630      	mov	r0, r6
 8003216:	f000 f85c 	bl	80032d2 <__malloc_unlock>
 800321a:	f104 000b 	add.w	r0, r4, #11
 800321e:	1d23      	adds	r3, r4, #4
 8003220:	f020 0007 	bic.w	r0, r0, #7
 8003224:	1ac3      	subs	r3, r0, r3
 8003226:	d0d3      	beq.n	80031d0 <_malloc_r+0x20>
 8003228:	425a      	negs	r2, r3
 800322a:	50e2      	str	r2, [r4, r3]
 800322c:	e7d0      	b.n	80031d0 <_malloc_r+0x20>
 800322e:	684b      	ldr	r3, [r1, #4]
 8003230:	428c      	cmp	r4, r1
 8003232:	bf16      	itet	ne
 8003234:	6063      	strne	r3, [r4, #4]
 8003236:	6013      	streq	r3, [r2, #0]
 8003238:	460c      	movne	r4, r1
 800323a:	e7eb      	b.n	8003214 <_malloc_r+0x64>
 800323c:	460c      	mov	r4, r1
 800323e:	6849      	ldr	r1, [r1, #4]
 8003240:	e7cc      	b.n	80031dc <_malloc_r+0x2c>
 8003242:	1cc4      	adds	r4, r0, #3
 8003244:	f024 0403 	bic.w	r4, r4, #3
 8003248:	42a0      	cmp	r0, r4
 800324a:	d005      	beq.n	8003258 <_malloc_r+0xa8>
 800324c:	1a21      	subs	r1, r4, r0
 800324e:	4630      	mov	r0, r6
 8003250:	f000 f82e 	bl	80032b0 <_sbrk_r>
 8003254:	3001      	adds	r0, #1
 8003256:	d0cf      	beq.n	80031f8 <_malloc_r+0x48>
 8003258:	6025      	str	r5, [r4, #0]
 800325a:	e7db      	b.n	8003214 <_malloc_r+0x64>
 800325c:	20000090 	.word	0x20000090
 8003260:	20000094 	.word	0x20000094

08003264 <_realloc_r>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	4607      	mov	r7, r0
 8003268:	4614      	mov	r4, r2
 800326a:	460e      	mov	r6, r1
 800326c:	b921      	cbnz	r1, 8003278 <_realloc_r+0x14>
 800326e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003272:	4611      	mov	r1, r2
 8003274:	f7ff bf9c 	b.w	80031b0 <_malloc_r>
 8003278:	b922      	cbnz	r2, 8003284 <_realloc_r+0x20>
 800327a:	f7ff ff4d 	bl	8003118 <_free_r>
 800327e:	4625      	mov	r5, r4
 8003280:	4628      	mov	r0, r5
 8003282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003284:	f000 f826 	bl	80032d4 <_malloc_usable_size_r>
 8003288:	42a0      	cmp	r0, r4
 800328a:	d20f      	bcs.n	80032ac <_realloc_r+0x48>
 800328c:	4621      	mov	r1, r4
 800328e:	4638      	mov	r0, r7
 8003290:	f7ff ff8e 	bl	80031b0 <_malloc_r>
 8003294:	4605      	mov	r5, r0
 8003296:	2800      	cmp	r0, #0
 8003298:	d0f2      	beq.n	8003280 <_realloc_r+0x1c>
 800329a:	4631      	mov	r1, r6
 800329c:	4622      	mov	r2, r4
 800329e:	f7ff ff17 	bl	80030d0 <memcpy>
 80032a2:	4631      	mov	r1, r6
 80032a4:	4638      	mov	r0, r7
 80032a6:	f7ff ff37 	bl	8003118 <_free_r>
 80032aa:	e7e9      	b.n	8003280 <_realloc_r+0x1c>
 80032ac:	4635      	mov	r5, r6
 80032ae:	e7e7      	b.n	8003280 <_realloc_r+0x1c>

080032b0 <_sbrk_r>:
 80032b0:	b538      	push	{r3, r4, r5, lr}
 80032b2:	2300      	movs	r3, #0
 80032b4:	4c05      	ldr	r4, [pc, #20]	; (80032cc <_sbrk_r+0x1c>)
 80032b6:	4605      	mov	r5, r0
 80032b8:	4608      	mov	r0, r1
 80032ba:	6023      	str	r3, [r4, #0]
 80032bc:	f7ff fb48 	bl	8002950 <_sbrk>
 80032c0:	1c43      	adds	r3, r0, #1
 80032c2:	d102      	bne.n	80032ca <_sbrk_r+0x1a>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	b103      	cbz	r3, 80032ca <_sbrk_r+0x1a>
 80032c8:	602b      	str	r3, [r5, #0]
 80032ca:	bd38      	pop	{r3, r4, r5, pc}
 80032cc:	20000180 	.word	0x20000180

080032d0 <__malloc_lock>:
 80032d0:	4770      	bx	lr

080032d2 <__malloc_unlock>:
 80032d2:	4770      	bx	lr

080032d4 <_malloc_usable_size_r>:
 80032d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032d8:	1f18      	subs	r0, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bfbc      	itt	lt
 80032de:	580b      	ldrlt	r3, [r1, r0]
 80032e0:	18c0      	addlt	r0, r0, r3
 80032e2:	4770      	bx	lr

080032e4 <_init>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	bf00      	nop
 80032e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ea:	bc08      	pop	{r3}
 80032ec:	469e      	mov	lr, r3
 80032ee:	4770      	bx	lr

080032f0 <_fini>:
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f2:	bf00      	nop
 80032f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f6:	bc08      	pop	{r3}
 80032f8:	469e      	mov	lr, r3
 80032fa:	4770      	bx	lr
